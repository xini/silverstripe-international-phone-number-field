{"version":3,"sources":["node_modules/libphonenumber-js/metadata.min.json.js","node_modules/libphonenumber-js/min/exports/withMetadataArgument.js","node_modules/libphonenumber-js/es6/tools/semver-compare.js","node_modules/libphonenumber-js/es6/helpers/isObject.js","node_modules/libphonenumber-js/es6/metadata.js","node_modules/libphonenumber-js/es6/helpers/mergeArrays.js","node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js","node_modules/libphonenumber-js/es6/isPossible.js","node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js","node_modules/libphonenumber-js/es6/helpers/getNumberType.js","node_modules/libphonenumber-js/es6/isValid.js","node_modules/libphonenumber-js/es6/helpers/getPossibleCountriesForNumber.js","node_modules/libphonenumber-js/es6/constants.js","node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js","node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js","node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js","node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js","node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js","node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js","node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js","node_modules/libphonenumber-js/es6/helpers/RFC3966.js","node_modules/libphonenumber-js/es6/format.js","node_modules/libphonenumber-js/es6/PhoneNumber.js","node_modules/libphonenumber-js/es6/ParseError.js","node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js","node_modules/libphonenumber-js/es6/helpers/parseDigits.js","node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","node_modules/libphonenumber-js/es6/helpers/getCountryByNationalNumber.js","node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js","node_modules/libphonenumber-js/es6/helpers/extractPhoneContext.js","node_modules/libphonenumber-js/es6/helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js","node_modules/libphonenumber-js/es6/parse.js","node_modules/libphonenumber-js/es6/parsePhoneNumberWithError_.js","node_modules/libphonenumber-js/es6/normalizeArguments.js","node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","node_modules/libphonenumber-js/es6/isValidPhoneNumber.js","node_modules/libphonenumber-js/min/exports/isValidPhoneNumber.js","src/javascript/components/jquery-validator.js","node_modules/intl-tel-input/build/js/intlTelInput.js","src/javascript/components/field-init.js"],"names":["metadata","country_calling_codes","1","7","20","27","30","31","33","34","36","39","40","41","43","44","45","46","47","48","49","51","52","53","54","55","56","57","58","60","61","62","63","64","66","81","82","84","90","_typeof","91","_classCallCheck","92","_defineProperties","93","_createClass","94","_toPropertyKey","95","_toPrimitive","98","211","212","213","216","218","220","221","222","223","224","225","226","227","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","260","261","262","263","264","265","266","267","268","269","290","291","297","298","299","350","351","352","353","354","355","356","357","358","359","370","371","372","373","374","375","376","377","378","380","381","382","383","385","386","387","389","420","421","423","500","501","502","503","504","505","506","507","508","509","590","591","592","593","594","595","596","597","598","599","670","672","673","674","675","676","677","678","679","680","681","682","683","685","686","687","688","689","690","691","692","850","852","853","855","856","880","886","960","961","962","963","964","965","966","967","968","970","971","972","973","974","975","976","977","992","993","994","995","996","998","countries","AC","AD","AE","AF","AG","AI","AL","AM","AO","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GT","GU","GW","GY","HK","HN","HR","HT","HU","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TA","TC","TD","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW","nonGeographic","800","808","870","878","881","882","883","888","979","func","_arguments","args","Array","prototype","slice","call","push","apply","this","compare","a","b","split","pa","pb","i","na","Number","nb","isNaN","objectConstructor","constructor","isObject","object","_typeof$7","o","Symbol","iterator","_classCallCheck$2","n","TypeError","_defineProperties$2","e","r","t","length","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey$7","key","_createClass$2","_toPrimitive$7","toPrimitive","String","V3","V4","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","validateMetadata","setVersion","value","keys","filter","_","countryCode","v1","v2","v3","nonGeographical","country","undefined","getCountryMetadata","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","test","hasCountry","Error","concat","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","_createForOfIteratorHelperLoose","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","_type","type","ext","country_phone_code_to_countries","globalMetadataObject","_unsupportedIterableToArray","_arrayLikeToArray","_this","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type2","getType","Type","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","join","typeOf","getCountryCallingCode","countryCallingCode","isSupportedCountry","hasOwnProperty","version","v4","_createForOfIteratorHelperLoose$4","next","bind","isArray","_unsupportedIterableToArray$5","done","_arrayLikeToArray$5","toString","name","from","mergeArrays","merged","_iterator","_step","element","indexOf","sort","checkNumberLength","nationalNumber","checkNumberLengthForType","type_info","possible_lengths","mobile_type","actual_length","minimum_length","isPossiblePhoneNumber","input","options","isPossibleNumber","phone","isNonGeographicCallingCode","matchesEntirely","text","regular_expression","RegExp","_createForOfIteratorHelperLoose$3","_unsupportedIterableToArray$4","_arrayLikeToArray$4","NON_FIXED_LINE_PHONE_TYPES","getNumberType","isNumberTypeEqualTo","pattern","isValidNumber","getPossibleCountriesForNumber","possibleCountries","couldNationalNumberBelongToCountry","_metadata","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","VALID_PUNCTUATION","PLUS_CHARS","CAPTURING_DIGIT_PATTERN","stripIddPrefix","number","countryMetadata","IDDPrefixPattern","search","matchedGroups","match","extractNationalNumberFromPossiblyIncompleteNumber","carrierCode","hasCapturedGroups","possiblePositionOfTheFirstCapturedGroup","prefixPattern","prefixMatch","exec","capturedGroupsCount","replace","prefixBeforeNationalNumber","extractNationalNumber","_extractNationalNumbe","shouldHaveExtractedNationalPrefix","isPossibleIncompleteNationalNumber","nationalNumberBefore","nationalNumberAfter","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","possibleShorterNumber","possibleShorterNationalNumber","_defineProperty","isNumberWithIddPrefix","numberWithoutIDD","_extractCountryCallin","countryCallingCodeSource","_countryCallingCode","applyInternationalSeparatorStyle","formattedNumber","trim","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","_ref","useInternationalFormat","withNationalPrefix","internationalFormat","SINGLE_IDD_PREFIX_REG_EXP","getIddPrefix","RFC3966_EXTN_PREFIX","getExtensionDigitsPattern","maxLength","createExtensionPattern","purpose","possibleSeparatorsBetweenNumberAndExtLabel","possibleSeparatorsNumberExtLabelNoComma","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_START_REG_EXP","VALID_PHONE_NUMBER_WITH_EXTENSION","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","isViablePhoneNumberStart","formatRFC3966","_typeof$6","_createForOfIteratorHelperLoose$2","_unsupportedIterableToArray$3","_arrayLikeToArray$3","ownKeys$5","getOwnPropertySymbols","getOwnPropertyDescriptor","_objectSpread$5","arguments","forEach","_defineProperty$5","getOwnPropertyDescriptors","defineProperties","_toPropertyKey$6","_toPrimitive$6","DEFAULT_OPTIONS","formatExtension","extension","formatNumber","addExtension","formatNationalNumber","fromCountry","formatIDD","formatAs","chooseFormatForNumber","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","iddPrefix","_typeof$5","ownKeys$4","_objectSpread$4","_defineProperty$4","_toPropertyKey$5","_classCallCheck$1","_defineProperties$1","_createClass$1","_toPrimitive$5","PhoneNumber","countryOrCountryCallingCode","e164Number","E164_NUMBER_REGEXP","extractCountryCallingCode","_getCountryAndCountry","getCountryAndCountryCallingCode","getMetadata","phoneNumber","isCountryCode","metadataJson","_typeof$4","parsePhoneNumber","_toPropertyKey$4","_toPrimitive$4","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","_assertThisInitialized","ReferenceError","_inherits","create","_setPrototypeOf","_wrapNativeSuper","Map","_isNativeFunction","set","_objectSpread","Wrapper","p","Boolean","valueOf","Function","setPrototypeOf","__proto__","getPrototypeOf","ParseError","code","EXTN_PATTERN","extractExtension","start","numberWithoutExtension","matches","DIGITS","2","3","4","5","6","8","9","０","１","２","３","５","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","_unsupportedIterableToArray$2","_arrayLikeToArray$2","parseIncompletePhoneNumber","string","result","_createForOfIteratorHelperLoose$1","parsePhoneNumberCharacter","character","prevParsedCharacters","emitEvent","parseDigit","_unsupportedIterableToArray$1","_arrayLikeToArray$1","getCountryByNationalNumber","nationalPhoneNumber","getCountryByCallingCode","defaultCountry","USE_NON_GEOGRAPHIC_COUNTRY_CODE","PLUS_SIGN","RFC3966_VISUAL_SEPARATOR_","RFC3966_PHONE_DIGIT_","RFC3966_GLOBAL_NUMBER_DIGITS_","RFC3966_TOPLABEL_","VALID_ALPHA_","RFC3966_DOMAINNAME_","RFC3966_DOMAINLABEL_","RFC3966_ISDN_SUBADDRESS_","extractPhoneContext","numberToExtractFrom","indexOfPhoneContext","RFC3966_PHONE_CONTEXT_","phoneContextStart","substring","phoneContextEnd","isPhoneContextValid","phoneContext","RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_","RFC3966_DOMAINNAME_PATTERN_","extractFormattedPhoneNumberFromPossibleRfc3966NumberUri","numberToParse","extractFormattedPhoneNumber","phoneNumberString","charAt","indexOfNationalNumber","indexOfRfc3966Prefix","RFC3966_PREFIX_","indexOfIsdn","MAX_INPUT_STRING_LENGTH","parse","_parseInput","parseInput","extract","formattedPhoneNumber","error","_parsePhoneNumber","parsePhoneNumber$1","defaultCallingCode","hasSelectedNumberingPlan","__countryCallingCodeSource","extended","valid","_extractFormattedPhoneNumber","throwOnError","startsAt","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","withExtensionStripped","exactCountry","_typeof$3","ownKeys$3","_objectSpread$3","_defineProperty$3","_toPropertyKey$3","_toPrimitive$3","parsePhoneNumberWithError","_typeof$2","ownKeys$2","_objectSpread$2","_defineProperty$2","_toPropertyKey$2","_toPrimitive$2","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","l","f","u","normalizeArguments","_Array$prototype$slic2","arg_4","arg_1","arg_2","arg_3","_typeof$1","ownKeys$1","_objectSpread$1","_defineProperty$1","_toPropertyKey$1","_toPrimitive$1","ownKeys","isValidPhoneNumber$1","_normalizeArguments","isValid","isValidPhoneNumber","withMetadataArgument","getDefaultExportFromCjs","x","__esModule","addValidator","$","window","jQuery","validator","addMethod","phone_number","let","hidden","closest","find","first","val","optional","document","readyState","addEventListener","hasRequiredIntlTelInput","intlTelInput$1","requireIntlTelInput","module","factory","c","__defProp","__getOwnPropDesc","__getOwnPropNames","getOwnPropertyNames","__hasOwnProp","__copyProps","to","except","desc","get","intl_tel_input_exports","allCountries","target","all","Iti","default","intl_tel_input_default","iso2","dialCode","priority","areaCodes","nodeById","isNarrowViewport","data_default","interface_default","selectedCountryAriaLabel","noCountrySelected","countryListAriaLabel","searchPlaceholder","clearSearchAriaLabel","zeroSearchResults","oneSearchResult","ac","xk","en_default","ad","ae","af","ag","ai","al","am","ao","ar","as","at","au","aw","ax","az","ba","bb","bd","be","bf","bg","bh","bi","bj","bl","bm","bn","bo","bq","br","bs","bt","bw","by","bz","ca","cd","cf","cg","ch","ci","ck","cl","cm","cn","co","cr","cu","cv","cw","cx","cz","de","dj","dm","do","dz","ec","ee","eg","eh","er","es","et","fi","fj","fk","fm","fo","fr","ga","gb","gd","ge","gf","gg","gh","gi","gl","gm","gn","gp","gq","gr","gt","gu","gw","gy","hk","hn","hr","ht","hu","id","ie","il","im","in","io","iq","ir","is","it","je","jm","jo","jp","ke","kg","kh","ki","km","kn","kp","kr","kw","ky","kz","la","lb","lc","li","lk","lr","ls","lt","lu","lv","ly","ma","mc","md","me","mf","mg","mh","mk","ml","mn","mo","mp","mr","ms","mt","mu","mv","mw","mx","my","mz","nc","nf","ng","ni","nl","no","np","nr","nu","nz","om","pe","pf","pg","ph","pk","pl","pm","pr","ps","pt","pw","py","qa","re","ro","rs","ru","rw","sa","sb","sc","sd","se","sg","sh","si","sj","sk","sl","sm","sn","so","sr","ss","st","sv","sx","sy","sz","tc","td","tg","th","tj","tk","tl","tn","tr","tt","tw","tz","ua","ug","us","uy","uz","va","vc","ve","vg","vi","vn","vu","wf","ws","ye","yt","zm","zw","mq","q","matchMedia","defaults","allowPhonewords","allowDropdown","autoPlaceholder","containerClass","countryOrder","countrySearch","dropdownContainer","excludeCountries","fixDropdownWidth","formatAsYouType","formatOnDisplay","geoIpLookup","hiddenInput","i18n","initialCountry","loadUtils","nationalMode","onlyCountries","placeholderNumberType","showFlags","separateDialCode","strictMode","useFullscreenPopup","navigator","isMobileUserAgent","userAgent","isCoarsePointer","isShortViewport","validationNumberTypes","getNumeric","s","normaliseString","normalize","toLowerCase","createEl","tagName","attrs","container","el","createElement","entries","setAttribute","appendChild","regionlessNanpNumbers","isRegionlessNanp","numeric","areaCode","includes","mod","iso2Set","Set","isIso2","has","forEachInstance","method","instances","intlTelInput","values","instance","_Iti","_buildClassNames","flags","k","customOptions","telInput","highlightedItem","assign","hadInitialPlaceholder","getAttribute","_detectEnvironmentAndLayout","isAndroid","isRTL","dir","showOnDefaultSide","showSelectedCountryOnLeft","originalPaddingRight","style","paddingRight","originalPaddingLeft","paddingLeft","_createInitPromises","autoCountryPromise","Promise","resolve","reject","resolveAutoCountryPromise","rejectAutoCountryPromise","utilsScriptPromise","resolveUtilsScriptPromise","rejectUtilsScriptPromise","promise","body","selectedCountryData","_processCountryData","_generateMarkup","_setInitialState","_initListeners","_initRequests","lowerCaseOnlyCountries","lowerCaseExcludeCountries","dialRes","dialCodes","dialCodeMaxLen","dialCodeToIso2Map","_addToDialCodeMap","iso2List","add","rootIso2Code","partialAreaCode","partialDialCode","aIndex","bIndex","aIndexExists","bIndexExists","localeCompare","countryByIso2","normalisedName","initials","word","dialCodePlus","_prepareTelInput","wrapper","_createWrapperAndInsert","_maybeBuildCountryContainer","_maybeUpdateInputPaddingAndReveal","_maybeBuildHiddenInputs","classList","hasAttribute","form","parentClasses","iti","iti--allow-dropdown","iti--show-flags","iti--inline-dropdown","class","parentNode","insertBefore","countryContainer","left","right","selectedCountry","aria-expanded","aria-label","aria-haspopup","aria-controls","disabled","selectedCountryPrimary","selectedCountryInner","dropdownArrow","aria-hidden","selectedDialCode","_buildDropdownContent","dropdownContent","role","aria-modal","_buildSearchUI","countryList","_appendListItems","_updateSearchResultsA11yText","dropdownClasses","iti--container","iti--fullscreen-popup","dropdown","searchWrapper","maskId","searchIcon","innerHTML","searchInput","placeholder","aria-autocomplete","autocomplete","searchClearButton","tabindex","searchResultsA11yText","searchNoResults","textContent","_updateInputPadding","remove","existingInput","names","querySelector","hiddenInputCountry","extraClass","listItem","data-dial-code","data-country-code","aria-selected","content","insertAdjacentHTML","overrideAutoCountry","attributeValue","inputValue","_getDialCode","isRegionlessNanpNumber","isAutoCountry","_updateCountryFromNumber","lowerInitialCountry","_setCountry","_updateValFromNumber","_initTelInputListeners","_initDropdownListeners","_initHiddenInputListener","_handleHiddenInputSubmit","getNumber","getSelectedCountryData","_handleLabelClick","contains","focus","preventDefault","label","_handleClickSelectedCountry","dropdownClosed","readOnly","_openDropdown","_handleCountryContainerKeydown","stopPropagation","_closeDropdown","utils","_doAttachUtils","attachUtils","catch","documentReady","_handlePageLoad","_loadAutoCountry","autoCountry","handleAutoCountry","startedLoadingAutoCountry","iso2Lower","setTimeout","_openDropdownWithPlus","_filterCountries","_bindInputListener","_maybeBindKeydownListener","_maybeBindPasteListener","userOverrideFormatting","_handleInputEvent","data","currentCaretPos","selectionStart","valueBeforeCaret","valueAfterCaret","_triggerCountryChange","isFormattingChar","isPaste","inputType","isSetNumber","detail","relevantCharsBeforeCaret","isDeleteForwards","formattedValue","fullNumber","telInputValue","formatNumberAsYouType","_getFullNumber","newCaretPos","relevantChars","prevCaretPos","relevantCharCount","setSelectionRange","_handleKeydownEvent","isInitialPlus","isAllowedChar","hasExceededMaxLength","newCountry","altKey","ctrlKey","metaKey","isNumeric","newValue","selectionEnd","newFullNumber","coreNumber","getCoreNumber","maxCoreNumberLength","_getNewCountryFromNumber","_handlePasteEvent","selStart","selEnd","before","after","pasted","clipboardData","getData","initialCharSelected","allowLeadingPlus","startsWith","allowedChars","hasLeadingPlus","numerics","sanitised","newVal","trimLength","caretPos","dispatchEvent","InputEvent","bubbles","_cap","max","parseInt","_trigger","detailProps","CustomEvent","cancelable","width","offsetWidth","_setDropdownPosition","firstCountryItem","firstElementChild","_highlightListItem","scrollTop","_bindDropdownListeners","inputPosRelativeToVP","inputHeight","getBoundingClientRect","offsetHeight","top","_handleWindowScroll","_handleMouseoverCountryList","_handleClickCountryList","_selectListItem","_handleClickOffToClose","documentElement","query","queryTimer","_handleKeydownOnDropdown","_handleUpDownKey","_handleEnterKey","clearTimeout","_searchForCountry","doFilter","inputQuery","keyupTimer","_handleSearchChange","_handleSearchClear","_scrollTo","matchedCountries","noCountriesAddedYet","_getMatchedCountries","normalisedQuery","iso2Matches","nameStartWith","nameContains","dialCodeMatches","dialCodeContains","initialsMatches","count","childElementCount","searchText","searchResultsText","multipleSearchResults","previousElementSibling","nextElementSibling","lastElementChild","NATIONAL","INTERNATIONAL","useNational","numberFormat","_beforeSetNumber","_ensureHasDialCode","plusIndex","selectedIso2","dialCodeMatch","dialCodeMatchNumeric","iso2Codes","hasAreaCodesButNoneMatched","shouldFocus","prevItem","activeDescendant","prevIso2","flagClass","ariaLabel","title","className","_updatePlaceholder","_updateMaxLength","inputPadding","saneDefaultWidth","_getHiddenSelectedCountryWidth","numberType","exampleNumber","getExampleNumber","validNumber","containerClone","cloneNode","countryContainerClone","visibility","selectedCountryClone","removeChild","customPlaceholder","shouldSetPlaceholder","countryChanged","_updateDialCode","removeAttribute","removeEventListener","containerHeight","containerTop","containerBottom","elementHeight","elementTop","elementBottom","newScrollTop","newDialCodeBare","prevDialCode","inputVal","newDialCode","newNumber","includeAreaCode","numericChars","overrideVal","prefix","numericVal","setCountry","handleUtils","destroy","getExtension","getValidationError","_validateNumber","isValidNumberPrecise","_utilsIsPossibleNumber","precise","testValidity","beforeAlphaIsValid","_utilsIsValidNumber","alphaCharPosition","currentCountry","setNumber","setPlaceholderNumberType","setDisabled","exports"],"mappings":"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","file":"intl-phone-number-field.js","sourcesContent":["// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":4,\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([457]\\\\d{6})$|1\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2457]\\\\d{6})$|1\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"([267]\\\\d{6})$|1\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:48|5[0-3579]|[6-9])|7(?:20|32|8)|[89]\",\"(?:31|4)6|51|6(?:485|5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\",[5,6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"(183[12])|0\",0,0,0,[[\"(?:(?:2(?:(?:[0-26-9]\\\\d|3[0-8]|5[0135-9])\\\\d|4(?:[02-9]\\\\d|10))|3(?:(?:[0-3589]\\\\d|6[1-9]|7[0-35-9])\\\\d|4(?:[0-578]\\\\d|90))|7(?:[013-57-9]\\\\d|2[0-8])\\\\d)\\\\d\\\\d|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4])|[34]\\\\d\\\\d)|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|[58][0-24-9]|7[02-8]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"163\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365[45]|46\",\"1[28]|2|365(?:4|5[02])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:[15]|28|4[14])|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]|2[23]\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"(?:[025-7]\\\\d|44)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[024-7]\"]]]],\"BG\":[\"359\",\"00\",\"00800\\\\d{7}|[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9,12],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[02-4679]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"(?:01\\\\d|[24-689])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"0\"]]]],\"BL\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|3[3-7]|5[12]|87)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"8001\\\\d{5}|(?:[2-467]\\\\d|50)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[235]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"[1-467]\\\\d{9,10}|55[0-46-9]\\\\d{8}|[34]\\\\d{7}|55\\\\d{7,8}|(?:5[0-46-9]|[89]\\\\d)\\\\d{7,9}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37|86)\",\"300|4(?:0(?:0|20)|370|864)\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([3-8]\\\\d{6})$|1\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[178]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-6]|7[246]|8[2-4]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|[78]\"]]]],\"BW\":[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[7,10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|5[07]|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|[26]8|3[178]|50|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|7[39])|9(?:0[25]|42))[2-9]\\\\d{6}\",[10]],[\"\",[10]],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\",[10]],[\"900[2-9]\\\\d{6}\",[10]],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:2[125-9]|33|44|66|77|88)|6(?:22|33))[2-9]\\\\d{6}\",[10]],0,[\"310\\\\d{4}\",[7]],0,[\"600[2-9]\\\\d{6}\",[10]]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|[58][0-24-9]|7[02-8]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CD\":[\"243\",\"00\",\"(?:(?:[189]|5\\\\d)\\\\d|2)\\\\d{7}|[1-68]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"5\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"60|809\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[1-36]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9(?:10|[2-9])\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-8]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"[26]\\\\d{8}|88\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]|88\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\",\"(?:(?:1[03-689]|2\\\\d)\\\\d\\\\d|6)\\\\d{8}|1\\\\d{10}|[126]\\\\d{6}(?:\\\\d(?:\\\\d{2})?)?|86\\\\d{5,6}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{5,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]|3(?:[157]|35|49|9[1-68])|4(?:1[124-9]|2[179]|6[47-9]|7|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:07|1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3|4[13]|5[1-5]|7[0-79]|9[0-35-9])|(?:4[35]|59|85)[1-9]\",\"(?:10|2[0-57-9])(?:1[02]|9[56])|8078|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))1\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|80781|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))12\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|807812|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))123\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:078|1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))123\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"(1(?:[12]\\\\d|79)\\\\d\\\\d)|0\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:46|60\\\\d\\\\d)\\\\d{6}|(?:1\\\\d|[39])\\\\d{9}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"46\"]],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"6|90\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3[0-357]|9[14]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"(?:[2-7]|8\\\\d\\\\d)\\\\d{7}|[2-47]\\\\d{6}|[34]\\\\d{5}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[56]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|[58][0-24-9]|7[02-8]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[015]\\\\d|2[13]|31|[46][1-8])\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[03568]\",\"15(?:[0568]|3[13])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{8})\",\"$1 $2\",[\"1\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"[5-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-579]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-579]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{5})\",\"$1\",[\"20[2-59]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"(?:[1-3]0|[68])0|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[14]|2[09]|50|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"(?:19|[2568])[1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]]],\"FO\":[\"298\",\"00\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"]],0,0,\"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\",\"$1\"],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,\"0|180020\",0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0-35])|4(?:(?:[0-5]\\\\d|70)\\\\d|69[7-9])|(?:(?:5[0-26-9]|[78][0-49])\\\\d|6(?:[0-4]\\\\d|50))\\\\d)|(?:2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d|1(?:[0-7]\\\\d|8[0-3]))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d)\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"(?:[56]94\\\\d|7093)\\\\d{5}|(?:80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]|9[47]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[89]\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"([25-9]\\\\d{5})$|0|180020\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d|60)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d|70)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-9]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-79]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1-9]|5[3-579]|[68][0-689]|7[08]|9\\\\d)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\",[10,11,12],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]]],\"GT\":[\"502\",\"00\",\"80\\\\d{6}|(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-8]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"(?:[2-8]\\\\d{3}|9008)\\\\d{3}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"[2-69]\\\\d{8}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{6}\",[7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6|7[245]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-57]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"[2-589]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"HU\":[\"36\",\"00\",\"[235-7]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[89]\",\"00[1-9]\\\\d{9,14}|(?:[1-36]|8\\\\d{5})\\\\d{6}|00\\\\d{9}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([25-8]\\\\d{5})$|0|180020\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,11}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|(?:43|55|70)\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\",[6,7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1(?:44|[679])|[378]|43\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]|14\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[03]\"]]],0,0,0,0,0,0,[[\"0(?:669[0-79]\\\\d{1,6}|831\\\\d{2,8})|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[2356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[2-9]\\\\d{7,8}|(?:31|43)\\\\d{8}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],[\"3[2-8]\\\\d{9,10}\",[11,12]],0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([0-24-8]\\\\d{5})$|0|180020\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97\\\\d))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[25-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51)|9(?:80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"3|4(?:2[09]|7[01])|6[1-9]\",\"3|4(?:2(?:0|9[02-69])|7(?:0[019]|1))|6[1-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[0459]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[26-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9]|9[29])|5(?:2|3(?:[045]|9[0-8])|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|3(?:[29]|60)|49|51|6(?:[0-24]|36|5[0-3589]|7[23]|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3(?:[045]|9(?:[0-58]|6[4-9]|7[0-35689]))|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|60|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[2-57-9]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|7(?:2[2-468]|3[78])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[25-9]\"],\"0$1\"]],\"0\",0,\"(000[2569]\\\\d{4,6})$|(?:(?:003768)0?)|0\",\"$1\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|[235-9]\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]0|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\"KW\":[\"965\",\"00\",\"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[245]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\",[10,14],0,\"8\",0,0,0,0,\"33622|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[27-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-6]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-8]\\\\d{6})$|1\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2379]|8(?:0[09]|7)\",\"[2379]|8(?:0(?:02|9)|7)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"(1001)|0\"],\"LK\":[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:[2457]\\\\d|33|88)\\\\d{7}|(?:2\\\\d|[4-6])\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4[67]|[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(0-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(0-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(0-$1)\",1]],\"0\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|78|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2679]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-46-9]|3[3-9]|9)|8(?:0[89]|92)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:2(?:[0-25-79]\\\\d|3[1-578]|4[02-46-8]|8[0235-7])|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|8[014-9]|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[0167]\\\\d|2[0-8]|5[0-5]|8[0-7]))\\\\d{6}\"],[\"80[0-7]\\\\d{6}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"(?:592(?:4[0-2]|93)|80[89]\\\\d\\\\d)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"(?:[3489]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[389]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|3[03-7]|5[0-268]|87)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"([24-9]\\\\d{6})$|0\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2|34[47]|4(?:[37]7|5[47]|64)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"4(?:[2-46]|5[3-5])|5|6(?:[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-5]|(?:60|86)[23]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|452|678|86\",\"[12]|452|6788|86\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[5-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"(?:596\\\\d|7091)\\\\d{5}|(?:69|[89]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-79]|8(?:0[6-9]|[36])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\",[10],0,\"1\",0,\"([34]\\\\d{6})$|1\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[57]|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57]\"]],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[34679]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"(?:[1289]\\\\d|31|77)\\\\d{7}|1\\\\d{6}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"]]],0,0,0,0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9]|53)|8\",\"1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1(?:[367]|80)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[02-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[027-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[0467]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:20|9\\\\d)\\\\d{8}|[78]\\\\d{9,13}\",[10,11,12,13,14],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"20[129]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\",[5,6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-578]|91\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-59]|[67][2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:222|444|(?:55|8\\\\d)\\\\d|666|777|999)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-9]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[4-7]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[1289]\\\\d{9}|50\\\\d{5}(?:\\\\d{2,3})?|[27-9]\\\\d{7,8}|(?:[34]\\\\d|6[0-35-9])\\\\d{6}|8\\\\d{4,6}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"8[1-79]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|8|90\",\"50(?:[0367]|88)|8|90\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[589]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]]],\"PA\":[\"507\",\"00\",\"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\",[7,8,10,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]]],\"PE\":[\"51\",\"00|19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,\"00\",\" Anexo \"],\"PF\":[\"689\",\"00\",\"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\",[6,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4|8[7-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"(?:6|8\\\\d\\\\d)\\\\d{7}|[1-9]\\\\d{6}(?:\\\\d{2})?|[26]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|20|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}|(?:708|8\\\\d\\\\d)\\\\d{6}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"16|[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-7])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\"],\"QA\":[\"974\",\"00\",\"800\\\\d{4}|(?:2|800)\\\\d{6}|(?:0080|[3-7])\\\\d{7}\",[7,8,9,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[136]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[3-7]\"]]]],\"RE\":[\"262\",\"00\",\"709\\\\d{6}|(?:26|[689]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[26-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"26(?:2\\\\d\\\\d|3(?:0\\\\d|1[0-6]))\\\\d{4}\"],[\"(?:69(?:2\\\\d\\\\d|3(?:[06][0-6]|1[0-3]|2[0-2]|3[0-39]|4\\\\d|5[0-5]|7[0-37]|8[0-8]|9[0-479]))|7092[0-3])\\\\d{4}\"],[\"80\\\\d{7}\"],[\"89[1-37-9]\\\\d{6}\"],0,0,0,0,[\"9(?:399[0-3]|479[0-6]|76(?:2[278]|3[0-37]))\\\\d{4}\"],[\"8(?:1[019]|2[0156]|84|90)\\\\d{6}\"]]],\"RO\":[\"40\",\"00\",\"(?:[236-8]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[236-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"8\\\\d{13}|[347-9]\\\\d{9}\",[10,14],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[349]|8(?:[02-7]|1[1-8])\"],\"8 ($1)\",1],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"],\"8 ($1)\"]],\"8\",0,0,0,0,0,[[\"336(?:[013-9]\\\\d|2[013-9])\\\\d{5}|(?:3(?:0[12]|4[1-35-79]|5[1-3]|65|8[1-58]|9[0145])|4(?:01|1[1356]|2[13467]|7[1-5]|8[1-7]|9[1-689])|8(?:1[1-8]|2[01]|3[13-6]|4[0-8]|5[15-7]|6[0-35-79]|7[1-37-9]))\\\\d{7}\",[10]],[\"9\\\\d{9}\",[10]],[\"8(?:0[04]|108\\\\d{3})\\\\d{7}\"],[\"80[39]\\\\d{7}\",[10]],[\"808\\\\d{7}\",[10]]],\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"]],\"0\"],\"SA\":[\"966\",\"00\",\"(?:[15]\\\\d|800|92)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"[6-9]\\\\d{6}|[1-6]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"6[89]|7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"(?:[2489]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44|9)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-9]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[489]\\\\d|79)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[237-9]\\\\d|66)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d|93)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"(?:2|90)4|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[348]|64|79|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6[0-35-9]|7[67]|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|[6-8]\\\\d|90)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-9]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|(?:80\\\\d|900)\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"(5\\\\d{6})$|1\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-359]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-4]|5[1-3]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[59]\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-479]\\\\d{6})$|1\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|30|[689]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[236-9]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\",[8,9,10,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"[0-57-9]\\\\d{8}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"44[02-479]|[34]7\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[1245]|3[12])\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0-57-9]\"]]],0,0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"(?:[1-6]\\\\d|71)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[67]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]]],\"TR\":[\"90\",\"00\",\"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12,13],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|61[06])\",\"5(?:[0-59]|61[06]1)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-46-8]\\\\d{6})$|1\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[25-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])\",\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|89|9[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"310\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:3052(?:0[0-8]|[1-9]\\\\d)|5056(?:[0-35-9]\\\\d|4[0-68]))\\\\d{4}|(?:2742|305[3-9]|(?:472|983)[2-47-9]|505[2-57-9])\\\\d{6}|(?:2(?:0[1-35-9]|1[02-9]|2[03-57-9]|3[1459]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-47-9]|1[02-9]|2[0135-79]|3[0-24679]|4[167]|5[0-2]|6[01349]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[179]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|3[016]|4[0156]|5[01679]|6[0-279]|78|8[0-269])|7(?:0[1-46-8]|1[2-9]|2[04-8]|3[0-247]|4[0378]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[0168]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-3589]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,0,[\"305209\\\\d{4}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"0004\\\\d{2,9}|[1249]\\\\d{7}|2\\\\d{3,4}|(?:[49]\\\\d|80)\\\\d{5}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d{4,5})\",\"$1\",[\"21\"]],[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[49]0|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[124]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3 $4\",[\"0\"]]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"00\",\"(?:20|33|[5-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-9]\"]]]],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11,12],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-578]\\\\d{6})$|1\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[357-9]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]]]],\"WF\":[\"681\",\"00\",\"(?:40|72|8\\\\d{4})\\\\d{4}|[89]\\\\d{5}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[47-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"2\\\\d{7,8}|3\\\\d{7,11}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2|39\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7,10})\",\"$1 $2\",[\"3\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7(?:[24-6]|8[0-7])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"7093\\\\d{5}|(?:80|9\\\\d)\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"269(?:0[0-467]|15|5[0-4]|6\\\\d|[78]0)\\\\d{4}\"],[\"(?:639(?:0[0-79]|1[019]|[267]\\\\d|3[09]|40|5[05-9]|9[04-79])|7093[5-7])\\\\d{4}\"],[\"80\\\\d{7}\"],0,0,0,0,0,[\"9(?:(?:39|47)8[01]|769\\\\d)\\\\d{4}\"]]],\"ZA\":[\"27\",\"00\",\"[1-79]\\\\d{8}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|[579]\\\\d|63)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[579]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"]},\"nonGeographic\":{\"800\":[\"800\",0,\"(?:00|[1-9]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"\\\\d\"]]],0,0,0,0,0,0,[0,0,[\"(?:00|[1-9]\\\\d)\\\\d{6}\"]]],\"808\":[\"808\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\d{7}\"]]],\"870\":[\"870\",0,\"7\\\\d{11}|[235-7]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"],0,0,0,0,0,0,[\"2\\\\d{8}\",[9]]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"6\\\\d{9}|[0-36-9]\\\\d{8}\",[9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[0-37-9]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{5,6})\",\"$1 $2 $3\",[\"6\"]]],0,0,0,0,0,0,[0,[\"6\\\\d{9}|[0-36-9]\\\\d{8}\"]]],\"882\":[\"882\",0,\"[13]\\\\d{6}(?:\\\\d{2,5})?|[19]\\\\d{7}|(?:[25]\\\\d\\\\d|4)\\\\d{7}(?:\\\\d{2})?\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"49\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"1[36]|9\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"16\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|23|3(?:[15]|4[57])|4|51\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[1-35]\"]]],0,0,0,0,0,0,[0,[\"342\\\\d{4}|(?:337|49)\\\\d{6}|(?:3(?:2|47|7\\\\d{3})|50\\\\d{3})\\\\d{7}\",[7,8,9,10,12]],0,0,0,[\"348[57]\\\\d{7}\",[11]],0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:345\\\\d|9[89])\\\\d{6}|(?:10|2(?:3|85\\\\d)|3(?:[15]|[69]\\\\d\\\\d)|4[15-8]|51)\\\\d{8}\"]]],\"883\":[\"883\",0,\"(?:[1-4]\\\\d|51)\\\\d{6,10}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,8})\",\"$1 $2 $3\",[\"[14]|2[24-689]|3[02-689]|51[24-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"21\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"51[13]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[235]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"(?:2(?:00\\\\d\\\\d|10)|(?:370[1-9]|51\\\\d0)\\\\d)\\\\d{7}|51(?:00\\\\d{5}|[24-9]0\\\\d{4,7})|(?:1[0-79]|2[24-689]|3[02-689]|4[0-4])0\\\\d{5,9}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"[1359]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\d{8}\"]]]}}","// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../../metadata.min.json.js'\r\n\r\nexport default function withMetadataArgument(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}\n//# sourceMappingURL=semver-compare.js.map","var objectConstructor = {}.constructor;\nexport default function isObject(object) {\n  return object !== undefined && object !== null && object.constructor === objectConstructor;\n}\n//# sourceMappingURL=isObject.js.map","function _readOnlyError(r) { throw new TypeError('\"' + r + '\" is read-only'); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport compare from './tools/semver-compare.js';\nimport isObject from './helpers/isObject.js';\n\n// Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\nvar V2 = '1.0.18';\n\n// Added \"idd_prefix\" and \"default_idd_prefix\".\nvar V3 = '1.2.0';\n\n// Moved `001` country code to \"nonGeographic\" section of metadata.\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n  return _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return;\n      // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n      // The test case could be found by searching for \"nonGeographical\".\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    }\n\n    // Deprecated.\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        // In that metadata, there was no concept of \"non-geographic\" metadata\n        // so metadata for `001` country code was stored along with other countries.\n        // The test case can be found by searching for:\n        // \"should work around `nonGeographic` metadata not existing\".\n        var countryCodes = this.countryCallingCodes()[callingCode];\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    }\n\n    // Deprecated.\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    }\n\n    // Deprecated.\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    }\n\n    // Deprecated.\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    }\n\n    // Deprecated.\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    }\n\n    // Deprecated.\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    }\n\n    // Deprecated.\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    }\n\n    // Deprecated.\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    }\n\n    // Deprecated.\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    }\n\n    // Deprecated.\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    }\n\n    // Deprecated.\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    }\n\n    // Deprecated.\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    }\n\n    // Deprecated.\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    }\n\n    // Deprecated.\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n}();\nexport { Metadata as default };\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n  return _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    }\n\n    // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    }\n\n    // Is always present.\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    }\n\n    // Is only present when a country supports multiple IDD prefixes.\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    }\n\n    // \"possible length\" data is always present in Google's metadata.\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    }\n\n    // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    }\n\n    // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    }\n\n    // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      }\n      // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n}();\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n    this._format = format;\n    this.metadata = metadata;\n  }\n  return _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n\n    // Checks whether national prefix formatting rule contains national prefix.\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() &&\n      // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule())\n      // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n    this.type = type;\n    this.metadata = metadata;\n  }\n  return _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n}();\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n    case 'MOBILE':\n      return types[1];\n    case 'TOLL_FREE':\n      return types[2];\n    case 'PREMIUM_RATE':\n      return types[3];\n    case 'PERSONAL_NUMBER':\n      return types[4];\n    case 'VOICEMAIL':\n      return types[5];\n    case 'UAN':\n      return types[6];\n    case 'PAGER':\n      return types[7];\n    case 'VOIP':\n      return types[8];\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  }\n\n  // `country_phone_code_to_countries` was renamed to `country_calling_codes` in `1.0.18`.\n  // For that reason, it's not used in this detection algorithm.\n  // Instead, it detects by `countries: {}` property existence.\n  if (!isObject(metadata) || !isObject(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(isObject(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + typeOf(metadata) + ': ' + metadata, \".\"));\n  }\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar typeOf = function typeOf(_) {\n  return _typeof(_);\n};\n\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n  return DEFAULT_EXT_PREFIX;\n}\n\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries.hasOwnProperty(country);\n}\nfunction setVersion(metadata) {\n  var version = metadata.version;\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n}\n\n// const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n//# sourceMappingURL=metadata.js.map","function _createForOfIteratorHelperLoose(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (t) return (t = t.call(r)).next.bind(t); if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var o = 0; return function () { return o >= r.length ? { done: !0 } : { done: !1, value: r[o++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport default function mergeArrays(a, b) {\n  var merged = a.slice();\n  for (var _iterator = _createForOfIteratorHelperLoose(b), _step; !(_step = _iterator()).done;) {\n    var element = _step.value;\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n  return merged.sort(function (a, b) {\n    return a - b;\n  });\n\n  // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=mergeArrays.js.map","import mergeArrays from './mergeArrays.js';\nexport default function checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n}\n\n// Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type);\n\n  // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths();\n  // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n    var mobile_type = metadata.type('MOBILE');\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths());\n      // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  }\n  // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n    return 'INVALID_LENGTH';\n  }\n  var actual_length = nationalNumber.length;\n\n  // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  }\n\n  // We skip the first element since we've already checked it.\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=checkNumberLength.js.map","import Metadata from './metadata.js';\nimport checkNumberLength from './helpers/checkNumberLength.js';\n\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * isPossible(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n  metadata = new Metadata(metadata);\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  }\n\n  // Old metadata (< 1.0.18) had no \"possible length\" data.\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n    default:\n      return false;\n  }\n}\n//# sourceMappingURL=isPossible.js.map","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport default function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n//# sourceMappingURL=matchesEntirely.js.map","function _createForOfIteratorHelperLoose(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (t) return (t = t.call(r)).next.bind(t); if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var o = 0; return function () { return o >= r.length ? { done: !0 } : { done: !1, value: r[o++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nimport Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL'];\n\n// Finds out national phone number type (fixed line, mobile, etc)\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n\n  // When `parse()` returns an empty object — `{}` —\n  // that means that the phone number is malformed,\n  // so it can't possibly be valid.\n  if (!input.country && !input.countryCallingCode) {\n    return;\n  }\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\n  // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n\n  // Is this national number even valid for this country\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  }\n\n  // Is it fixed line number\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    // `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\n    // For example, for \"US\" country.\n    // Old metadata (< `1.0.18`) had a specific \"types\" data structure\n    // that happened to be `undefined` for `MOBILE` in that case.\n    // Newer metadata (>= `1.0.18`) has another data structure that is\n    // not `undefined` for `MOBILE` in that case (it's just an empty array).\n    // So this `if` is just for backwards compatibility with old metadata.\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n    /* istanbul ignore if */\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n    return 'FIXED_LINE';\n  }\n  for (var _iterator = _createForOfIteratorHelperLoose(NON_FIXED_LINE_PHONE_TYPES), _step; !(_step = _iterator()).done;) {\n    var type = _step.value;\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n  if (!type || !type.pattern()) {\n    return false;\n  }\n  // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n  return matchesEntirely(nationalNumber, type.pattern());\n}\n//# sourceMappingURL=getNumberType.js.map","import Metadata from './metadata.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport getNumberType from './helpers/getNumberType.js';\n\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * isValid(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n\n  // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  }\n\n  // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(nationalNumber, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=isValid.js.map","import Metadata from '../metadata.js';\n\n/**\r\n * Returns a list of countries that the phone number could potentially belong to.\r\n * @param  {string} callingCode — Calling code.\r\n * @param  {string} nationalNumber — National (significant) number.\r\n * @param  {object} metadata — Metadata.\r\n * @return {string[]} A list of possible countries.\r\n */\nexport default function getPossibleCountriesForNumber(callingCode, nationalNumber, metadata) {\n  var _metadata = new Metadata(metadata);\n  var possibleCountries = _metadata.getCountryCodesForCallingCode(callingCode);\n  if (!possibleCountries) {\n    return [];\n  }\n  return possibleCountries.filter(function (country) {\n    return couldNationalNumberBelongToCountry(nationalNumber, country, metadata);\n  });\n}\nfunction couldNationalNumberBelongToCountry(nationalNumber, country, metadata) {\n  var _metadata = new Metadata(metadata);\n  _metadata.selectNumberingPlan(country);\n  if (_metadata.numberingPlan.possibleLengths().indexOf(nationalNumber.length) >= 0) {\n    return true;\n  }\n  return false;\n}\n//# sourceMappingURL=getPossibleCountriesForNumber.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2;\n\n// The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\nexport var MAX_LENGTH_FOR_NSN = 17;\n\n// The maximum length of the country calling code.\nexport var MAX_LENGTH_COUNTRY_CODE = 3;\n\n// Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\";\n\n// `DASHES` will be right after the opening square bracket of the \"character class\"\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\";\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\";\n\n// Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\";\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","import Metadata from '../metadata.js';\nimport { VALID_DIGITS } from '../constants.js';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  }\n  // Check if the number is IDD-prefixed.\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  }\n  // Strip IDD prefix.\n  number = number.slice(number.match(IDDPrefixPattern)[0].length);\n  // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n  return number;\n}\n//# sourceMappingURL=stripIddPrefix.js.map","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode;\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule());\n        // If there's more than one captured group,\n        // then carrier code is the second one.\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      }\n      // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n        // `prefixBeforeNationalNumber` is the whole substring matched by\n        // the `national_prefix_for_parsing` regular expression.\n        // There seem to be no guarantees that it's just a national prefix.\n        // For example, if there's a carrier code, it's gonna be a\n        // part of `prefixBeforeNationalNumber` too.\n        var prefixBeforeNationalNumber = prefixMatch[0];\n        nationalNumber = number.slice(prefixBeforeNationalNumber.length);\n        // If there's at least one captured group,\n        // then carrier code is the first one.\n        if (hasCapturedGroups) {\n          carrierCode = prefixMatch[1];\n        }\n      }\n      // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n      var nationalPrefix;\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup);\n        // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n  return {\n    nationalNumber: number\n  };\n}\n//# sourceMappingURL=extractNationalNumberFromPossiblyIncompleteNumber.js.map","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport checkNumberLength from './checkNumberLength.js';\n\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\nexport default function extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata),\n    carrierCode = _extractNationalNumbe.carrierCode,\n    nationalNumber = _extractNationalNumbe.nationalNumber;\n  if (nationalNumber !== number) {\n    if (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\n      // Don't strip the national prefix.\n      return {\n        nationalNumber: number\n      };\n    }\n    // Check the national (significant) number length after extracting national prefix and carrier code.\n    // Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\n    if (metadata.possibleLengths()) {\n      // The number remaining after stripping the national prefix and carrier code\n      // should be long enough to have a possible length for the country.\n      // Otherwise, don't strip the national prefix and carrier code,\n      // since the original number could be a valid number.\n      // This check has been copy-pasted \"as is\" from Google's original library:\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      // It doesn't check for the \"possibility\" of the original `number`.\n      // I guess it's fine not checking that one. It works as is anyway.\n      if (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\n        // Don't strip the national prefix.\n        return {\n          nationalNumber: number\n        };\n      }\n    }\n  }\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n\n// In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) && !matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\n    return false;\n  }\n  // This \"is possible\" national number (length) check has been commented out\n  // because it's superceded by the (effectively) same check done in the\n  // `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\n  // In other words, why run the same check twice if it could only be run once.\n  // // Check the national (significant) number length after extracting national prefix and carrier code.\n  // // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\n  // // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\n  // if (metadata.possibleLengths()) {\n  // \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\n  // \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\n  // \t\treturn false\n  // \t}\n  // }\n  return true;\n}\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'TOO_SHORT':\n    case 'INVALID_LENGTH':\n      // This library ignores \"local-only\" phone numbers (for simplicity).\n      // See the readme for more info on what are \"local-only\" phone numbers.\n      // case 'IS_POSSIBLE_LOCAL_ONLY':\n      return false;\n    default:\n      return true;\n  }\n}\n//# sourceMappingURL=extractNationalNumber.js.map","import Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport extractNationalNumber from './extractNationalNumber.js';\nimport checkNumberLength from './checkNumberLength.js';\nimport getCountryCallingCode from '../getCountryCallingCode.js';\n\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata),\n      possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n    var _extractNationalNumbe2 = extractNationalNumber(number, metadata),\n      nationalNumber = _extractNationalNumbe2.nationalNumber;\n    // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n  return {\n    number: number\n  };\n}\n//# sourceMappingURL=extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js.map","import stripIddPrefix from './stripIddPrefix.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport Metadata from '../metadata.js';\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js';\n\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCodeSource: string?, countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\nexport default function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  }\n  var isNumberWithIddPrefix;\n\n  // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata);\n    // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      isNumberWithIddPrefix = true;\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          shorterNumber = _extractCountryCallin.number;\n        if (countryCallingCode) {\n          return {\n            countryCallingCodeSource: 'FROM_NUMBER_WITHOUT_PLUS_SIGN',\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n      return {\n        // No need to set it to `UNSPECIFIED`. It can be just `undefined`.\n        // countryCallingCodeSource: 'UNSPECIFIED',\n        number: number\n      };\n    }\n  }\n\n  // Fast abortion: country codes do not begin with a '0'\n  if (number[1] === '0') {\n    return {};\n  }\n  metadata = new Metadata(metadata);\n\n  // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n  var i = 2;\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCodeSource: isNumberWithIddPrefix ? 'FROM_NUMBER_WITH_IDD' : 'FROM_NUMBER_WITH_PLUS_SIGN',\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n    i++;\n  }\n  return {};\n}\n\n// The possible values for the returned `countryCallingCodeSource` are:\n//\n// Copy-pasted from:\n// https://github.com/google/libphonenumber/blob/master/resources/phonenumber.proto\n//\n// // The source from which the country_code is derived. This is not set in the\n// // general parsing method, but in the method that parses and keeps raw_input.\n// // New fields could be added upon request.\n// enum CountryCodeSource {\n//  // Default value returned if this is not set, because the phone number was\n//  // created using parse, not parseAndKeepRawInput. hasCountryCodeSource will\n//  // return false if this is the case.\n//  UNSPECIFIED = 0;\n//\n//  // The country_code is derived based on a phone number with a leading \"+\",\n//  // e.g. the French number \"+33 1 42 68 53 00\".\n//  FROM_NUMBER_WITH_PLUS_SIGN = 1;\n//\n//  // The country_code is derived based on a phone number with a leading IDD,\n//  // e.g. the French number \"011 33 1 42 68 53 00\", as it is dialled from US.\n//  FROM_NUMBER_WITH_IDD = 5;\n//\n//  // The country_code is derived based on a phone number without a leading\n//  // \"+\", e.g. the French number \"33 1 42 68 53 00\" when defaultCountry is\n//  // supplied as France.\n//  FROM_NUMBER_WITHOUT_PLUS_SIGN = 10;\n//\n//  // The country_code is derived NOT based on the phone number itself, but\n//  // from the defaultCountry parameter provided in the parsing function by the\n//  // clients. This happens mostly for numbers written in the national format\n//  // (without country code). For example, this would be set when parsing the\n//  // French number \"01 42 68 53 00\", when defaultCountry is supplied as\n//  // France.\n//  FROM_DEFAULT_COUNTRY = 20;\n// }\n//# sourceMappingURL=extractCountryCallingCode.js.map","import { VALID_PUNCTUATION } from '../constants.js';\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n//# sourceMappingURL=applyInternationalSeparatorStyle.js.map","import Metadata from '../metadata.js';\n\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/;\n\n// For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\nexport default function getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  if (countryMetadata.defaultIDDPrefix()) {\n    return countryMetadata.defaultIDDPrefix();\n  }\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n}\n//# sourceMappingURL=getIddPrefix.js.map","import { VALID_DIGITS } from '../../constants.js';\n\n// The RFC 3966 format for extensions.\nvar RFC3966_EXTN_PREFIX = ';ext=';\n\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(VALID_DIGITS, \"]{1,\").concat(maxLength, \"})\");\n};\n\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\nexport default function createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n  var extLimitWhenNotSure = '6';\n\n  /** @type {string} */\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\";\n  // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n  /** @type {string} */\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n  var optionalExtnSuffix = \"#?\";\n\n  // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n  /** @type {string} */\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\";\n  // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n  /** @type {string} */\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\";\n  // When extension is not separated clearly.\n  /** @type {string} */\n  var ambiguousSeparator = \"[- ]+\";\n  // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n  /** @type {string} */\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\";\n  // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n  /** @type {string} */\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n\n  /** @type {string} */\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n\n  /** @type {string} */\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n\n  // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}\n//# sourceMappingURL=createExtensionPattern.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from '../constants.js';\nimport createExtensionPattern from './extension/createExtensionPattern.js';\n\n//  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}';\n//\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\nexport var VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\n// This regular expression isn't present in Google's `libphonenumber`\n// and is only used to determine whether the phone number being input\n// is too short for it to even consider it a \"valid\" number.\n// This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\nvar VALID_PHONE_NUMBER_START_REG_EXP = new RegExp('^' + '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){1,2}' + '$', 'i');\nexport var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER +\n// Phone number extensions\n'(?:' + createExtensionPattern() + ')?';\n\n// The combined regular expression for valid phone numbers:\n//\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp(\n// Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' +\n// Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i');\n\n// Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}\n\n// This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\nexport function isViablePhoneNumberStart(number) {\n  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelperLoose(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (t) return (t = t.call(r)).next.bind(t); if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var o = 0; return function () { return o >= r.length ? { done: !0 } : { done: !1, value: r[o++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nimport isViablePhoneNumber from './isViablePhoneNumber.js';\n\n// https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nexport function parseRFC3966(text) {\n  var number;\n  var ext;\n\n  // Replace \"tel:\" with \"tel=\" for parsing convenience.\n  text = text.replace(/^tel:/, 'tel=');\n  for (var _iterator = _createForOfIteratorHelperLoose(text.split(';')), _step; !(_step = _iterator()).done;) {\n    var part = _step.value;\n    var _part$split = part.split('='),\n      _part$split2 = _slicedToArray(_part$split, 2),\n      name = _part$split2[0],\n      value = _part$split2[1];\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n      case 'ext':\n        ext = value;\n        break;\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n        break;\n    }\n  }\n\n  // If the phone number is not viable, then abort.\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n  var result = {\n    number: number\n  };\n  if (ext) {\n    result.ext = ext;\n  }\n  return result;\n}\n\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\nexport function formatRFC3966(_ref) {\n  var number = _ref.number,\n    ext = _ref.ext;\n  if (!number) {\n    return '';\n  }\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelperLoose(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (t) return (t = t.call(r)).next.bind(t); if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var o = 0; return function () { return o >= r.length ? { done: !0 } : { done: !1, value: r[o++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nimport Metadata, { getCountryCallingCode } from './metadata.js';\nimport getIddPrefix from './helpers/getIddPrefix.js';\nimport { formatRFC3966 } from './helpers/RFC3966.js';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  }\n};\n\n/**\r\n * Formats a phone number.\r\n *\r\n * format(phoneNumberInstance, 'INTERNATIONAL', { ..., v2: true }, metadata)\r\n * format(phoneNumberInstance, 'NATIONAL', { ..., v2: true }, metadata)\r\n *\r\n * format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', { ... }, metadata)\r\n * format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {string} format\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n  metadata = new Metadata(metadata);\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\n  // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n  var number;\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n    case 'IDD':\n      if (!options.fromCountry) {\n        return;\n        // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n  if (!format) {\n    return number;\n  }\n  return formatNationalNumberUsingFormat(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\nexport function chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = _createForOfIteratorHelperLoose(availableFormats), _step; !(_step = _iterator()).done;) {\n    var format = _step.value;\n    // Validate leading digits.\n    // The test case for \"else path\" could be found by searching for\n    // \"format.leadingDigitsPatterns().length === 0\".\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1];\n      // If leading digits don't match then move on to the next phone number format\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    }\n    // Check that the national number matches the phone number format regular expression\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata);\n  // When calling within the same country calling code.\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata);\n    // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    }\n    // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n    return formattedNumber;\n  }\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}\n//# sourceMappingURL=format.js.map","function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport Metadata, { validateMetadata } from './metadata.js';\nimport isPossibleNumber from './isPossible.js';\nimport isValidNumber from './isValid.js';\n// import checkNumberLength from './helpers/checkNumberLength.js'\nimport getNumberType from './helpers/getNumberType.js';\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport isObject from './helpers/isObject.js';\nimport formatNumber from './format.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nvar PhoneNumber = /*#__PURE__*/function () {\n  /**\r\n   * @param  {string} countryOrCountryCallingCode\r\n   * @param  {string} nationalNumber\r\n   * @param  {object} metadata — Metadata JSON\r\n   * @return {PhoneNumber}\r\n   */\n  function PhoneNumber(countryOrCountryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n    // Validate `countryOrCountryCallingCode` argument.\n    if (!countryOrCountryCallingCode) {\n      throw new TypeError('First argument is required');\n    }\n    if (typeof countryOrCountryCallingCode !== 'string') {\n      throw new TypeError('First argument must be a string');\n    }\n\n    // In case of public API use: `constructor(number, metadata)`.\n    // Transform the arguments from `constructor(number, metadata)` to\n    // `constructor(countryOrCountryCallingCode, nationalNumber, metadata)`.\n    if (countryOrCountryCallingCode[0] === '+' && !nationalNumber) {\n      throw new TypeError('`metadata` argument not passed');\n    }\n    if (isObject(nationalNumber) && isObject(nationalNumber.countries)) {\n      metadata = nationalNumber;\n      var e164Number = countryOrCountryCallingCode;\n      if (!E164_NUMBER_REGEXP.test(e164Number)) {\n        throw new Error('Invalid `number` argument passed: must consist of a \"+\" followed by digits');\n      }\n      var _extractCountryCallin = extractCountryCallingCode(e164Number, undefined, undefined, metadata),\n        _countryCallingCode = _extractCountryCallin.countryCallingCode,\n        number = _extractCountryCallin.number;\n      nationalNumber = number;\n      countryOrCountryCallingCode = _countryCallingCode;\n      if (!nationalNumber) {\n        throw new Error('Invalid `number` argument passed: too short');\n      }\n    }\n\n    // Validate `nationalNumber` argument.\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` argument is required');\n    }\n    if (typeof nationalNumber !== 'string') {\n      throw new TypeError('`nationalNumber` argument must be a string');\n    }\n\n    // Validate `metadata` argument.\n    validateMetadata(metadata);\n\n    // Initialize properties.\n    var _getCountryAndCountry = getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadata),\n      country = _getCountryAndCountry.country,\n      countryCallingCode = _getCountryAndCountry.countryCallingCode;\n    this.country = country;\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    // Exclude `metadata` property output from `PhoneNumber.toString()`\n    // so that it doesn't clutter the console output of Node.js.\n    // Previously, when Node.js did `console.log(new PhoneNumber(...))`,\n    // it would output the whole internal structure of the `metadata` object.\n    this.getMetadata = function () {\n      return metadata;\n    };\n  }\n  return _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"getPossibleCountries\",\n    value: function getPossibleCountries() {\n      if (this.country) {\n        return [this.country];\n      }\n      return getPossibleCountriesForNumber(this.countryCallingCode, this.nationalNumber, this.getMetadata());\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.getMetadata());\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    }\n\n    // This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,\n    // but later it was found out that it doesn't include the possible `TOO_SHORT` result\n    // returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,\n    // so eventually I simply commented out this method from the `PhoneNumber` class\n    // and just left the `validatePhoneNumberLength()` function, even though that one would require\n    // and additional step to also validate the actual country / calling code of the phone number.\n    // validateLength() {\n    // \tconst metadata = new Metadata(this.getMetadata())\n    // \tmetadata.selectNumberingPlan(this.countryCallingCode)\n    // \tconst result = checkNumberLength(this.nationalNumber, metadata)\n    // \tif (result !== 'IS_POSSIBLE') {\n    // \t\treturn result\n    // \t}\n    // }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread(_objectSpread({}, options), {}, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n}();\nexport { PhoneNumber as default };\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\nfunction getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {\n  var country;\n  var countryCallingCode;\n  var metadata = new Metadata(metadataJson);\n  // If country code is passed then derive `countryCallingCode` from it.\n  // Also store the country code as `.country`.\n  if (isCountryCode(countryOrCountryCallingCode)) {\n    country = countryOrCountryCallingCode;\n    metadata.selectNumberingPlan(country);\n    countryCallingCode = metadata.countryCallingCode();\n  } else {\n    countryCallingCode = countryOrCountryCallingCode;\n    /* istanbul ignore if */\n    if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n      if (metadata.isNonGeographicCallingCode(countryCallingCode)) {\n        country = '001';\n      }\n    }\n  }\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode\n  };\n}\nvar E164_NUMBER_REGEXP = /^\\+\\d+$/;\n//# sourceMappingURL=PhoneNumber.js.map","function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }\nfunction _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\n// https://stackoverflow.com/a/46971044/970769\n// \"Breaking changes in Typescript 2.1\"\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\nvar ParseError = /*#__PURE__*/function (_Error) {\n  function ParseError(code) {\n    var _this;\n    _classCallCheck(this, ParseError);\n    _this = _callSuper(this, ParseError, [code]);\n    // Set the prototype explicitly.\n    // Any subclass of FooError will have to manually set the prototype as well.\n    Object.setPrototypeOf(_this, ParseError.prototype);\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n  _inherits(ParseError, _Error);\n  return _createClass(ParseError);\n}(/*#__PURE__*/_wrapNativeSuper(Error));\nexport { ParseError as default };\n//# sourceMappingURL=ParseError.js.map","import createExtensionPattern from './createExtensionPattern.js';\n\n// Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\nvar EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i');\n\n// Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\nexport default function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n  if (start < 0) {\n    return {};\n  }\n  // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n    i++;\n  }\n}\n//# sourceMappingURL=extractExtension.js.map","function _createForOfIteratorHelperLoose(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (t) return (t = t.call(r)).next.bind(t); if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var o = 0; return function () { return o >= r.length ? { done: !0 } : { done: !1, value: r[o++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\nexport default function parseDigits(string) {\n  var result = '';\n  // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    var digit = parseDigit(character);\n    if (digit) {\n      result += digit;\n    }\n  }\n  return result;\n}\n//# sourceMappingURL=parseDigits.js.map","function _createForOfIteratorHelperLoose(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (t) return (t = t.call(r)).next.bind(t); if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var o = 0; return function () { return o >= r.length ? { done: !0 } : { done: !1, value: r[o++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nimport { parseDigit } from './helpers/parseDigits.js';\n\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\nexport default function parseIncompletePhoneNumber(string) {\n  var result = '';\n  // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n  return result;\n}\n\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {function?} emitEvent - An optional \"emit event\" function.\r\n * @return {string?} The parsed character.\r\n */\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters, emitEvent) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      // `emitEvent` argument was added to this `export`ed function on Dec 26th, 2023.\n      // Any 3rd-party code that used to `import` and call this function before that\n      // won't be passing any `emitEvent` argument.\n      //\n      // The addition of the `emitEvent` argument was to fix the slightly-weird behavior\n      // of parsing an input string when the user inputs something like `\"2+7\"\n      // https://github.com/catamphetamine/react-phone-number-input/issues/437\n      //\n      // If the parser encounters an unexpected `+` in a string being parsed\n      // then it simply discards that out-of-place `+` and any following characters.\n      //\n      if (typeof emitEvent === 'function') {\n        emitEvent('end');\n      }\n      return;\n    }\n    return '+';\n  }\n  // Allow digits.\n  return parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","function _createForOfIteratorHelperLoose(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (t) return (t = t.call(r)).next.bind(t); if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var o = 0; return function () { return o >= r.length ? { done: !0 } : { done: !1, value: r[o++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nimport Metadata from '../metadata.js';\nimport getNumberType from './getNumberType.js';\nexport default function getCountryByNationalNumber(nationalPhoneNumber, _ref) {\n  var countries = _ref.countries,\n    defaultCountry = _ref.defaultCountry,\n    metadata = _ref.metadata;\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n\n  // const matchingCountries = []\n\n  for (var _iterator = _createForOfIteratorHelperLoose(countries), _step; !(_step = _iterator()).done;) {\n    var country = _step.value;\n    metadata.country(country);\n    // \"Leading digits\" patterns are only defined for about 20% of all countries.\n    // By definition, matching \"leading digits\" is a sufficient but not a necessary\n    // condition for a phone number to belong to a country.\n    // The point of \"leading digits\" check is that it's the fastest one to get a match.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n    // I'd suppose that \"leading digits\" patterns are mutually exclusive for different countries\n    // because of the intended use of that feature.\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    }\n    // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      // If both the `defaultCountry` and the \"main\" one match the phone number,\n      // don't prefer the `defaultCountry` over the \"main\" one.\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/154\n      return country;\n      // // If the `defaultCountry` is among the `matchingCountries` then return it.\n      // if (defaultCountry) {\n      // \tif (country === defaultCountry) {\n      // \t\treturn country\n      // \t}\n      // \tmatchingCountries.push(country)\n      // } else {\n      // \treturn country\n      // }\n    }\n  }\n\n  // // Return the first (\"main\") one of the `matchingCountries`.\n  // if (matchingCountries.length > 0) {\n  // \treturn matchingCountries[0]\n  // }\n}\n//# sourceMappingURL=getCountryByNationalNumber.js.map","import getCountryByNationalNumber from './getCountryByNationalNumber.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, _ref) {\n  var nationalPhoneNumber = _ref.nationalNumber,\n    defaultCountry = _ref.defaultCountry,\n    metadata = _ref.metadata;\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  }\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n  if (!possibleCountries) {\n    return;\n  }\n  // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n  return getCountryByNationalNumber(nationalPhoneNumber, {\n    countries: possibleCountries,\n    defaultCountry: defaultCountry,\n    metadata: metadata.metadata\n  });\n}\n//# sourceMappingURL=getCountryByCallingCode.js.map","// When phone numbers are written in `RFC3966` format — `\"tel:+12133734253\"` —\n// they can have their \"calling code\" part written separately in a `phone-context` parameter.\n// Example: `\"tel:12133734253;phone-context=+1\"`.\n// This function parses the full phone number from the local number and the `phone-context`\n// when the `phone-context` contains a `+` sign.\n\nimport { VALID_DIGITS\n// PLUS_CHARS\n} from '../constants.js';\nexport var PLUS_SIGN = '+';\nvar RFC3966_VISUAL_SEPARATOR_ = '[\\\\-\\\\.\\\\(\\\\)]?';\nvar RFC3966_PHONE_DIGIT_ = '(' + '[' + VALID_DIGITS + ']' + '|' + RFC3966_VISUAL_SEPARATOR_ + ')';\nvar RFC3966_GLOBAL_NUMBER_DIGITS_ = '^' + '\\\\' + PLUS_SIGN + RFC3966_PHONE_DIGIT_ + '*' + '[' + VALID_DIGITS + ']' + RFC3966_PHONE_DIGIT_ + '*' + '$';\n\n/**\r\n * Regular expression of valid global-number-digits for the phone-context\r\n * parameter, following the syntax defined in RFC3966.\r\n */\nvar RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_ = new RegExp(RFC3966_GLOBAL_NUMBER_DIGITS_, 'g');\n\n// In this port of Google's library, we don't accept alpha characters in phone numbers.\n// const ALPHANUM_ = VALID_ALPHA_ + VALID_DIGITS\nvar ALPHANUM_ = VALID_DIGITS;\nvar RFC3966_DOMAINLABEL_ = '[' + ALPHANUM_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*';\nvar VALID_ALPHA_ = 'a-zA-Z';\nvar RFC3966_TOPLABEL_ = '[' + VALID_ALPHA_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*';\nvar RFC3966_DOMAINNAME_ = '^(' + RFC3966_DOMAINLABEL_ + '\\\\.)*' + RFC3966_TOPLABEL_ + '\\\\.?$';\n\n/**\r\n * Regular expression of valid domainname for the phone-context parameter,\r\n * following the syntax defined in RFC3966.\r\n */\nvar RFC3966_DOMAINNAME_PATTERN_ = new RegExp(RFC3966_DOMAINNAME_, 'g');\nexport var RFC3966_PREFIX_ = 'tel:';\nexport var RFC3966_PHONE_CONTEXT_ = ';phone-context=';\nexport var RFC3966_ISDN_SUBADDRESS_ = ';isub=';\n\n/**\r\n * Extracts the value of the phone-context parameter of `numberToExtractFrom`,\r\n * following the syntax defined in RFC3966.\r\n *\r\n * @param {string} numberToExtractFrom\r\n * @return {string|null} the extracted string (possibly empty), or `null` if no phone-context parameter is found.\r\n */\nexport default function extractPhoneContext(numberToExtractFrom) {\n  var indexOfPhoneContext = numberToExtractFrom.indexOf(RFC3966_PHONE_CONTEXT_);\n  // If no phone-context parameter is present\n  if (indexOfPhoneContext < 0) {\n    return null;\n  }\n  var phoneContextStart = indexOfPhoneContext + RFC3966_PHONE_CONTEXT_.length;\n  // If phone-context parameter is empty\n  if (phoneContextStart >= numberToExtractFrom.length) {\n    return '';\n  }\n  var phoneContextEnd = numberToExtractFrom.indexOf(';', phoneContextStart);\n  // If phone-context is not the last parameter\n  if (phoneContextEnd >= 0) {\n    return numberToExtractFrom.substring(phoneContextStart, phoneContextEnd);\n  } else {\n    return numberToExtractFrom.substring(phoneContextStart);\n  }\n}\n\n/**\r\n * Returns whether the value of phoneContext follows the syntax defined in RFC3966.\r\n *\r\n * @param {string|null} phoneContext\r\n * @return {boolean}\r\n */\nexport function isPhoneContextValid(phoneContext) {\n  if (phoneContext === null) {\n    return true;\n  }\n  if (phoneContext.length === 0) {\n    return false;\n  }\n\n  // Does phone-context value match pattern of global-number-digits or domainname.\n  return RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_.test(phoneContext) || RFC3966_DOMAINNAME_PATTERN_.test(phoneContext);\n}\n//# sourceMappingURL=extractPhoneContext.js.map","import extractPhoneContext, { isPhoneContextValid, PLUS_SIGN, RFC3966_PREFIX_, RFC3966_PHONE_CONTEXT_, RFC3966_ISDN_SUBADDRESS_ } from './extractPhoneContext.js';\nimport ParseError from '../ParseError.js';\n\n/**\r\n * @param  {string} numberToParse\r\n * @param  {string} nationalNumber\r\n * @return {}\r\n */\nexport default function extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(numberToParse, _ref) {\n  var extractFormattedPhoneNumber = _ref.extractFormattedPhoneNumber;\n  var phoneContext = extractPhoneContext(numberToParse);\n  if (!isPhoneContextValid(phoneContext)) {\n    throw new ParseError('NOT_A_NUMBER');\n  }\n  var phoneNumberString;\n  if (phoneContext === null) {\n    // Extract a possible number from the string passed in.\n    // (this strips leading characters that could not be the start of a phone number)\n    phoneNumberString = extractFormattedPhoneNumber(numberToParse) || '';\n  } else {\n    phoneNumberString = '';\n\n    // If the phone context contains a phone number prefix, we need to capture\n    // it, whereas domains will be ignored.\n    if (phoneContext.charAt(0) === PLUS_SIGN) {\n      phoneNumberString += phoneContext;\n    }\n\n    // Now append everything between the \"tel:\" prefix and the phone-context.\n    // This should include the national number, an optional extension or\n    // isdn-subaddress component. Note we also handle the case when \"tel:\" is\n    // missing, as we have seen in some of the phone number inputs.\n    // In that case, we append everything from the beginning.\n    var indexOfRfc3966Prefix = numberToParse.indexOf(RFC3966_PREFIX_);\n    var indexOfNationalNumber;\n    // RFC 3966 \"tel:\" prefix is preset at this stage because\n    // `isPhoneContextValid()` requires it to be present.\n    /* istanbul ignore else */\n    if (indexOfRfc3966Prefix >= 0) {\n      indexOfNationalNumber = indexOfRfc3966Prefix + RFC3966_PREFIX_.length;\n    } else {\n      indexOfNationalNumber = 0;\n    }\n    var indexOfPhoneContext = numberToParse.indexOf(RFC3966_PHONE_CONTEXT_);\n    phoneNumberString += numberToParse.substring(indexOfNationalNumber, indexOfPhoneContext);\n  }\n\n  // Delete the isdn-subaddress and everything after it if it is present.\n  // Note extension won't appear at the same time with isdn-subaddress\n  // according to paragraph 5.3 of the RFC3966 spec.\n  var indexOfIsdn = phoneNumberString.indexOf(RFC3966_ISDN_SUBADDRESS_);\n  if (indexOfIsdn > 0) {\n    phoneNumberString = phoneNumberString.substring(0, indexOfIsdn);\n  }\n  // If both phone context and isdn-subaddress are absent but other\n  // parameters are present, the parameters are left in nationalNumber.\n  // This is because we are concerned about deleting content from a potential\n  // number string when there is no strong evidence that the number is\n  // actually written in RFC3966.\n\n  if (phoneNumberString !== '') {\n    return phoneNumberString;\n  }\n}\n//# sourceMappingURL=extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN } from './constants.js';\nimport ParseError from './ParseError.js';\nimport Metadata from './metadata.js';\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js';\nimport extractExtension from './helpers/extension/extractExtension.js';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js';\nimport getCountryCallingCode from './getCountryCallingCode.js';\nimport { isPossibleNumber } from './isPossible.js';\n// import { parseRFC3966 } from './helpers/RFC3966.js'\nimport PhoneNumber from './PhoneNumber.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport extractNationalNumber from './helpers/extractNationalNumber.js';\nimport stripIddPrefix from './helpers/stripIddPrefix.js';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js';\nimport extractFormattedPhoneNumberFromPossibleRfc3966NumberUri from './helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js';\n\n// We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\nvar MAX_INPUT_STRING_LENGTH = 250;\n\n// This consists of the plus symbol, digits, and arabic-indic digits.\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']');\n\n// Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\n// Examples:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\n/**\r\n * Parses a phone number.\r\n *\r\n * parse('123456789', { defaultCountry: 'RU', v2: true }, metadata)\r\n * parse('123456789', { defaultCountry: 'RU' }, metadata)\r\n * parse('123456789', undefined, metadata)\r\n *\r\n * @param  {string} input\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {object|PhoneNumber?} If `options.v2: true` flag is passed, it returns a `PhoneNumber?` instance. Otherwise, returns an object of shape `{ phone: '...', country: '...' }` (or just `{}` if no phone number was parsed).\r\n */\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata);\n\n  // Validate `defaultCountry`.\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  }\n\n  // Parse the phone number.\n  var _parseInput = parseInput(text, options.v2, options.extract),\n    formattedPhoneNumber = _parseInput.number,\n    ext = _parseInput.ext,\n    error = _parseInput.error;\n\n  // If the phone number is not viable then return nothing.\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      if (error === 'TOO_SHORT') {\n        throw new ParseError('TOO_SHORT');\n      }\n      throw new ParseError('NOT_A_NUMBER');\n    }\n    return {};\n  }\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n    country = _parsePhoneNumber.country,\n    nationalNumber = _parsePhoneNumber.nationalNumber,\n    countryCallingCode = _parsePhoneNumber.countryCallingCode,\n    countryCallingCodeSource = _parsePhoneNumber.countryCallingCodeSource,\n    carrierCode = _parsePhoneNumber.carrierCode;\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n    return {};\n  }\n\n  // Validate national (significant) number length.\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    }\n    // Google's demo just throws an error in this case.\n    return {};\n  }\n\n  // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    }\n    // Google's demo just throws an error in this case.\n    return {};\n  }\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n    if (country) {\n      phoneNumber.country = country;\n    }\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n    phoneNumber.__countryCallingCodeSource = countryCallingCodeSource;\n    return phoneNumber;\n  }\n\n  // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  }\n\n  // isInternational: countryCallingCode !== undefined\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\nfunction _extractFormattedPhoneNumber(text, extract, throwOnError) {\n  if (!text) {\n    return;\n  }\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n    return;\n  }\n  if (extract === false) {\n    return text;\n  }\n  // Attempt to extract a possible number from the string passed in\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n  if (startsAt < 0) {\n    return;\n  }\n  return text\n  // Trim everything to the left of the phone number\n  .slice(startsAt)\n  // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nfunction parseInput(text, v2, extract) {\n  // // Parse RFC 3966 phone number URI.\n  // if (text && text.indexOf('tel:') === 0) {\n  // \treturn parseRFC3966(text)\n  // }\n  // let number = extractFormattedPhoneNumber(text, extract, v2)\n  var number = extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(text, {\n    extractFormattedPhoneNumber: function extractFormattedPhoneNumber(text) {\n      return _extractFormattedPhoneNumber(text, extract, v2);\n    }\n  });\n  // If the phone number is not viable, then abort.\n  if (!number) {\n    return {};\n  }\n  if (!isViablePhoneNumber(number)) {\n    if (isViablePhoneNumberStart(number)) {\n      return {\n        error: 'TOO_SHORT'\n      };\n    }\n    return {};\n  }\n  // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n  var withExtensionStripped = extractExtension(number);\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n  return {\n    number: number\n  };\n}\n\n/**\r\n * Creates `parse()` result object.\r\n */\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n  if (ext) {\n    result.ext = ext;\n  }\n  return result;\n}\n\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n    countryCallingCodeSource = _extractCountryCallin.countryCallingCodeSource,\n    countryCallingCode = _extractCountryCallin.countryCallingCode,\n    number = _extractCountryCallin.number;\n\n  // Choose a country by `countryCallingCode`.\n  var country;\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  }\n  // If `formattedPhoneNumber` is passed in \"national\" format\n  // then `number` is defined and `countryCallingCode` is `undefined`.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n    if (defaultCountry) {\n      country = defaultCountry;\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          country = '001';\n        }\n      }\n    }\n    countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n  } else return {};\n  if (!number) {\n    return {\n      countryCallingCodeSource: countryCallingCodeSource,\n      countryCallingCode: countryCallingCode\n    };\n  }\n  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata),\n    nationalNumber = _extractNationalNumbe.nationalNumber,\n    carrierCode = _extractNationalNumbe.carrierCode;\n\n  // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n  var exactCountry = getCountryByCallingCode(countryCallingCode, {\n    nationalNumber: nationalNumber,\n    defaultCountry: defaultCountry,\n    metadata: metadata\n  });\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n    if (exactCountry === '001') {\n      // Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    countryCallingCodeSource: countryCallingCodeSource,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n//# sourceMappingURL=parse.js.map","function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport parse from './parse.js';\nexport default function parsePhoneNumberWithError(text, options, metadata) {\n  return parse(text, _objectSpread(_objectSpread({}, options), {}, {\n    v2: true\n  }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumberWithError_.js.map","function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nimport isObject from './helpers/isObject.js';\n\n// Extracts the following properties from function arguments:\n// * input `text`\n// * `options` object\n// * `metadata` JSON\nexport default function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n    arg_1 = _Array$prototype$slic2[0],\n    arg_2 = _Array$prototype$slic2[1],\n    arg_3 = _Array$prototype$slic2[2],\n    arg_4 = _Array$prototype$slic2[3];\n  var text;\n  var options;\n  var metadata;\n\n  // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.');\n\n  // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  }\n  // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n    if (arg_3) {\n      options = arg_2;\n      metadata = arg_3;\n    } else {\n      metadata = arg_2;\n    }\n  } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n}\n//# sourceMappingURL=normalizeArguments.js.map","function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport parsePhoneNumberWithError from './parsePhoneNumberWithError_.js';\nimport ParseError from './ParseError.js';\nimport { isSupportedCountry } from './metadata.js';\nexport default function parsePhoneNumber(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      defaultCountry: undefined\n    });\n  }\n  // Parse phone number.\n  try {\n    return parsePhoneNumberWithError(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {\n      //\n    } else {\n      throw error;\n    }\n  }\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport normalizeArguments from './normalizeArguments.js';\nimport parsePhoneNumber from './parsePhoneNumber_.js';\nexport default function isValidPhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n    text = _normalizeArguments.text,\n    options = _normalizeArguments.options,\n    metadata = _normalizeArguments.metadata;\n  options = _objectSpread(_objectSpread({}, options), {}, {\n    extract: false\n  });\n  var phoneNumber = parsePhoneNumber(text, options, metadata);\n  return phoneNumber && phoneNumber.isValid() || false;\n}\n//# sourceMappingURL=isValidPhoneNumber.js.map","import withMetadataArgument from './withMetadataArgument.js'\r\nimport { isValidPhoneNumber as _isValidPhoneNumber } from '../../core/index.js'\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn withMetadataArgument(_isValidPhoneNumber, arguments)\r\n}","import { isValidPhoneNumber } from 'libphonenumber-js';\n\n;(function () {\n    'use strict';\n\n    const addValidator = function() {\n        // add validator method\n        if (window.jQuery) {\n            (function($) {\n                if ($.validator) {\n                    $.validator.addMethod(\"internationalPhone\", function(phone_number, element) {\n                        let hidden = $(element).closest('.field').find('input[type=\"hidden\"]').first();\n                        if (typeof hidden !== 'undefined' && hidden !== null) {\n                            let value = hidden.val();\n                            if (value.length === 0 && this.optional(element)) {\n                                return true;\n                            }\n                            return isValidPhoneNumber(value);\n                        } else {\n                            console.error('internationalPhone: hidden field not found');\n                        }\n                        return false;\n                    }, \"Please enter a valid phone number.\");\n                }\n            })(window.jQuery);\n        }\n    }\n\n    if (document.readyState === \"loading\") { // Loading hasn't finished yet\n        document.addEventListener(\"DOMContentLoaded\", addValidator);\n    } else { // `DOMContentLoaded` has already fired\n        addValidator();\n    }\n}());\n","/*\n * International Telephone Input v25.10.10\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// UMD\n(function(factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    window.intlTelInput = factory();\n  }\n}(() => {\n\nvar factoryOutput = (() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n  // src/js/intl-tel-input.ts\n  var intl_tel_input_exports = {};\n  __export(intl_tel_input_exports, {\n    Iti: () => Iti,\n    default: () => intl_tel_input_default\n  });\n\n  // src/js/intl-tel-input/data.ts\n  var rawCountryData = [\n    [\n      \"af\",\n      // Afghanistan\n      \"93\"\n    ],\n    [\n      \"ax\",\n      // Åland Islands\n      \"358\",\n      1\n    ],\n    [\n      \"al\",\n      // Albania\n      \"355\"\n    ],\n    [\n      \"dz\",\n      // Algeria\n      \"213\"\n    ],\n    [\n      \"as\",\n      // American Samoa\n      \"1\",\n      5,\n      [\"684\"]\n    ],\n    [\n      \"ad\",\n      // Andorra\n      \"376\"\n    ],\n    [\n      \"ao\",\n      // Angola\n      \"244\"\n    ],\n    [\n      \"ai\",\n      // Anguilla\n      \"1\",\n      6,\n      [\"264\"]\n    ],\n    [\n      \"ag\",\n      // Antigua and Barbuda\n      \"1\",\n      7,\n      [\"268\"]\n    ],\n    [\n      \"ar\",\n      // Argentina\n      \"54\"\n    ],\n    [\n      \"am\",\n      // Armenia\n      \"374\"\n    ],\n    [\n      \"aw\",\n      // Aruba\n      \"297\"\n    ],\n    [\n      \"ac\",\n      // Ascension Island\n      \"247\"\n    ],\n    [\n      \"au\",\n      // Australia\n      \"61\",\n      0,\n      null,\n      \"0\"\n    ],\n    [\n      \"at\",\n      // Austria\n      \"43\"\n    ],\n    [\n      \"az\",\n      // Azerbaijan\n      \"994\"\n    ],\n    [\n      \"bs\",\n      // Bahamas\n      \"1\",\n      8,\n      [\"242\"]\n    ],\n    [\n      \"bh\",\n      // Bahrain\n      \"973\"\n    ],\n    [\n      \"bd\",\n      // Bangladesh\n      \"880\"\n    ],\n    [\n      \"bb\",\n      // Barbados\n      \"1\",\n      9,\n      [\"246\"]\n    ],\n    [\n      \"by\",\n      // Belarus\n      \"375\"\n    ],\n    [\n      \"be\",\n      // Belgium\n      \"32\"\n    ],\n    [\n      \"bz\",\n      // Belize\n      \"501\"\n    ],\n    [\n      \"bj\",\n      // Benin\n      \"229\"\n    ],\n    [\n      \"bm\",\n      // Bermuda\n      \"1\",\n      10,\n      [\"441\"]\n    ],\n    [\n      \"bt\",\n      // Bhutan\n      \"975\"\n    ],\n    [\n      \"bo\",\n      // Bolivia\n      \"591\"\n    ],\n    [\n      \"ba\",\n      // Bosnia and Herzegovina\n      \"387\"\n    ],\n    [\n      \"bw\",\n      // Botswana\n      \"267\"\n    ],\n    [\n      \"br\",\n      // Brazil\n      \"55\"\n    ],\n    [\n      \"io\",\n      // British Indian Ocean Territory\n      \"246\"\n    ],\n    [\n      \"vg\",\n      // British Virgin Islands\n      \"1\",\n      11,\n      [\"284\"]\n    ],\n    [\n      \"bn\",\n      // Brunei\n      \"673\"\n    ],\n    [\n      \"bg\",\n      // Bulgaria\n      \"359\"\n    ],\n    [\n      \"bf\",\n      // Burkina Faso\n      \"226\"\n    ],\n    [\n      \"bi\",\n      // Burundi\n      \"257\"\n    ],\n    [\n      \"kh\",\n      // Cambodia\n      \"855\"\n    ],\n    [\n      \"cm\",\n      // Cameroon\n      \"237\"\n    ],\n    [\n      \"ca\",\n      // Canada\n      \"1\",\n      1,\n      [\"204\", \"226\", \"236\", \"249\", \"250\", \"263\", \"289\", \"306\", \"343\", \"354\", \"365\", \"367\", \"368\", \"382\", \"387\", \"403\", \"416\", \"418\", \"428\", \"431\", \"437\", \"438\", \"450\", \"584\", \"468\", \"474\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"584\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"683\", \"705\", \"709\", \"742\", \"753\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"879\", \"902\", \"905\"]\n    ],\n    [\n      \"cv\",\n      // Cape Verde\n      \"238\"\n    ],\n    [\n      \"bq\",\n      // Caribbean Netherlands\n      \"599\",\n      1,\n      [\"3\", \"4\", \"7\"]\n    ],\n    [\n      \"ky\",\n      // Cayman Islands\n      \"1\",\n      12,\n      [\"345\"]\n    ],\n    [\n      \"cf\",\n      // Central African Republic\n      \"236\"\n    ],\n    [\n      \"td\",\n      // Chad\n      \"235\"\n    ],\n    [\n      \"cl\",\n      // Chile\n      \"56\"\n    ],\n    [\n      \"cn\",\n      // China\n      \"86\"\n    ],\n    [\n      \"cx\",\n      // Christmas Island\n      \"61\",\n      2,\n      [\"89164\"],\n      \"0\"\n    ],\n    [\n      \"cc\",\n      // Cocos (Keeling) Islands\n      \"61\",\n      1,\n      [\"89162\"],\n      \"0\"\n    ],\n    [\n      \"co\",\n      // Colombia\n      \"57\"\n    ],\n    [\n      \"km\",\n      // Comoros\n      \"269\"\n    ],\n    [\n      \"cg\",\n      // Congo (Brazzaville)\n      \"242\"\n    ],\n    [\n      \"cd\",\n      // Congo (Kinshasa)\n      \"243\"\n    ],\n    [\n      \"ck\",\n      // Cook Islands\n      \"682\"\n    ],\n    [\n      \"cr\",\n      // Costa Rica\n      \"506\"\n    ],\n    [\n      \"ci\",\n      // Côte d'Ivoire\n      \"225\"\n    ],\n    [\n      \"hr\",\n      // Croatia\n      \"385\"\n    ],\n    [\n      \"cu\",\n      // Cuba\n      \"53\"\n    ],\n    [\n      \"cw\",\n      // Curaçao\n      \"599\",\n      0\n    ],\n    [\n      \"cy\",\n      // Cyprus\n      \"357\"\n    ],\n    [\n      \"cz\",\n      // Czech Republic\n      \"420\"\n    ],\n    [\n      \"dk\",\n      // Denmark\n      \"45\"\n    ],\n    [\n      \"dj\",\n      // Djibouti\n      \"253\"\n    ],\n    [\n      \"dm\",\n      // Dominica\n      \"1\",\n      13,\n      [\"767\"]\n    ],\n    [\n      \"do\",\n      // Dominican Republic\n      \"1\",\n      2,\n      [\"809\", \"829\", \"849\"]\n    ],\n    [\n      \"ec\",\n      // Ecuador\n      \"593\"\n    ],\n    [\n      \"eg\",\n      // Egypt\n      \"20\"\n    ],\n    [\n      \"sv\",\n      // El Salvador\n      \"503\"\n    ],\n    [\n      \"gq\",\n      // Equatorial Guinea\n      \"240\"\n    ],\n    [\n      \"er\",\n      // Eritrea\n      \"291\"\n    ],\n    [\n      \"ee\",\n      // Estonia\n      \"372\"\n    ],\n    [\n      \"sz\",\n      // Eswatini\n      \"268\"\n    ],\n    [\n      \"et\",\n      // Ethiopia\n      \"251\"\n    ],\n    [\n      \"fk\",\n      // Falkland Islands (Malvinas)\n      \"500\"\n    ],\n    [\n      \"fo\",\n      // Faroe Islands\n      \"298\"\n    ],\n    [\n      \"fj\",\n      // Fiji\n      \"679\"\n    ],\n    [\n      \"fi\",\n      // Finland\n      \"358\",\n      0\n    ],\n    [\n      \"fr\",\n      // France\n      \"33\"\n    ],\n    [\n      \"gf\",\n      // French Guiana\n      \"594\"\n    ],\n    [\n      \"pf\",\n      // French Polynesia\n      \"689\"\n    ],\n    [\n      \"ga\",\n      // Gabon\n      \"241\"\n    ],\n    [\n      \"gm\",\n      // Gambia\n      \"220\"\n    ],\n    [\n      \"ge\",\n      // Georgia\n      \"995\"\n    ],\n    [\n      \"de\",\n      // Germany\n      \"49\"\n    ],\n    [\n      \"gh\",\n      // Ghana\n      \"233\"\n    ],\n    [\n      \"gi\",\n      // Gibraltar\n      \"350\"\n    ],\n    [\n      \"gr\",\n      // Greece\n      \"30\"\n    ],\n    [\n      \"gl\",\n      // Greenland\n      \"299\"\n    ],\n    [\n      \"gd\",\n      // Grenada\n      \"1\",\n      14,\n      [\"473\"]\n    ],\n    [\n      \"gp\",\n      // Guadeloupe\n      \"590\",\n      0\n    ],\n    [\n      \"gu\",\n      // Guam\n      \"1\",\n      15,\n      [\"671\"]\n    ],\n    [\n      \"gt\",\n      // Guatemala\n      \"502\"\n    ],\n    [\n      \"gg\",\n      // Guernsey\n      \"44\",\n      1,\n      [\"1481\", \"7781\", \"7839\", \"7911\"],\n      \"0\"\n    ],\n    [\n      \"gn\",\n      // Guinea\n      \"224\"\n    ],\n    [\n      \"gw\",\n      // Guinea-Bissau\n      \"245\"\n    ],\n    [\n      \"gy\",\n      // Guyana\n      \"592\"\n    ],\n    [\n      \"ht\",\n      // Haiti\n      \"509\"\n    ],\n    [\n      \"hn\",\n      // Honduras\n      \"504\"\n    ],\n    [\n      \"hk\",\n      // Hong Kong SAR China\n      \"852\"\n    ],\n    [\n      \"hu\",\n      // Hungary\n      \"36\"\n    ],\n    [\n      \"is\",\n      // Iceland\n      \"354\"\n    ],\n    [\n      \"in\",\n      // India\n      \"91\"\n    ],\n    [\n      \"id\",\n      // Indonesia\n      \"62\"\n    ],\n    [\n      \"ir\",\n      // Iran\n      \"98\"\n    ],\n    [\n      \"iq\",\n      // Iraq\n      \"964\"\n    ],\n    [\n      \"ie\",\n      // Ireland\n      \"353\"\n    ],\n    [\n      \"im\",\n      // Isle of Man\n      \"44\",\n      2,\n      [\"1624\", \"74576\", \"7524\", \"7924\", \"7624\"],\n      \"0\"\n    ],\n    [\n      \"il\",\n      // Israel\n      \"972\"\n    ],\n    [\n      \"it\",\n      // Italy\n      \"39\",\n      0\n    ],\n    [\n      \"jm\",\n      // Jamaica\n      \"1\",\n      4,\n      [\"876\", \"658\"]\n    ],\n    [\n      \"jp\",\n      // Japan\n      \"81\"\n    ],\n    [\n      \"je\",\n      // Jersey\n      \"44\",\n      3,\n      [\"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\"],\n      \"0\"\n    ],\n    [\n      \"jo\",\n      // Jordan\n      \"962\"\n    ],\n    [\n      \"kz\",\n      // Kazakhstan\n      \"7\",\n      1,\n      [\"33\", \"7\"],\n      \"8\"\n    ],\n    [\n      \"ke\",\n      // Kenya\n      \"254\"\n    ],\n    [\n      \"ki\",\n      // Kiribati\n      \"686\"\n    ],\n    [\n      \"xk\",\n      // Kosovo\n      \"383\"\n    ],\n    [\n      \"kw\",\n      // Kuwait\n      \"965\"\n    ],\n    [\n      \"kg\",\n      // Kyrgyzstan\n      \"996\"\n    ],\n    [\n      \"la\",\n      // Laos\n      \"856\"\n    ],\n    [\n      \"lv\",\n      // Latvia\n      \"371\"\n    ],\n    [\n      \"lb\",\n      // Lebanon\n      \"961\"\n    ],\n    [\n      \"ls\",\n      // Lesotho\n      \"266\"\n    ],\n    [\n      \"lr\",\n      // Liberia\n      \"231\"\n    ],\n    [\n      \"ly\",\n      // Libya\n      \"218\"\n    ],\n    [\n      \"li\",\n      // Liechtenstein\n      \"423\"\n    ],\n    [\n      \"lt\",\n      // Lithuania\n      \"370\"\n    ],\n    [\n      \"lu\",\n      // Luxembourg\n      \"352\"\n    ],\n    [\n      \"mo\",\n      // Macao SAR China\n      \"853\"\n    ],\n    [\n      \"mg\",\n      // Madagascar\n      \"261\"\n    ],\n    [\n      \"mw\",\n      // Malawi\n      \"265\"\n    ],\n    [\n      \"my\",\n      // Malaysia\n      \"60\"\n    ],\n    [\n      \"mv\",\n      // Maldives\n      \"960\"\n    ],\n    [\n      \"ml\",\n      // Mali\n      \"223\"\n    ],\n    [\n      \"mt\",\n      // Malta\n      \"356\"\n    ],\n    [\n      \"mh\",\n      // Marshall Islands\n      \"692\"\n    ],\n    [\n      \"mq\",\n      // Martinique\n      \"596\"\n    ],\n    [\n      \"mr\",\n      // Mauritania\n      \"222\"\n    ],\n    [\n      \"mu\",\n      // Mauritius\n      \"230\"\n    ],\n    [\n      \"yt\",\n      // Mayotte\n      \"262\",\n      1,\n      [\"269\", \"639\"],\n      \"0\"\n    ],\n    [\n      \"mx\",\n      // Mexico\n      \"52\"\n    ],\n    [\n      \"fm\",\n      // Micronesia\n      \"691\"\n    ],\n    [\n      \"md\",\n      // Moldova\n      \"373\"\n    ],\n    [\n      \"mc\",\n      // Monaco\n      \"377\"\n    ],\n    [\n      \"mn\",\n      // Mongolia\n      \"976\"\n    ],\n    [\n      \"me\",\n      // Montenegro\n      \"382\"\n    ],\n    [\n      \"ms\",\n      // Montserrat\n      \"1\",\n      16,\n      [\"664\"]\n    ],\n    [\n      \"ma\",\n      // Morocco\n      \"212\",\n      0,\n      null,\n      \"0\"\n    ],\n    [\n      \"mz\",\n      // Mozambique\n      \"258\"\n    ],\n    [\n      \"mm\",\n      // Myanmar (Burma)\n      \"95\"\n    ],\n    [\n      \"na\",\n      // Namibia\n      \"264\"\n    ],\n    [\n      \"nr\",\n      // Nauru\n      \"674\"\n    ],\n    [\n      \"np\",\n      // Nepal\n      \"977\"\n    ],\n    [\n      \"nl\",\n      // Netherlands\n      \"31\"\n    ],\n    [\n      \"nc\",\n      // New Caledonia\n      \"687\"\n    ],\n    [\n      \"nz\",\n      // New Zealand\n      \"64\"\n    ],\n    [\n      \"ni\",\n      // Nicaragua\n      \"505\"\n    ],\n    [\n      \"ne\",\n      // Niger\n      \"227\"\n    ],\n    [\n      \"ng\",\n      // Nigeria\n      \"234\"\n    ],\n    [\n      \"nu\",\n      // Niue\n      \"683\"\n    ],\n    [\n      \"nf\",\n      // Norfolk Island\n      \"672\"\n    ],\n    [\n      \"kp\",\n      // North Korea\n      \"850\"\n    ],\n    [\n      \"mk\",\n      // North Macedonia\n      \"389\"\n    ],\n    [\n      \"mp\",\n      // Northern Mariana Islands\n      \"1\",\n      17,\n      [\"670\"]\n    ],\n    [\n      \"no\",\n      // Norway\n      \"47\",\n      0\n    ],\n    [\n      \"om\",\n      // Oman\n      \"968\"\n    ],\n    [\n      \"pk\",\n      // Pakistan\n      \"92\"\n    ],\n    [\n      \"pw\",\n      // Palau\n      \"680\"\n    ],\n    [\n      \"ps\",\n      // Palestinian Territories\n      \"970\"\n    ],\n    [\n      \"pa\",\n      // Panama\n      \"507\"\n    ],\n    [\n      \"pg\",\n      // Papua New Guinea\n      \"675\"\n    ],\n    [\n      \"py\",\n      // Paraguay\n      \"595\"\n    ],\n    [\n      \"pe\",\n      // Peru\n      \"51\"\n    ],\n    [\n      \"ph\",\n      // Philippines\n      \"63\"\n    ],\n    [\n      \"pl\",\n      // Poland\n      \"48\"\n    ],\n    [\n      \"pt\",\n      // Portugal\n      \"351\"\n    ],\n    [\n      \"pr\",\n      // Puerto Rico\n      \"1\",\n      3,\n      [\"787\", \"939\"]\n    ],\n    [\n      \"qa\",\n      // Qatar\n      \"974\"\n    ],\n    [\n      \"re\",\n      // Réunion\n      \"262\",\n      0,\n      null,\n      \"0\"\n    ],\n    [\n      \"ro\",\n      // Romania\n      \"40\"\n    ],\n    [\n      \"ru\",\n      // Russia\n      \"7\",\n      0,\n      null,\n      \"8\"\n    ],\n    [\n      \"rw\",\n      // Rwanda\n      \"250\"\n    ],\n    [\n      \"ws\",\n      // Samoa\n      \"685\"\n    ],\n    [\n      \"sm\",\n      // San Marino\n      \"378\"\n    ],\n    [\n      \"st\",\n      // São Tomé & Príncipe\n      \"239\"\n    ],\n    [\n      \"sa\",\n      // Saudi Arabia\n      \"966\"\n    ],\n    [\n      \"sn\",\n      // Senegal\n      \"221\"\n    ],\n    [\n      \"rs\",\n      // Serbia\n      \"381\"\n    ],\n    [\n      \"sc\",\n      // Seychelles\n      \"248\"\n    ],\n    [\n      \"sl\",\n      // Sierra Leone\n      \"232\"\n    ],\n    [\n      \"sg\",\n      // Singapore\n      \"65\"\n    ],\n    [\n      \"sx\",\n      // Sint Maarten\n      \"1\",\n      21,\n      [\"721\"]\n    ],\n    [\n      \"sk\",\n      // Slovakia\n      \"421\"\n    ],\n    [\n      \"si\",\n      // Slovenia\n      \"386\"\n    ],\n    [\n      \"sb\",\n      // Solomon Islands\n      \"677\"\n    ],\n    [\n      \"so\",\n      // Somalia\n      \"252\"\n    ],\n    [\n      \"za\",\n      // South Africa\n      \"27\"\n    ],\n    [\n      \"kr\",\n      // South Korea\n      \"82\"\n    ],\n    [\n      \"ss\",\n      // South Sudan\n      \"211\"\n    ],\n    [\n      \"es\",\n      // Spain\n      \"34\"\n    ],\n    [\n      \"lk\",\n      // Sri Lanka\n      \"94\"\n    ],\n    [\n      \"bl\",\n      // St. Barthélemy\n      \"590\",\n      1\n    ],\n    [\n      \"sh\",\n      // St. Helena\n      \"290\"\n    ],\n    [\n      \"kn\",\n      // St. Kitts & Nevis\n      \"1\",\n      18,\n      [\"869\"]\n    ],\n    [\n      \"lc\",\n      // St. Lucia\n      \"1\",\n      19,\n      [\"758\"]\n    ],\n    [\n      \"mf\",\n      // St. Martin\n      \"590\",\n      2\n    ],\n    [\n      \"pm\",\n      // St. Pierre & Miquelon\n      \"508\"\n    ],\n    [\n      \"vc\",\n      // St. Vincent & Grenadines\n      \"1\",\n      20,\n      [\"784\"]\n    ],\n    [\n      \"sd\",\n      // Sudan\n      \"249\"\n    ],\n    [\n      \"sr\",\n      // Suriname\n      \"597\"\n    ],\n    [\n      \"sj\",\n      // Svalbard & Jan Mayen\n      \"47\",\n      1,\n      [\"79\"]\n    ],\n    [\n      \"se\",\n      // Sweden\n      \"46\"\n    ],\n    [\n      \"ch\",\n      // Switzerland\n      \"41\"\n    ],\n    [\n      \"sy\",\n      // Syria\n      \"963\"\n    ],\n    [\n      \"tw\",\n      // Taiwan\n      \"886\"\n    ],\n    [\n      \"tj\",\n      // Tajikistan\n      \"992\"\n    ],\n    [\n      \"tz\",\n      // Tanzania\n      \"255\"\n    ],\n    [\n      \"th\",\n      // Thailand\n      \"66\"\n    ],\n    [\n      \"tl\",\n      // Timor-Leste\n      \"670\"\n    ],\n    [\n      \"tg\",\n      // Togo\n      \"228\"\n    ],\n    [\n      \"tk\",\n      // Tokelau\n      \"690\"\n    ],\n    [\n      \"to\",\n      // Tonga\n      \"676\"\n    ],\n    [\n      \"tt\",\n      // Trinidad & Tobago\n      \"1\",\n      22,\n      [\"868\"]\n    ],\n    [\n      \"tn\",\n      // Tunisia\n      \"216\"\n    ],\n    [\n      \"tr\",\n      // Turkey\n      \"90\"\n    ],\n    [\n      \"tm\",\n      // Turkmenistan\n      \"993\"\n    ],\n    [\n      \"tc\",\n      // Turks & Caicos Islands\n      \"1\",\n      23,\n      [\"649\"]\n    ],\n    [\n      \"tv\",\n      // Tuvalu\n      \"688\"\n    ],\n    [\n      \"vi\",\n      // U.S. Virgin Islands\n      \"1\",\n      24,\n      [\"340\"]\n    ],\n    [\n      \"ug\",\n      // Uganda\n      \"256\"\n    ],\n    [\n      \"ua\",\n      // Ukraine\n      \"380\"\n    ],\n    [\n      \"ae\",\n      // United Arab Emirates\n      \"971\"\n    ],\n    [\n      \"gb\",\n      // United Kingdom\n      \"44\",\n      0,\n      null,\n      \"0\"\n    ],\n    [\n      \"us\",\n      // United States\n      \"1\",\n      0\n    ],\n    [\n      \"uy\",\n      // Uruguay\n      \"598\"\n    ],\n    [\n      \"uz\",\n      // Uzbekistan\n      \"998\"\n    ],\n    [\n      \"vu\",\n      // Vanuatu\n      \"678\"\n    ],\n    [\n      \"va\",\n      // Vatican City\n      \"39\",\n      1,\n      [\"06698\"]\n    ],\n    [\n      \"ve\",\n      // Venezuela\n      \"58\"\n    ],\n    [\n      \"vn\",\n      // Vietnam\n      \"84\"\n    ],\n    [\n      \"wf\",\n      // Wallis & Futuna\n      \"681\"\n    ],\n    [\n      \"eh\",\n      // Western Sahara\n      \"212\",\n      1,\n      [\"5288\", \"5289\"],\n      \"0\"\n    ],\n    [\n      \"ye\",\n      // Yemen\n      \"967\"\n    ],\n    [\n      \"zm\",\n      // Zambia\n      \"260\"\n    ],\n    [\n      \"zw\",\n      // Zimbabwe\n      \"263\"\n    ]\n  ];\n  var allCountries = [];\n  for (const c of rawCountryData) {\n    allCountries.push({\n      name: \"\",\n      // populated in the plugin\n      iso2: c[0],\n      dialCode: c[1],\n      priority: c[2] || 0,\n      areaCodes: c[3] || null,\n      nodeById: {},\n      // populated by the plugin\n      nationalPrefix: c[4] || null\n    });\n  }\n  var data_default = allCountries;\n\n  // src/js/intl-tel-input/i18n/en/countries.ts\n  var countryTranslations = {\n    ad: \"Andorra\",\n    ae: \"United Arab Emirates\",\n    af: \"Afghanistan\",\n    ag: \"Antigua & Barbuda\",\n    ai: \"Anguilla\",\n    al: \"Albania\",\n    am: \"Armenia\",\n    ao: \"Angola\",\n    ar: \"Argentina\",\n    as: \"American Samoa\",\n    at: \"Austria\",\n    au: \"Australia\",\n    aw: \"Aruba\",\n    ax: \"\\xC5land Islands\",\n    az: \"Azerbaijan\",\n    ba: \"Bosnia & Herzegovina\",\n    bb: \"Barbados\",\n    bd: \"Bangladesh\",\n    be: \"Belgium\",\n    bf: \"Burkina Faso\",\n    bg: \"Bulgaria\",\n    bh: \"Bahrain\",\n    bi: \"Burundi\",\n    bj: \"Benin\",\n    bl: \"St. Barth\\xE9lemy\",\n    bm: \"Bermuda\",\n    bn: \"Brunei\",\n    bo: \"Bolivia\",\n    bq: \"Caribbean Netherlands\",\n    br: \"Brazil\",\n    bs: \"Bahamas\",\n    bt: \"Bhutan\",\n    bw: \"Botswana\",\n    by: \"Belarus\",\n    bz: \"Belize\",\n    ca: \"Canada\",\n    cc: \"Cocos (Keeling) Islands\",\n    cd: \"Congo - Kinshasa\",\n    cf: \"Central African Republic\",\n    cg: \"Congo - Brazzaville\",\n    ch: \"Switzerland\",\n    ci: \"C\\xF4te d\\u2019Ivoire\",\n    ck: \"Cook Islands\",\n    cl: \"Chile\",\n    cm: \"Cameroon\",\n    cn: \"China\",\n    co: \"Colombia\",\n    cr: \"Costa Rica\",\n    cu: \"Cuba\",\n    cv: \"Cape Verde\",\n    cw: \"Cura\\xE7ao\",\n    cx: \"Christmas Island\",\n    cy: \"Cyprus\",\n    cz: \"Czechia\",\n    de: \"Germany\",\n    dj: \"Djibouti\",\n    dk: \"Denmark\",\n    dm: \"Dominica\",\n    do: \"Dominican Republic\",\n    dz: \"Algeria\",\n    ec: \"Ecuador\",\n    ee: \"Estonia\",\n    eg: \"Egypt\",\n    eh: \"Western Sahara\",\n    er: \"Eritrea\",\n    es: \"Spain\",\n    et: \"Ethiopia\",\n    fi: \"Finland\",\n    fj: \"Fiji\",\n    fk: \"Falkland Islands\",\n    fm: \"Micronesia\",\n    fo: \"Faroe Islands\",\n    fr: \"France\",\n    ga: \"Gabon\",\n    gb: \"United Kingdom\",\n    gd: \"Grenada\",\n    ge: \"Georgia\",\n    gf: \"French Guiana\",\n    gg: \"Guernsey\",\n    gh: \"Ghana\",\n    gi: \"Gibraltar\",\n    gl: \"Greenland\",\n    gm: \"Gambia\",\n    gn: \"Guinea\",\n    gp: \"Guadeloupe\",\n    gq: \"Equatorial Guinea\",\n    gr: \"Greece\",\n    gt: \"Guatemala\",\n    gu: \"Guam\",\n    gw: \"Guinea-Bissau\",\n    gy: \"Guyana\",\n    hk: \"Hong Kong SAR China\",\n    hn: \"Honduras\",\n    hr: \"Croatia\",\n    ht: \"Haiti\",\n    hu: \"Hungary\",\n    id: \"Indonesia\",\n    ie: \"Ireland\",\n    il: \"Israel\",\n    im: \"Isle of Man\",\n    in: \"India\",\n    io: \"British Indian Ocean Territory\",\n    iq: \"Iraq\",\n    ir: \"Iran\",\n    is: \"Iceland\",\n    it: \"Italy\",\n    je: \"Jersey\",\n    jm: \"Jamaica\",\n    jo: \"Jordan\",\n    jp: \"Japan\",\n    ke: \"Kenya\",\n    kg: \"Kyrgyzstan\",\n    kh: \"Cambodia\",\n    ki: \"Kiribati\",\n    km: \"Comoros\",\n    kn: \"St. Kitts & Nevis\",\n    kp: \"North Korea\",\n    kr: \"South Korea\",\n    kw: \"Kuwait\",\n    ky: \"Cayman Islands\",\n    kz: \"Kazakhstan\",\n    la: \"Laos\",\n    lb: \"Lebanon\",\n    lc: \"St. Lucia\",\n    li: \"Liechtenstein\",\n    lk: \"Sri Lanka\",\n    lr: \"Liberia\",\n    ls: \"Lesotho\",\n    lt: \"Lithuania\",\n    lu: \"Luxembourg\",\n    lv: \"Latvia\",\n    ly: \"Libya\",\n    ma: \"Morocco\",\n    mc: \"Monaco\",\n    md: \"Moldova\",\n    me: \"Montenegro\",\n    mf: \"St. Martin\",\n    mg: \"Madagascar\",\n    mh: \"Marshall Islands\",\n    mk: \"North Macedonia\",\n    ml: \"Mali\",\n    mm: \"Myanmar (Burma)\",\n    mn: \"Mongolia\",\n    mo: \"Macao SAR China\",\n    mp: \"Northern Mariana Islands\",\n    mq: \"Martinique\",\n    mr: \"Mauritania\",\n    ms: \"Montserrat\",\n    mt: \"Malta\",\n    mu: \"Mauritius\",\n    mv: \"Maldives\",\n    mw: \"Malawi\",\n    mx: \"Mexico\",\n    my: \"Malaysia\",\n    mz: \"Mozambique\",\n    na: \"Namibia\",\n    nc: \"New Caledonia\",\n    ne: \"Niger\",\n    nf: \"Norfolk Island\",\n    ng: \"Nigeria\",\n    ni: \"Nicaragua\",\n    nl: \"Netherlands\",\n    no: \"Norway\",\n    np: \"Nepal\",\n    nr: \"Nauru\",\n    nu: \"Niue\",\n    nz: \"New Zealand\",\n    om: \"Oman\",\n    pa: \"Panama\",\n    pe: \"Peru\",\n    pf: \"French Polynesia\",\n    pg: \"Papua New Guinea\",\n    ph: \"Philippines\",\n    pk: \"Pakistan\",\n    pl: \"Poland\",\n    pm: \"St. Pierre & Miquelon\",\n    pr: \"Puerto Rico\",\n    ps: \"Palestinian Territories\",\n    pt: \"Portugal\",\n    pw: \"Palau\",\n    py: \"Paraguay\",\n    qa: \"Qatar\",\n    re: \"R\\xE9union\",\n    ro: \"Romania\",\n    rs: \"Serbia\",\n    ru: \"Russia\",\n    rw: \"Rwanda\",\n    sa: \"Saudi Arabia\",\n    sb: \"Solomon Islands\",\n    sc: \"Seychelles\",\n    sd: \"Sudan\",\n    se: \"Sweden\",\n    sg: \"Singapore\",\n    sh: \"St. Helena\",\n    si: \"Slovenia\",\n    sj: \"Svalbard & Jan Mayen\",\n    sk: \"Slovakia\",\n    sl: \"Sierra Leone\",\n    sm: \"San Marino\",\n    sn: \"Senegal\",\n    so: \"Somalia\",\n    sr: \"Suriname\",\n    ss: \"South Sudan\",\n    st: \"S\\xE3o Tom\\xE9 & Pr\\xEDncipe\",\n    sv: \"El Salvador\",\n    sx: \"Sint Maarten\",\n    sy: \"Syria\",\n    sz: \"Eswatini\",\n    tc: \"Turks & Caicos Islands\",\n    td: \"Chad\",\n    tg: \"Togo\",\n    th: \"Thailand\",\n    tj: \"Tajikistan\",\n    tk: \"Tokelau\",\n    tl: \"Timor-Leste\",\n    tm: \"Turkmenistan\",\n    tn: \"Tunisia\",\n    to: \"Tonga\",\n    tr: \"Turkey\",\n    tt: \"Trinidad & Tobago\",\n    tv: \"Tuvalu\",\n    tw: \"Taiwan\",\n    tz: \"Tanzania\",\n    ua: \"Ukraine\",\n    ug: \"Uganda\",\n    us: \"United States\",\n    uy: \"Uruguay\",\n    uz: \"Uzbekistan\",\n    va: \"Vatican City\",\n    vc: \"St. Vincent & Grenadines\",\n    ve: \"Venezuela\",\n    vg: \"British Virgin Islands\",\n    vi: \"U.S. Virgin Islands\",\n    vn: \"Vietnam\",\n    vu: \"Vanuatu\",\n    wf: \"Wallis & Futuna\",\n    ws: \"Samoa\",\n    ye: \"Yemen\",\n    yt: \"Mayotte\",\n    za: \"South Africa\",\n    zm: \"Zambia\",\n    zw: \"Zimbabwe\"\n  };\n  var countries_default = countryTranslations;\n\n  // src/js/intl-tel-input/i18n/en/interface.ts\n  var interfaceTranslations = {\n    selectedCountryAriaLabel: \"Change country, selected ${countryName} (${dialCode})\",\n    noCountrySelected: \"Select country\",\n    countryListAriaLabel: \"List of countries\",\n    searchPlaceholder: \"Search\",\n    clearSearchAriaLabel: \"Clear search\",\n    zeroSearchResults: \"No results found\",\n    oneSearchResult: \"1 result found\",\n    multipleSearchResults: \"${count} results found\",\n    // additional countries (not supported by country-list library)\n    ac: \"Ascension Island\",\n    xk: \"Kosovo\"\n  };\n  var interface_default = interfaceTranslations;\n\n  // src/js/intl-tel-input/i18n/en/index.ts\n  var allTranslations = { ...countries_default, ...interface_default };\n  var en_default = allTranslations;\n\n  // src/js/modules/core/options.ts\n  var mq = (q) => {\n    return typeof window !== \"undefined\" && typeof window.matchMedia === \"function\" && window.matchMedia(q).matches;\n  };\n  var computeDefaultUseFullscreenPopup = () => {\n    if (typeof navigator !== \"undefined\" && typeof window !== \"undefined\") {\n      const isMobileUserAgent = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n      const isNarrowViewport = mq(\"(max-width: 500px)\");\n      const isShortViewport = mq(\"(max-height: 600px)\");\n      const isCoarsePointer = mq(\"(pointer: coarse)\");\n      return isMobileUserAgent || isNarrowViewport || isCoarsePointer && isShortViewport;\n    }\n    return false;\n  };\n  var defaults = {\n    // Allow alphanumeric \"phonewords\" (e.g. +1 800 FLOWERS) as valid numbers\n    allowPhonewords: false,\n    //* Whether or not to allow the dropdown.\n    allowDropdown: true,\n    //* Add a placeholder in the input with an example number for the selected country.\n    autoPlaceholder: \"polite\",\n    //* Modify the parentClass.\n    containerClass: \"\",\n    //* The order of the countries in the dropdown. Defaults to alphabetical.\n    countryOrder: null,\n    //* Add a country search input at the top of the dropdown.\n    countrySearch: true,\n    //* Modify the auto placeholder.\n    customPlaceholder: null,\n    //* Append menu to specified element.\n    dropdownContainer: null,\n    //* Don't display these countries.\n    excludeCountries: [],\n    //* Fix the dropdown width to the input width (rather than being as wide as the longest country name).\n    fixDropdownWidth: true,\n    //* Format the number as the user types\n    formatAsYouType: true,\n    //* Format the input value during initialisation and on setNumber.\n    formatOnDisplay: true,\n    //* geoIp lookup function.\n    geoIpLookup: null,\n    //* Inject a hidden input with the name returned from this function, and on submit, populate it with the result of getNumber.\n    hiddenInput: null,\n    //* Internationalise the plugin text e.g. search input placeholder, country names.\n    i18n: {},\n    //* Initial country.\n    initialCountry: \"\",\n    //* A function to load the utils script.\n    loadUtils: null,\n    //* National vs international formatting for numbers e.g. placeholders and displaying existing numbers.\n    nationalMode: true,\n    //* Display only these countries.\n    onlyCountries: [],\n    //* Number type to use for placeholders.\n    placeholderNumberType: \"MOBILE\",\n    //* Show flags - for both the selected country, and in the country dropdown\n    showFlags: true,\n    //* Display the international dial code next to the selected flag.\n    separateDialCode: false,\n    //* Only allow certain chars e.g. a plus followed by numeric digits, and cap at max valid length.\n    strictMode: false,\n    //* Use full screen popup instead of dropdown for country list.\n    useFullscreenPopup: computeDefaultUseFullscreenPopup(),\n    //* The number type to enforce during validation.\n    validationNumberTypes: [\"MOBILE\"]\n  };\n  function applyOptionSideEffects(o) {\n    if (o.useFullscreenPopup) {\n      o.fixDropdownWidth = false;\n    }\n    if (o.onlyCountries.length === 1) {\n      o.initialCountry = o.onlyCountries[0];\n    }\n    if (o.separateDialCode) {\n      o.nationalMode = false;\n    }\n    if (o.allowDropdown && !o.showFlags && !o.separateDialCode) {\n      o.nationalMode = false;\n    }\n    if (o.useFullscreenPopup && !o.dropdownContainer) {\n      o.dropdownContainer = document.body;\n    }\n    o.i18n = { ...en_default, ...o.i18n };\n  }\n\n  // src/js/modules/utils/string.ts\n  var getNumeric = (s) => s.replace(/\\D/g, \"\");\n  var normaliseString = (s = \"\") => s.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\n\n  // src/js/modules/utils/dom.ts\n  var createEl = (tagName, attrs, container) => {\n    const el = document.createElement(tagName);\n    if (attrs) {\n      Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n    }\n    if (container) {\n      container.appendChild(el);\n    }\n    return el;\n  };\n\n  // src/js/modules/data/country-data.ts\n  function processAllCountries(options) {\n    const { onlyCountries, excludeCountries } = options;\n    if (onlyCountries.length) {\n      const lowerCaseOnlyCountries = onlyCountries.map((country) => country.toLowerCase());\n      return data_default.filter((country) => lowerCaseOnlyCountries.includes(country.iso2));\n    } else if (excludeCountries.length) {\n      const lowerCaseExcludeCountries = excludeCountries.map((country) => country.toLowerCase());\n      return data_default.filter((country) => !lowerCaseExcludeCountries.includes(country.iso2));\n    }\n    return data_default;\n  }\n  function translateCountryNames(countries, options) {\n    for (const c of countries) {\n      const iso2 = c.iso2.toLowerCase();\n      if (options.i18n[iso2]) {\n        c.name = options.i18n[iso2];\n      }\n    }\n  }\n  function processDialCodes(countries, options) {\n    const dialCodes = /* @__PURE__ */ new Set();\n    let dialCodeMaxLen = 0;\n    const dialCodeToIso2Map = {};\n    const _addToDialCodeMap = (iso2, dialCode, priority) => {\n      if (!iso2 || !dialCode) {\n        return;\n      }\n      if (dialCode.length > dialCodeMaxLen) {\n        dialCodeMaxLen = dialCode.length;\n      }\n      if (!dialCodeToIso2Map.hasOwnProperty(dialCode)) {\n        dialCodeToIso2Map[dialCode] = [];\n      }\n      const iso2List = dialCodeToIso2Map[dialCode];\n      if (iso2List.includes(iso2)) {\n        return;\n      }\n      const index = priority !== void 0 ? priority : iso2List.length;\n      iso2List[index] = iso2;\n    };\n    for (const c of countries) {\n      if (!dialCodes.has(c.dialCode)) {\n        dialCodes.add(c.dialCode);\n      }\n      _addToDialCodeMap(c.iso2, c.dialCode, c.priority);\n    }\n    if (options.onlyCountries.length || options.excludeCountries.length) {\n      dialCodes.forEach((dialCode) => {\n        dialCodeToIso2Map[dialCode] = dialCodeToIso2Map[dialCode].filter(Boolean);\n      });\n    }\n    for (const c of countries) {\n      if (c.areaCodes) {\n        const rootIso2Code = dialCodeToIso2Map[c.dialCode][0];\n        for (const areaCode of c.areaCodes) {\n          for (let k = 1; k < areaCode.length; k++) {\n            const partialAreaCode = areaCode.substring(0, k);\n            const partialDialCode = c.dialCode + partialAreaCode;\n            _addToDialCodeMap(rootIso2Code, partialDialCode);\n            _addToDialCodeMap(c.iso2, partialDialCode);\n          }\n          _addToDialCodeMap(c.iso2, c.dialCode + areaCode);\n        }\n      }\n    }\n    return { dialCodes, dialCodeMaxLen, dialCodeToIso2Map };\n  }\n  function sortCountries(countries, options) {\n    if (options.countryOrder) {\n      options.countryOrder = options.countryOrder.map((iso2) => iso2.toLowerCase());\n    }\n    countries.sort((a, b) => {\n      const { countryOrder } = options;\n      if (countryOrder) {\n        const aIndex = countryOrder.indexOf(a.iso2);\n        const bIndex = countryOrder.indexOf(b.iso2);\n        const aIndexExists = aIndex > -1;\n        const bIndexExists = bIndex > -1;\n        if (aIndexExists || bIndexExists) {\n          if (aIndexExists && bIndexExists) {\n            return aIndex - bIndex;\n          }\n          return aIndexExists ? -1 : 1;\n        }\n      }\n      return a.name.localeCompare(b.name);\n    });\n  }\n  function cacheSearchTokens(countries) {\n    for (const c of countries) {\n      c.normalisedName = normaliseString(c.name);\n      c.initials = c.name.split(/[^a-zA-ZÀ-ÿа-яА-Я]/).map((word) => word[0]).join(\"\").toLowerCase();\n      c.dialCodePlus = `+${c.dialCode}`;\n    }\n  }\n\n  // src/js/modules/format/formatting.ts\n  function beforeSetNumber(fullNumber, dialCode, separateDialCode, selectedCountryData) {\n    let number = fullNumber;\n    if (separateDialCode) {\n      if (dialCode) {\n        dialCode = `+${selectedCountryData.dialCode}`;\n        const start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n        number = number.substring(start);\n      }\n    }\n    return number;\n  }\n  function formatNumberAsYouType(fullNumber, telInputValue, utils, selectedCountryData, separateDialCode) {\n    const result = utils ? utils.formatNumberAsYouType(fullNumber, selectedCountryData.iso2) : fullNumber;\n    const { dialCode } = selectedCountryData;\n    if (separateDialCode && telInputValue.charAt(0) !== \"+\" && result.includes(`+${dialCode}`)) {\n      const afterDialCode = result.split(`+${dialCode}`)[1] || \"\";\n      return afterDialCode.trim();\n    }\n    return result;\n  }\n\n  // src/js/modules/format/caret.ts\n  function translateCursorPosition(relevantChars, formattedValue, prevCaretPos, isDeleteForwards) {\n    if (prevCaretPos === 0 && !isDeleteForwards) {\n      return 0;\n    }\n    let relevantCharCount = 0;\n    for (let i = 0; i < formattedValue.length; i++) {\n      if (/[+0-9]/.test(formattedValue[i])) {\n        relevantCharCount++;\n      }\n      if (relevantCharCount === relevantChars && !isDeleteForwards) {\n        return i + 1;\n      }\n      if (isDeleteForwards && relevantCharCount === relevantChars + 1) {\n        return i;\n      }\n    }\n    return formattedValue.length;\n  }\n\n  // src/js/modules/data/nanp-regionless.ts\n  var regionlessNanpNumbers = [\n    \"800\",\n    \"822\",\n    \"833\",\n    \"844\",\n    \"855\",\n    \"866\",\n    \"877\",\n    \"880\",\n    \"881\",\n    \"882\",\n    \"883\",\n    \"884\",\n    \"885\",\n    \"886\",\n    \"887\",\n    \"888\",\n    \"889\"\n  ];\n  var isRegionlessNanp = (number) => {\n    const numeric = getNumeric(number);\n    if (numeric.charAt(0) === \"1\") {\n      const areaCode = numeric.substring(1, 4);\n      return regionlessNanpNumbers.includes(areaCode);\n    }\n    return false;\n  };\n\n  // src/js/intl-tel-input.ts\n  for (const c of data_default) {\n    c.name = en_default[c.iso2];\n  }\n  var id = 0;\n  var iso2Set = new Set(data_default.map((c) => c.iso2));\n  var isIso2 = (val) => iso2Set.has(val);\n  var forEachInstance = (method, ...args) => {\n    const { instances } = intlTelInput;\n    Object.values(instances).forEach((instance) => instance[method](...args));\n  };\n  var Iti = class _Iti {\n    /**\n     * Build a space-delimited class string from an object map of className -> truthy/falsey.\n     * Only keys with truthy values are included.\n     */\n    static _buildClassNames(flags) {\n      return Object.keys(flags).filter((k) => Boolean(flags[k])).join(\" \");\n    }\n    constructor(input, customOptions = {}) {\n      this.id = id++;\n      this.telInput = input;\n      this.highlightedItem = null;\n      this.options = Object.assign({}, defaults, customOptions);\n      this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n    }\n    _detectEnvironmentAndLayout() {\n      this.isAndroid = typeof navigator !== \"undefined\" ? /Android/i.test(navigator.userAgent) : false;\n      this.isRTL = !!this.telInput.closest(\"[dir=rtl]\");\n      this.telInput.dir = \"ltr\";\n      const showOnDefaultSide = this.options.allowDropdown || this.options.separateDialCode;\n      this.showSelectedCountryOnLeft = this.isRTL ? !showOnDefaultSide : showOnDefaultSide;\n      if (this.options.separateDialCode) {\n        if (this.isRTL) {\n          this.originalPaddingRight = this.telInput.style.paddingRight;\n        } else {\n          this.originalPaddingLeft = this.telInput.style.paddingLeft;\n        }\n      }\n    }\n    _createInitPromises() {\n      const autoCountryPromise = new Promise((resolve, reject) => {\n        this.resolveAutoCountryPromise = resolve;\n        this.rejectAutoCountryPromise = reject;\n      });\n      const utilsScriptPromise = new Promise((resolve, reject) => {\n        this.resolveUtilsScriptPromise = resolve;\n        this.rejectUtilsScriptPromise = reject;\n      });\n      this.promise = Promise.all([autoCountryPromise, utilsScriptPromise]);\n    }\n    //* Can't be private as it's called from intlTelInput convenience wrapper.\n    _init() {\n      applyOptionSideEffects(this.options);\n      this._detectEnvironmentAndLayout();\n      this._createInitPromises();\n      this.selectedCountryData = {};\n      this._processCountryData();\n      this._generateMarkup();\n      this._setInitialState();\n      this._initListeners();\n      this._initRequests();\n    }\n    //********************\n    //*  PRIVATE METHODS\n    //********************\n    //* Prepare all of the country data, including onlyCountries, excludeCountries, countryOrder options.\n    _processCountryData() {\n      this.countries = processAllCountries(this.options);\n      const dialRes = processDialCodes(this.countries, this.options);\n      this.dialCodes = dialRes.dialCodes;\n      this.dialCodeMaxLen = dialRes.dialCodeMaxLen;\n      this.dialCodeToIso2Map = dialRes.dialCodeToIso2Map;\n      translateCountryNames(this.countries, this.options);\n      sortCountries(this.countries, this.options);\n      this.countryByIso2 = new Map(this.countries.map((c) => [c.iso2, c]));\n      cacheSearchTokens(this.countries);\n    }\n    //* Generate all of the markup for the plugin: the selected country overlay, and the dropdown.\n    _generateMarkup() {\n      this._prepareTelInput();\n      const wrapper = this._createWrapperAndInsert();\n      this._maybeBuildCountryContainer(wrapper);\n      wrapper.appendChild(this.telInput);\n      this._maybeUpdateInputPaddingAndReveal();\n      this._maybeBuildHiddenInputs(wrapper);\n    }\n    _prepareTelInput() {\n      this.telInput.classList.add(\"iti__tel-input\");\n      if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n        this.telInput.setAttribute(\"autocomplete\", \"off\");\n      }\n    }\n    _createWrapperAndInsert() {\n      const {\n        allowDropdown,\n        showFlags,\n        containerClass,\n        useFullscreenPopup\n      } = this.options;\n      const parentClasses = _Iti._buildClassNames({\n        \"iti\": true,\n        \"iti--allow-dropdown\": allowDropdown,\n        \"iti--show-flags\": showFlags,\n        \"iti--inline-dropdown\": !useFullscreenPopup,\n        [containerClass]: Boolean(containerClass)\n      });\n      const wrapper = createEl(\"div\", { class: parentClasses });\n      this.telInput.parentNode?.insertBefore(wrapper, this.telInput);\n      return wrapper;\n    }\n    _maybeBuildCountryContainer(wrapper) {\n      const {\n        allowDropdown,\n        separateDialCode,\n        showFlags\n      } = this.options;\n      if (allowDropdown || showFlags || separateDialCode) {\n        this.countryContainer = createEl(\n          \"div\",\n          // visibly hidden until we measure it's width to set the input padding correctly\n          { class: \"iti__country-container iti__v-hide\" },\n          wrapper\n        );\n        if (this.showSelectedCountryOnLeft) {\n          this.countryContainer.style.left = \"0px\";\n        } else {\n          this.countryContainer.style.right = \"0px\";\n        }\n        if (allowDropdown) {\n          this.selectedCountry = createEl(\n            \"button\",\n            {\n              type: \"button\",\n              class: \"iti__selected-country\",\n              \"aria-expanded\": \"false\",\n              \"aria-label\": this.options.i18n.noCountrySelected,\n              \"aria-haspopup\": \"dialog\",\n              \"aria-controls\": `iti-${this.id}__dropdown-content`\n            },\n            this.countryContainer\n          );\n          if (this.telInput.disabled) {\n            this.selectedCountry.setAttribute(\"disabled\", \"true\");\n          }\n        } else {\n          this.selectedCountry = createEl(\n            \"div\",\n            { class: \"iti__selected-country\" },\n            this.countryContainer\n          );\n        }\n        const selectedCountryPrimary = createEl(\n          \"div\",\n          { class: \"iti__selected-country-primary\" },\n          this.selectedCountry\n        );\n        this.selectedCountryInner = createEl(\n          \"div\",\n          { class: \"iti__flag\" },\n          selectedCountryPrimary\n        );\n        if (allowDropdown) {\n          this.dropdownArrow = createEl(\n            \"div\",\n            { class: \"iti__arrow\", \"aria-hidden\": \"true\" },\n            selectedCountryPrimary\n          );\n        }\n        if (separateDialCode) {\n          this.selectedDialCode = createEl(\n            \"div\",\n            { class: \"iti__selected-dial-code\", dir: \"ltr\" },\n            this.selectedCountry\n          );\n        }\n        if (allowDropdown) {\n          this._buildDropdownContent();\n        }\n      }\n    }\n    _buildDropdownContent() {\n      const {\n        fixDropdownWidth,\n        useFullscreenPopup,\n        countrySearch,\n        i18n,\n        dropdownContainer,\n        containerClass\n      } = this.options;\n      const extraClasses = fixDropdownWidth ? \"\" : \"iti--flexible-dropdown-width\";\n      this.dropdownContent = createEl(\"div\", {\n        id: `iti-${this.id}__dropdown-content`,\n        class: `iti__dropdown-content iti__hide ${extraClasses}`,\n        role: \"dialog\",\n        \"aria-modal\": \"true\"\n      });\n      if (countrySearch) {\n        this._buildSearchUI();\n      }\n      this.countryList = createEl(\n        \"ul\",\n        {\n          class: \"iti__country-list\",\n          id: `iti-${this.id}__country-listbox`,\n          role: \"listbox\",\n          \"aria-label\": i18n.countryListAriaLabel\n        },\n        this.dropdownContent\n      );\n      this._appendListItems();\n      if (countrySearch) {\n        this._updateSearchResultsA11yText();\n      }\n      if (dropdownContainer) {\n        const dropdownClasses = _Iti._buildClassNames({\n          \"iti\": true,\n          \"iti--container\": true,\n          \"iti--fullscreen-popup\": useFullscreenPopup,\n          \"iti--inline-dropdown\": !useFullscreenPopup,\n          [containerClass]: Boolean(containerClass)\n        });\n        this.dropdown = createEl(\"div\", { class: dropdownClasses });\n        this.dropdown.appendChild(this.dropdownContent);\n      } else {\n        this.countryContainer.appendChild(this.dropdownContent);\n      }\n    }\n    _buildSearchUI() {\n      const { i18n } = this.options;\n      const searchWrapper = createEl(\n        \"div\",\n        { class: \"iti__search-input-wrapper\" },\n        this.dropdownContent\n      );\n      this.searchIcon = createEl(\n        \"span\",\n        {\n          class: \"iti__search-icon\",\n          \"aria-hidden\": \"true\"\n        },\n        searchWrapper\n      );\n      this.searchIcon.innerHTML = `\n      <svg class=\"iti__search-icon-svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" focusable=\"false\" aria-hidden=\"true\">\n        <circle cx=\"11\" cy=\"11\" r=\"7\" />\n        <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\" />\n      </svg>`;\n      this.searchInput = createEl(\n        \"input\",\n        {\n          id: `iti-${this.id}__search-input`,\n          // Chrome says inputs need either a name or an id\n          type: \"search\",\n          class: \"iti__search-input\",\n          placeholder: i18n.searchPlaceholder,\n          // role=combobox + aria-autocomplete=list + aria-activedescendant allows maintaining focus on the search input while allowing users to navigate search results with up/down keyboard keys\n          role: \"combobox\",\n          \"aria-expanded\": \"true\",\n          \"aria-label\": i18n.searchPlaceholder,\n          \"aria-controls\": `iti-${this.id}__country-listbox`,\n          \"aria-autocomplete\": \"list\",\n          \"autocomplete\": \"off\"\n        },\n        searchWrapper\n      );\n      this.searchClearButton = createEl(\n        \"button\",\n        {\n          type: \"button\",\n          class: \"iti__search-clear iti__hide\",\n          \"aria-label\": i18n.clearSearchAriaLabel,\n          tabindex: \"-1\"\n        },\n        searchWrapper\n      );\n      const maskId = `iti-${this.id}-clear-mask`;\n      this.searchClearButton.innerHTML = `\n      <svg class=\"iti__search-clear-svg\" width=\"12\" height=\"12\" viewBox=\"0 0 16 16\" aria-hidden=\"true\" focusable=\"false\">\n        <mask id=\"${maskId}\" maskUnits=\"userSpaceOnUse\">\n          <rect width=\"16\" height=\"16\" fill=\"white\" />\n          <path d=\"M5.2 5.2 L10.8 10.8 M10.8 5.2 L5.2 10.8\" stroke=\"black\" stroke-linecap=\"round\" class=\"iti__search-clear-x\" />\n        </mask>\n        <circle cx=\"8\" cy=\"8\" r=\"8\" class=\"iti__search-clear-bg\" mask=\"url(#${maskId})\" />\n      </svg>`;\n      this.searchResultsA11yText = createEl(\n        \"span\",\n        { class: \"iti__a11y-text\" },\n        this.dropdownContent\n      );\n      this.searchNoResults = createEl(\n        \"div\",\n        {\n          class: \"iti__no-results iti__hide\",\n          \"aria-hidden\": \"true\"\n          // all a11y messaging happens in this.searchResultsA11yText\n        },\n        this.dropdownContent\n      );\n      this.searchNoResults.textContent = i18n.zeroSearchResults;\n    }\n    _maybeUpdateInputPaddingAndReveal() {\n      if (this.countryContainer) {\n        this._updateInputPadding();\n        this.countryContainer.classList.remove(\"iti__v-hide\");\n      }\n    }\n    _maybeBuildHiddenInputs(wrapper) {\n      const { hiddenInput } = this.options;\n      if (hiddenInput) {\n        const telInputName = this.telInput.getAttribute(\"name\") || \"\";\n        const names = hiddenInput(telInputName);\n        if (names.phone) {\n          const existingInput = this.telInput.form?.querySelector(`input[name=\"${names.phone}\"]`);\n          if (existingInput) {\n            this.hiddenInput = existingInput;\n          } else {\n            this.hiddenInput = createEl(\"input\", {\n              type: \"hidden\",\n              name: names.phone\n            });\n            wrapper.appendChild(this.hiddenInput);\n          }\n        }\n        if (names.country) {\n          const existingInput = this.telInput.form?.querySelector(`input[name=\"${names.country}\"]`);\n          if (existingInput) {\n            this.hiddenInputCountry = existingInput;\n          } else {\n            this.hiddenInputCountry = createEl(\"input\", {\n              type: \"hidden\",\n              name: names.country\n            });\n            wrapper.appendChild(this.hiddenInputCountry);\n          }\n        }\n      }\n    }\n    //* For each country: add a country list item <li> to the countryList <ul> container.\n    _appendListItems() {\n      for (let i = 0; i < this.countries.length; i++) {\n        const c = this.countries[i];\n        const extraClass = i === 0 ? \"iti__highlight\" : \"\";\n        const listItem = createEl(\n          \"li\",\n          {\n            id: `iti-${this.id}__item-${c.iso2}`,\n            class: `iti__country ${extraClass}`,\n            tabindex: \"-1\",\n            role: \"option\",\n            \"data-dial-code\": c.dialCode,\n            \"data-country-code\": c.iso2,\n            \"aria-selected\": \"false\"\n          },\n          this.countryList\n        );\n        c.nodeById[this.id] = listItem;\n        let content = \"\";\n        if (this.options.showFlags) {\n          content += `<div class='iti__flag iti__${c.iso2}'></div>`;\n        }\n        content += `<span class='iti__country-name'>${c.name}</span>`;\n        content += `<span class='iti__dial-code' dir='ltr'>+${c.dialCode}</span>`;\n        listItem.insertAdjacentHTML(\"beforeend\", content);\n      }\n    }\n    //* Set the initial state of the input value and the selected country by:\n    //* 1. Extracting a dial code from the given number\n    //* 2. Using explicit initialCountry\n    _setInitialState(overrideAutoCountry = false) {\n      const attributeValue = this.telInput.getAttribute(\"value\");\n      const inputValue = this.telInput.value;\n      const useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n      const val = useAttribute ? attributeValue : inputValue;\n      const dialCode = this._getDialCode(val);\n      const isRegionlessNanpNumber = isRegionlessNanp(val);\n      const { initialCountry, geoIpLookup } = this.options;\n      const isAutoCountry = initialCountry === \"auto\" && geoIpLookup;\n      if (dialCode && !isRegionlessNanpNumber) {\n        this._updateCountryFromNumber(val);\n      } else if (!isAutoCountry || overrideAutoCountry) {\n        const lowerInitialCountry = initialCountry ? initialCountry.toLowerCase() : \"\";\n        if (isIso2(lowerInitialCountry)) {\n          this._setCountry(lowerInitialCountry);\n        } else {\n          if (dialCode && isRegionlessNanpNumber) {\n            this._setCountry(\"us\");\n          } else {\n            this._setCountry(\"\");\n          }\n        }\n      }\n      if (val) {\n        this._updateValFromNumber(val);\n      }\n    }\n    //* Initialise the main event listeners: input keyup, and click selected country.\n    _initListeners() {\n      this._initTelInputListeners();\n      if (this.options.allowDropdown) {\n        this._initDropdownListeners();\n      }\n      if ((this.hiddenInput || this.hiddenInputCountry) && this.telInput.form) {\n        this._initHiddenInputListener();\n      }\n    }\n    //* Update hidden input on form submit.\n    _initHiddenInputListener() {\n      this._handleHiddenInputSubmit = () => {\n        if (this.hiddenInput) {\n          this.hiddenInput.value = this.getNumber();\n        }\n        if (this.hiddenInputCountry) {\n          this.hiddenInputCountry.value = this.getSelectedCountryData().iso2 || \"\";\n        }\n      };\n      this.telInput.form?.addEventListener(\n        \"submit\",\n        this._handleHiddenInputSubmit\n      );\n    }\n    //* initialise the dropdown listeners.\n    _initDropdownListeners() {\n      this._handleLabelClick = (e) => {\n        if (this.dropdownContent.classList.contains(\"iti__hide\")) {\n          this.telInput.focus();\n        } else {\n          e.preventDefault();\n        }\n      };\n      const label = this.telInput.closest(\"label\");\n      if (label) {\n        label.addEventListener(\"click\", this._handleLabelClick);\n      }\n      this._handleClickSelectedCountry = () => {\n        const dropdownClosed = this.dropdownContent.classList.contains(\"iti__hide\");\n        if (dropdownClosed && !this.telInput.disabled && !this.telInput.readOnly) {\n          this._openDropdown();\n        }\n      };\n      this.selectedCountry.addEventListener(\"click\", this._handleClickSelectedCountry);\n      this._handleCountryContainerKeydown = (e) => {\n        const isDropdownHidden = this.dropdownContent.classList.contains(\"iti__hide\");\n        if (isDropdownHidden && [\"ArrowUp\", \"ArrowDown\", \" \", \"Enter\"].includes(e.key)) {\n          e.preventDefault();\n          e.stopPropagation();\n          this._openDropdown();\n        }\n        if (e.key === \"Tab\") {\n          this._closeDropdown();\n        }\n      };\n      this.countryContainer.addEventListener(\n        \"keydown\",\n        this._handleCountryContainerKeydown\n      );\n    }\n    //* Init many requests: utils script / geo ip lookup.\n    _initRequests() {\n      let { loadUtils, initialCountry, geoIpLookup } = this.options;\n      if (loadUtils && !intlTelInput.utils) {\n        this._doAttachUtils = () => {\n          intlTelInput.attachUtils(loadUtils)?.catch(() => {\n          });\n        };\n        if (intlTelInput.documentReady()) {\n          this._doAttachUtils();\n        } else {\n          this._handlePageLoad = () => {\n            this._doAttachUtils();\n          };\n          window.addEventListener(\"load\", this._handlePageLoad);\n        }\n      } else {\n        this.resolveUtilsScriptPromise();\n      }\n      const isAutoCountry = initialCountry === \"auto\" && geoIpLookup;\n      if (isAutoCountry && !this.selectedCountryData.iso2) {\n        this._loadAutoCountry();\n      } else {\n        this.resolveAutoCountryPromise();\n      }\n    }\n    //* Perform the geo ip lookup.\n    _loadAutoCountry() {\n      if (intlTelInput.autoCountry) {\n        this.handleAutoCountry();\n      } else if (!intlTelInput.startedLoadingAutoCountry) {\n        intlTelInput.startedLoadingAutoCountry = true;\n        if (typeof this.options.geoIpLookup === \"function\") {\n          this.options.geoIpLookup(\n            (iso2 = \"\") => {\n              const iso2Lower = iso2.toLowerCase();\n              if (isIso2(iso2Lower)) {\n                intlTelInput.autoCountry = iso2Lower;\n                setTimeout(() => forEachInstance(\"handleAutoCountry\"));\n              } else {\n                this._setInitialState(true);\n                forEachInstance(\"rejectAutoCountryPromise\");\n              }\n            },\n            () => {\n              this._setInitialState(true);\n              forEachInstance(\"rejectAutoCountryPromise\");\n            }\n          );\n        }\n      }\n    }\n    _openDropdownWithPlus() {\n      this._openDropdown();\n      this.searchInput.value = \"+\";\n      this._filterCountries(\"\");\n    }\n    //* Initialize the tel input listeners.\n    _initTelInputListeners() {\n      this._bindInputListener();\n      this._maybeBindKeydownListener();\n      this._maybeBindPasteListener();\n    }\n    _bindInputListener() {\n      const { strictMode, formatAsYouType, separateDialCode, allowDropdown, countrySearch } = this.options;\n      let userOverrideFormatting = false;\n      if (/\\p{L}/u.test(this.telInput.value)) {\n        userOverrideFormatting = true;\n      }\n      this._handleInputEvent = (e) => {\n        if (this.isAndroid && e?.data === \"+\" && separateDialCode && allowDropdown && countrySearch) {\n          const currentCaretPos = this.telInput.selectionStart || 0;\n          const valueBeforeCaret = this.telInput.value.substring(0, currentCaretPos - 1);\n          const valueAfterCaret = this.telInput.value.substring(currentCaretPos);\n          this.telInput.value = valueBeforeCaret + valueAfterCaret;\n          this._openDropdownWithPlus();\n          return;\n        }\n        if (this._updateCountryFromNumber(this.telInput.value)) {\n          this._triggerCountryChange();\n        }\n        const isFormattingChar = e?.data && /[^+0-9]/.test(e.data);\n        const isPaste = e?.inputType === \"insertFromPaste\" && this.telInput.value;\n        if (isFormattingChar || isPaste && !strictMode) {\n          userOverrideFormatting = true;\n        } else if (!/[^+0-9]/.test(this.telInput.value)) {\n          userOverrideFormatting = false;\n        }\n        const isSetNumber = e?.detail && e.detail[\"isSetNumber\"];\n        if (formatAsYouType && !userOverrideFormatting && !isSetNumber) {\n          const currentCaretPos = this.telInput.selectionStart || 0;\n          const valueBeforeCaret = this.telInput.value.substring(0, currentCaretPos);\n          const relevantCharsBeforeCaret = valueBeforeCaret.replace(/[^+0-9]/g, \"\").length;\n          const isDeleteForwards = e?.inputType === \"deleteContentForward\";\n          const fullNumber = this._getFullNumber();\n          const formattedValue = formatNumberAsYouType(\n            fullNumber,\n            this.telInput.value,\n            intlTelInput.utils,\n            this.selectedCountryData,\n            this.options.separateDialCode\n          );\n          const newCaretPos = translateCursorPosition(relevantCharsBeforeCaret, formattedValue, currentCaretPos, isDeleteForwards);\n          this.telInput.value = formattedValue;\n          this.telInput.setSelectionRange(newCaretPos, newCaretPos);\n        }\n      };\n      this.telInput.addEventListener(\"input\", this._handleInputEvent);\n    }\n    _maybeBindKeydownListener() {\n      const { strictMode, separateDialCode, allowDropdown, countrySearch } = this.options;\n      if (strictMode || separateDialCode) {\n        this._handleKeydownEvent = (e) => {\n          if (e.key && e.key.length === 1 && !e.altKey && !e.ctrlKey && !e.metaKey) {\n            if (separateDialCode && allowDropdown && countrySearch && e.key === \"+\") {\n              e.preventDefault();\n              this._openDropdownWithPlus();\n              return;\n            }\n            if (strictMode) {\n              const value = this.telInput.value;\n              const alreadyHasPlus = value.charAt(0) === \"+\";\n              const isInitialPlus = !alreadyHasPlus && this.telInput.selectionStart === 0 && e.key === \"+\";\n              const isNumeric = /^[0-9]$/.test(e.key);\n              const isAllowedChar = separateDialCode ? isNumeric : isInitialPlus || isNumeric;\n              const newValue = value.slice(0, this.telInput.selectionStart) + e.key + value.slice(this.telInput.selectionEnd);\n              const newFullNumber = this._getFullNumber(newValue);\n              const coreNumber = intlTelInput.utils.getCoreNumber(newFullNumber, this.selectedCountryData.iso2);\n              const hasExceededMaxLength = this.maxCoreNumberLength && coreNumber.length > this.maxCoreNumberLength;\n              const newCountry = this._getNewCountryFromNumber(newFullNumber);\n              const isChangingDialCode = newCountry !== null;\n              if (!isAllowedChar || hasExceededMaxLength && !isChangingDialCode && !isInitialPlus) {\n                e.preventDefault();\n              }\n            }\n          }\n        };\n        this.telInput.addEventListener(\"keydown\", this._handleKeydownEvent);\n      }\n    }\n    _maybeBindPasteListener() {\n      if (this.options.strictMode) {\n        this._handlePasteEvent = (e) => {\n          e.preventDefault();\n          const input = this.telInput;\n          const selStart = input.selectionStart;\n          const selEnd = input.selectionEnd;\n          const before = input.value.slice(0, selStart);\n          const after = input.value.slice(selEnd);\n          const iso2 = this.selectedCountryData.iso2;\n          const pasted = e.clipboardData.getData(\"text\");\n          const initialCharSelected = selStart === 0 && selEnd > 0;\n          const allowLeadingPlus = !input.value.startsWith(\"+\") || initialCharSelected;\n          const allowedChars = pasted.replace(/[^0-9+]/g, \"\");\n          const hasLeadingPlus = allowedChars.startsWith(\"+\");\n          const numerics = allowedChars.replace(/\\+/g, \"\");\n          const sanitised = hasLeadingPlus && allowLeadingPlus ? `+${numerics}` : numerics;\n          let newVal = before + sanitised + after;\n          let coreNumber = intlTelInput.utils.getCoreNumber(newVal, iso2);\n          while (coreNumber.length === 0 && newVal.length > 0) {\n            newVal = newVal.slice(0, -1);\n            coreNumber = intlTelInput.utils.getCoreNumber(newVal, iso2);\n          }\n          if (!coreNumber) {\n            return;\n          }\n          if (this.maxCoreNumberLength && coreNumber.length > this.maxCoreNumberLength) {\n            if (input.selectionEnd === input.value.length) {\n              const trimLength = coreNumber.length - this.maxCoreNumberLength;\n              newVal = newVal.slice(0, newVal.length - trimLength);\n            } else {\n              return;\n            }\n          }\n          input.value = newVal;\n          const caretPos = selStart + sanitised.length;\n          input.setSelectionRange(caretPos, caretPos);\n          input.dispatchEvent(new InputEvent(\"input\", { bubbles: true }));\n        };\n        this.telInput.addEventListener(\"paste\", this._handlePasteEvent);\n      }\n    }\n    //* Adhere to the input's maxlength attr.\n    _cap(number) {\n      const max = parseInt(this.telInput.getAttribute(\"maxlength\") || \"\", 10);\n      return max && number.length > max ? number.substring(0, max) : number;\n    }\n    //* Trigger a custom event on the input.\n    _trigger(name, detailProps = {}) {\n      const e = new CustomEvent(name, {\n        bubbles: true,\n        cancelable: true,\n        detail: detailProps\n      });\n      this.telInput.dispatchEvent(e);\n    }\n    //* Open the dropdown.\n    _openDropdown() {\n      const { fixDropdownWidth, countrySearch } = this.options;\n      if (fixDropdownWidth) {\n        this.dropdownContent.style.width = `${this.telInput.offsetWidth}px`;\n      }\n      this.dropdownContent.classList.remove(\"iti__hide\");\n      this.selectedCountry.setAttribute(\"aria-expanded\", \"true\");\n      this._setDropdownPosition();\n      if (countrySearch) {\n        const firstCountryItem = this.countryList.firstElementChild;\n        if (firstCountryItem) {\n          this._highlightListItem(firstCountryItem, false);\n          this.countryList.scrollTop = 0;\n        }\n        this.searchInput.focus();\n      }\n      this._bindDropdownListeners();\n      this.dropdownArrow.classList.add(\"iti__arrow--up\");\n      this._trigger(\"open:countrydropdown\");\n    }\n    //* Set the dropdown position\n    _setDropdownPosition() {\n      if (this.options.dropdownContainer) {\n        this.options.dropdownContainer.appendChild(this.dropdown);\n      }\n      if (!this.options.useFullscreenPopup) {\n        const inputPosRelativeToVP = this.telInput.getBoundingClientRect();\n        const inputHeight = this.telInput.offsetHeight;\n        if (this.options.dropdownContainer) {\n          this.dropdown.style.top = `${inputPosRelativeToVP.top + inputHeight}px`;\n          this.dropdown.style.left = `${inputPosRelativeToVP.left}px`;\n          this._handleWindowScroll = () => this._closeDropdown();\n          window.addEventListener(\"scroll\", this._handleWindowScroll);\n        }\n      }\n    }\n    //* We only bind dropdown listeners when the dropdown is open.\n    _bindDropdownListeners() {\n      this._handleMouseoverCountryList = (e) => {\n        const listItem = e.target?.closest(\".iti__country\");\n        if (listItem) {\n          this._highlightListItem(listItem, false);\n        }\n      };\n      this.countryList.addEventListener(\n        \"mouseover\",\n        this._handleMouseoverCountryList\n      );\n      this._handleClickCountryList = (e) => {\n        const listItem = e.target?.closest(\".iti__country\");\n        if (listItem) {\n          this._selectListItem(listItem);\n        }\n      };\n      this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n      this._handleClickOffToClose = (e) => {\n        const target = e.target;\n        const clickedInsideDropdown = !!target.closest(`#iti-${this.id}__dropdown-content`);\n        if (!clickedInsideDropdown) {\n          this._closeDropdown();\n        }\n      };\n      setTimeout(() => {\n        document.documentElement.addEventListener(\n          \"click\",\n          this._handleClickOffToClose\n        );\n      }, 0);\n      let query = \"\";\n      let queryTimer = null;\n      this._handleKeydownOnDropdown = (e) => {\n        if ([\"ArrowUp\", \"ArrowDown\", \"Enter\", \"Escape\"].includes(e.key)) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\") {\n            this._handleUpDownKey(e.key);\n          } else if (e.key === \"Enter\") {\n            this._handleEnterKey();\n          } else if (e.key === \"Escape\") {\n            this._closeDropdown();\n          }\n        }\n        if (!this.options.countrySearch && /^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n          e.stopPropagation();\n          if (queryTimer) {\n            clearTimeout(queryTimer);\n          }\n          query += e.key.toLowerCase();\n          this._searchForCountry(query);\n          queryTimer = setTimeout(() => {\n            query = \"\";\n          }, 1e3);\n        }\n      };\n      document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n      if (this.options.countrySearch) {\n        const doFilter = () => {\n          const inputQuery = this.searchInput.value.trim();\n          this._filterCountries(inputQuery);\n          if (this.searchInput.value) {\n            this.searchClearButton.classList.remove(\"iti__hide\");\n          } else {\n            this.searchClearButton.classList.add(\"iti__hide\");\n          }\n        };\n        let keyupTimer = null;\n        this._handleSearchChange = () => {\n          if (keyupTimer) {\n            clearTimeout(keyupTimer);\n          }\n          keyupTimer = setTimeout(() => {\n            doFilter();\n            keyupTimer = null;\n          }, 100);\n        };\n        this.searchInput.addEventListener(\"input\", this._handleSearchChange);\n        this._handleSearchClear = () => {\n          this.searchInput.value = \"\";\n          this.searchInput.focus();\n          doFilter();\n        };\n        this.searchClearButton.addEventListener(\"click\", this._handleSearchClear);\n      }\n    }\n    //* Hidden search (countrySearch disabled): Find the first list item whose name starts with the query string.\n    _searchForCountry(query) {\n      for (const c of this.countries) {\n        const startsWith = c.name.substring(0, query.length).toLowerCase() === query;\n        if (startsWith) {\n          const listItem = c.nodeById[this.id];\n          this._highlightListItem(listItem, false);\n          this._scrollTo(listItem);\n          break;\n        }\n      }\n    }\n    //* Country search enabled: Filter the countries according to the search query.\n    _filterCountries(query) {\n      this.countryList.innerHTML = \"\";\n      let matchedCountries;\n      if (query === \"\") {\n        matchedCountries = this.countries;\n      } else {\n        matchedCountries = this._getMatchedCountries(query);\n      }\n      let noCountriesAddedYet = true;\n      for (const c of matchedCountries) {\n        const listItem = c.nodeById[this.id];\n        if (listItem) {\n          this.countryList.appendChild(listItem);\n          if (noCountriesAddedYet) {\n            this._highlightListItem(listItem, false);\n            noCountriesAddedYet = false;\n          }\n        }\n      }\n      if (noCountriesAddedYet) {\n        this._highlightListItem(null, false);\n        if (this.searchNoResults) {\n          this.searchNoResults.classList.remove(\"iti__hide\");\n        }\n      } else if (this.searchNoResults) {\n        this.searchNoResults.classList.add(\"iti__hide\");\n      }\n      this.countryList.scrollTop = 0;\n      this._updateSearchResultsA11yText();\n    }\n    _getMatchedCountries(query) {\n      const normalisedQuery = normaliseString(query);\n      const iso2Matches = [];\n      const nameStartWith = [];\n      const nameContains = [];\n      const dialCodeMatches = [];\n      const dialCodeContains = [];\n      const initialsMatches = [];\n      for (const c of this.countries) {\n        if (c.iso2 === normalisedQuery) {\n          iso2Matches.push(c);\n        } else if (c.normalisedName.startsWith(normalisedQuery)) {\n          nameStartWith.push(c);\n        } else if (c.normalisedName.includes(normalisedQuery)) {\n          nameContains.push(c);\n        } else if (normalisedQuery === c.dialCode || normalisedQuery === c.dialCodePlus) {\n          dialCodeMatches.push(c);\n        } else if (c.dialCodePlus.includes(normalisedQuery)) {\n          dialCodeContains.push(c);\n        } else if (c.initials.includes(normalisedQuery)) {\n          initialsMatches.push(c);\n        }\n      }\n      return [\n        ...iso2Matches.sort((a, b) => a.priority - b.priority),\n        ...nameStartWith.sort((a, b) => a.priority - b.priority),\n        ...nameContains.sort((a, b) => a.priority - b.priority),\n        ...dialCodeMatches.sort((a, b) => a.priority - b.priority),\n        ...dialCodeContains.sort((a, b) => a.priority - b.priority),\n        ...initialsMatches.sort((a, b) => a.priority - b.priority)\n      ];\n    }\n    //* Update search results text (for a11y).\n    _updateSearchResultsA11yText() {\n      const { i18n } = this.options;\n      const count = this.countryList.childElementCount;\n      let searchText;\n      if (count === 0) {\n        searchText = i18n.zeroSearchResults;\n      } else {\n        if (i18n.searchResultsText) {\n          searchText = i18n.searchResultsText(count);\n        } else if (count === 1) {\n          searchText = i18n.oneSearchResult;\n        } else {\n          searchText = i18n.multipleSearchResults.replace(\"${count}\", count.toString());\n        }\n      }\n      this.searchResultsA11yText.textContent = searchText;\n    }\n    //* Highlight the next/prev item in the list (and ensure it is visible).\n    _handleUpDownKey(key) {\n      let next = key === \"ArrowUp\" ? this.highlightedItem?.previousElementSibling : this.highlightedItem?.nextElementSibling;\n      if (!next && this.countryList.childElementCount > 1) {\n        next = key === \"ArrowUp\" ? this.countryList.lastElementChild : this.countryList.firstElementChild;\n      }\n      if (next) {\n        this._scrollTo(next);\n        this._highlightListItem(next, false);\n      }\n    }\n    //* Select the currently highlighted item.\n    _handleEnterKey() {\n      if (this.highlightedItem) {\n        this._selectListItem(this.highlightedItem);\n      }\n    }\n    //* Update the input's value to the given val (format first if possible)\n    //* NOTE: this is called from _setInitialState, handleUtils and setNumber.\n    _updateValFromNumber(fullNumber) {\n      let number = fullNumber;\n      if (this.options.formatOnDisplay && intlTelInput.utils && this.selectedCountryData) {\n        const useNational = this.options.nationalMode || number.charAt(0) !== \"+\" && !this.options.separateDialCode;\n        const { NATIONAL, INTERNATIONAL } = intlTelInput.utils.numberFormat;\n        const format = useNational ? NATIONAL : INTERNATIONAL;\n        number = intlTelInput.utils.formatNumber(\n          number,\n          this.selectedCountryData.iso2,\n          format\n        );\n      }\n      number = this._beforeSetNumber(number);\n      this.telInput.value = number;\n    }\n    //* Check if need to select a new country based on the given number\n    //* Note: called from _setInitialState, keyup handler, setNumber.\n    _updateCountryFromNumber(fullNumber) {\n      const iso2 = this._getNewCountryFromNumber(fullNumber);\n      if (iso2 !== null) {\n        return this._setCountry(iso2);\n      }\n      return false;\n    }\n    _ensureHasDialCode(number) {\n      const { dialCode, nationalPrefix } = this.selectedCountryData;\n      const alreadyHasPlus = number.charAt(0) === \"+\";\n      if (alreadyHasPlus || !dialCode) {\n        return number;\n      }\n      const hasPrefix = nationalPrefix && number.charAt(0) === nationalPrefix && !this.options.separateDialCode;\n      const cleanNumber = hasPrefix ? number.substring(1) : number;\n      return `+${dialCode}${cleanNumber}`;\n    }\n    // Get the country ISO2 code from the given number\n    // BUT ONLY IF ITS CHANGED FROM THE CURRENTLY SELECTED COUNTRY\n    // NOTE: consider refactoring this to be more clear\n    _getNewCountryFromNumber(fullNumber) {\n      const plusIndex = fullNumber.indexOf(\"+\");\n      let number = plusIndex ? fullNumber.substring(plusIndex) : fullNumber;\n      const selectedIso2 = this.selectedCountryData.iso2;\n      const selectedDialCode = this.selectedCountryData.dialCode;\n      number = this._ensureHasDialCode(number);\n      const dialCodeMatch = this._getDialCode(number, true);\n      const numeric = getNumeric(number);\n      if (dialCodeMatch) {\n        const dialCodeMatchNumeric = getNumeric(dialCodeMatch);\n        const iso2Codes = this.dialCodeToIso2Map[dialCodeMatchNumeric];\n        if (iso2Codes.length === 1) {\n          if (iso2Codes[0] === selectedIso2) {\n            return null;\n          }\n          return iso2Codes[0];\n        }\n        if (!selectedIso2 && this.defaultCountry && iso2Codes.includes(this.defaultCountry)) {\n          return this.defaultCountry;\n        }\n        const isRegionlessNanpNumber = selectedDialCode === \"1\" && isRegionlessNanp(numeric);\n        if (isRegionlessNanpNumber) {\n          return null;\n        }\n        const hasAreaCodesButNoneMatched = this.selectedCountryData.areaCodes && numeric.length > dialCodeMatchNumeric.length;\n        const alreadySelected = selectedIso2 && iso2Codes.includes(selectedIso2) && !hasAreaCodesButNoneMatched;\n        if (!alreadySelected) {\n          return iso2Codes[0];\n        }\n      } else if (number.charAt(0) === \"+\" && numeric.length) {\n        return \"\";\n      } else if ((!number || number === \"+\") && !selectedIso2) {\n        return this.defaultCountry;\n      }\n      return null;\n    }\n    //* Remove highlighting from other list items and highlight the given item.\n    _highlightListItem(listItem, shouldFocus) {\n      const prevItem = this.highlightedItem;\n      if (prevItem) {\n        prevItem.classList.remove(\"iti__highlight\");\n        prevItem.setAttribute(\"aria-selected\", \"false\");\n      }\n      this.highlightedItem = listItem;\n      if (this.highlightedItem) {\n        this.highlightedItem.classList.add(\"iti__highlight\");\n        this.highlightedItem.setAttribute(\"aria-selected\", \"true\");\n        if (this.options.countrySearch) {\n          const activeDescendant = this.highlightedItem.getAttribute(\"id\") || \"\";\n          this.searchInput.setAttribute(\"aria-activedescendant\", activeDescendant);\n        }\n      }\n      if (shouldFocus) {\n        this.highlightedItem.focus();\n      }\n    }\n    //* Update the selected country, dial code (if separateDialCode), placeholder, title, and active list item.\n    //* Note: called from _setInitialState, _updateCountryFromNumber, _selectListItem, setCountry.\n    _setCountry(iso2) {\n      const { separateDialCode, showFlags, i18n } = this.options;\n      const prevIso2 = this.selectedCountryData.iso2 || \"\";\n      this.selectedCountryData = iso2 ? this.countryByIso2.get(iso2) : {};\n      if (this.selectedCountryData.iso2) {\n        this.defaultCountry = this.selectedCountryData.iso2;\n      }\n      if (this.selectedCountry) {\n        const flagClass = iso2 && showFlags ? `iti__flag iti__${iso2}` : \"iti__flag iti__globe\";\n        let ariaLabel, title;\n        if (iso2) {\n          const { name, dialCode } = this.selectedCountryData;\n          title = name;\n          ariaLabel = i18n.selectedCountryAriaLabel.replace(\"${countryName}\", name).replace(\"${dialCode}\", `+${dialCode}`);\n        } else {\n          title = i18n.noCountrySelected;\n          ariaLabel = i18n.noCountrySelected;\n        }\n        this.selectedCountryInner.className = flagClass;\n        this.selectedCountry.setAttribute(\"title\", title);\n        this.selectedCountry.setAttribute(\"aria-label\", ariaLabel);\n      }\n      if (separateDialCode) {\n        const dialCode = this.selectedCountryData.dialCode ? `+${this.selectedCountryData.dialCode}` : \"\";\n        this.selectedDialCode.innerHTML = dialCode;\n        this._updateInputPadding();\n      }\n      this._updatePlaceholder();\n      this._updateMaxLength();\n      return prevIso2 !== iso2;\n    }\n    //* Update the input padding to make space for the selected country/dial code.\n    _updateInputPadding() {\n      if (this.selectedCountry) {\n        const saneDefaultWidth = this.options.separateDialCode ? 78 : 42;\n        const selectedCountryWidth = this.selectedCountry.offsetWidth || this._getHiddenSelectedCountryWidth() || saneDefaultWidth;\n        const inputPadding = selectedCountryWidth + 6;\n        if (this.showSelectedCountryOnLeft) {\n          this.telInput.style.paddingLeft = `${inputPadding}px`;\n        } else {\n          this.telInput.style.paddingRight = `${inputPadding}px`;\n        }\n      }\n    }\n    //* Update the maximum valid number length for the currently selected country.\n    _updateMaxLength() {\n      const { strictMode, placeholderNumberType, validationNumberTypes } = this.options;\n      const { iso2 } = this.selectedCountryData;\n      if (strictMode && intlTelInput.utils) {\n        if (iso2) {\n          const numberType = intlTelInput.utils.numberType[placeholderNumberType];\n          let exampleNumber = intlTelInput.utils.getExampleNumber(\n            iso2,\n            false,\n            numberType,\n            true\n          );\n          let validNumber = exampleNumber;\n          while (intlTelInput.utils.isPossibleNumber(exampleNumber, iso2, validationNumberTypes)) {\n            validNumber = exampleNumber;\n            exampleNumber += \"0\";\n          }\n          const coreNumber = intlTelInput.utils.getCoreNumber(validNumber, iso2);\n          this.maxCoreNumberLength = coreNumber.length;\n          if (iso2 === \"by\") {\n            this.maxCoreNumberLength = coreNumber.length + 1;\n          }\n        } else {\n          this.maxCoreNumberLength = null;\n        }\n      }\n    }\n    //* When input is in a hidden container during init, we cannot calculate the selected country width.\n    //* Fix: clone the markup, make it invisible, add it to the end of the DOM, and then measure it's width.\n    //* To get the right styling to apply, all we need is a shallow clone of the container,\n    //* and then to inject a deep clone of the selectedCountry element.\n    _getHiddenSelectedCountryWidth() {\n      if (this.telInput.parentNode) {\n        let body;\n        try {\n          body = window.top.document.body;\n        } catch (e) {\n          body = document.body;\n        }\n        const containerClone = this.telInput.parentNode.cloneNode(false);\n        containerClone.style.visibility = \"hidden\";\n        body.appendChild(containerClone);\n        const countryContainerClone = this.countryContainer.cloneNode();\n        containerClone.appendChild(countryContainerClone);\n        const selectedCountryClone = this.selectedCountry.cloneNode(true);\n        countryContainerClone.appendChild(selectedCountryClone);\n        const width = selectedCountryClone.offsetWidth;\n        body.removeChild(containerClone);\n        return width;\n      }\n      return 0;\n    }\n    //* Update the input placeholder to an example number from the currently selected country.\n    _updatePlaceholder() {\n      const {\n        autoPlaceholder,\n        placeholderNumberType,\n        nationalMode,\n        customPlaceholder\n      } = this.options;\n      const shouldSetPlaceholder = autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && autoPlaceholder === \"polite\";\n      if (intlTelInput.utils && shouldSetPlaceholder) {\n        const numberType = intlTelInput.utils.numberType[placeholderNumberType];\n        let placeholder = this.selectedCountryData.iso2 ? intlTelInput.utils.getExampleNumber(\n          this.selectedCountryData.iso2,\n          nationalMode,\n          numberType\n        ) : \"\";\n        placeholder = this._beforeSetNumber(placeholder);\n        if (typeof customPlaceholder === \"function\") {\n          placeholder = customPlaceholder(placeholder, this.selectedCountryData);\n        }\n        this.telInput.setAttribute(\"placeholder\", placeholder);\n      }\n    }\n    //* Called when the user selects a list item from the dropdown.\n    _selectListItem(listItem) {\n      const iso2 = listItem.getAttribute(\"data-country-code\");\n      const countryChanged = this._setCountry(iso2);\n      this._closeDropdown();\n      const dialCode = listItem.getAttribute(\"data-dial-code\");\n      this._updateDialCode(dialCode);\n      if (this.options.formatOnDisplay) {\n        this._updateValFromNumber(this.telInput.value);\n      }\n      this.telInput.focus();\n      if (countryChanged) {\n        this._triggerCountryChange();\n      }\n    }\n    //* Close the dropdown and unbind any listeners.\n    _closeDropdown() {\n      this.dropdownContent.classList.add(\"iti__hide\");\n      this.selectedCountry.setAttribute(\"aria-expanded\", \"false\");\n      if (this.highlightedItem) {\n        this.highlightedItem.setAttribute(\"aria-selected\", \"false\");\n      }\n      if (this.options.countrySearch) {\n        this.searchInput.removeAttribute(\"aria-activedescendant\");\n      }\n      this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n      if (this.options.countrySearch) {\n        this.searchInput.removeEventListener(\"input\", this._handleSearchChange);\n        this.searchClearButton.removeEventListener(\"click\", this._handleSearchClear);\n      }\n      document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n      document.documentElement.removeEventListener(\n        \"click\",\n        this._handleClickOffToClose\n      );\n      this.countryList.removeEventListener(\n        \"mouseover\",\n        this._handleMouseoverCountryList\n      );\n      this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n      if (this.options.dropdownContainer) {\n        if (!this.options.useFullscreenPopup) {\n          window.removeEventListener(\"scroll\", this._handleWindowScroll);\n        }\n        if (this.dropdown.parentNode) {\n          this.dropdown.parentNode.removeChild(this.dropdown);\n        }\n      }\n      this._trigger(\"close:countrydropdown\");\n    }\n    //* Check if an element is visible within it's container, else scroll until it is.\n    _scrollTo(element) {\n      const container = this.countryList;\n      const scrollTop = document.documentElement.scrollTop;\n      const containerHeight = container.offsetHeight;\n      const containerTop = container.getBoundingClientRect().top + scrollTop;\n      const containerBottom = containerTop + containerHeight;\n      const elementHeight = element.offsetHeight;\n      const elementTop = element.getBoundingClientRect().top + scrollTop;\n      const elementBottom = elementTop + elementHeight;\n      const newScrollTop = elementTop - containerTop + container.scrollTop;\n      if (elementTop < containerTop) {\n        container.scrollTop = newScrollTop;\n      } else if (elementBottom > containerBottom) {\n        const heightDifference = containerHeight - elementHeight;\n        container.scrollTop = newScrollTop - heightDifference;\n      }\n    }\n    //* Replace any existing dial code with the new one\n    //* Note: called from _selectListItem and setCountry\n    _updateDialCode(newDialCodeBare) {\n      const inputVal = this.telInput.value;\n      const newDialCode = `+${newDialCodeBare}`;\n      let newNumber;\n      if (inputVal.charAt(0) === \"+\") {\n        const prevDialCode = this._getDialCode(inputVal);\n        if (prevDialCode) {\n          newNumber = inputVal.replace(prevDialCode, newDialCode);\n        } else {\n          newNumber = newDialCode;\n        }\n        this.telInput.value = newNumber;\n      }\n    }\n    //* Try and extract a valid international dial code from a full telephone number.\n    //* Note: returns the raw string inc plus character and any whitespace/dots etc.\n    _getDialCode(number, includeAreaCode) {\n      let dialCode = \"\";\n      if (number.charAt(0) === \"+\") {\n        let numericChars = \"\";\n        for (let i = 0; i < number.length; i++) {\n          const c = number.charAt(i);\n          if (/[0-9]/.test(c)) {\n            numericChars += c;\n            if (includeAreaCode) {\n              if (this.dialCodeToIso2Map[numericChars]) {\n                dialCode = number.substring(0, i + 1);\n              }\n            } else {\n              if (this.dialCodes.has(numericChars)) {\n                dialCode = number.substring(0, i + 1);\n                break;\n              }\n            }\n            if (numericChars.length === this.dialCodeMaxLen) {\n              break;\n            }\n          }\n        }\n      }\n      return dialCode;\n    }\n    //* Get the input val, adding the dial code if separateDialCode is enabled.\n    _getFullNumber(overrideVal) {\n      const val = overrideVal || this.telInput.value.trim();\n      const { dialCode } = this.selectedCountryData;\n      let prefix;\n      const numericVal = getNumeric(val);\n      if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n        prefix = `+${dialCode}`;\n      } else {\n        prefix = \"\";\n      }\n      return prefix + val;\n    }\n    //* Remove the dial code if separateDialCode is enabled also cap the length if the input has a maxlength attribute\n    _beforeSetNumber(fullNumber) {\n      const dialCode = this._getDialCode(fullNumber);\n      const number = beforeSetNumber(\n        fullNumber,\n        dialCode,\n        this.options.separateDialCode,\n        this.selectedCountryData\n      );\n      return this._cap(number);\n    }\n    //* Trigger the 'countrychange' event.\n    _triggerCountryChange() {\n      this._trigger(\"countrychange\");\n    }\n    //**************************\n    //*  SECRET PUBLIC METHODS\n    //**************************\n    //* This is called when the geoip call returns.\n    handleAutoCountry() {\n      if (this.options.initialCountry === \"auto\" && intlTelInput.autoCountry) {\n        this.defaultCountry = intlTelInput.autoCountry;\n        const hasSelectedCountryOrGlobe = this.selectedCountryData.iso2 || this.selectedCountryInner.classList.contains(\"iti__globe\");\n        if (!hasSelectedCountryOrGlobe) {\n          this.setCountry(this.defaultCountry);\n        }\n        this.resolveAutoCountryPromise();\n      }\n    }\n    //* This is called when the utils request completes.\n    handleUtils() {\n      if (intlTelInput.utils) {\n        if (this.telInput.value) {\n          this._updateValFromNumber(this.telInput.value);\n        }\n        if (this.selectedCountryData.iso2) {\n          this._updatePlaceholder();\n          this._updateMaxLength();\n        }\n      }\n      this.resolveUtilsScriptPromise();\n    }\n    //********************\n    //*  PUBLIC METHODS\n    //********************\n    //* Remove plugin.\n    destroy() {\n      this.telInput.iti = void 0;\n      const { allowDropdown, separateDialCode } = this.options;\n      if (allowDropdown) {\n        this._closeDropdown();\n        this.selectedCountry.removeEventListener(\n          \"click\",\n          this._handleClickSelectedCountry\n        );\n        this.countryContainer.removeEventListener(\n          \"keydown\",\n          this._handleCountryContainerKeydown\n        );\n        const label = this.telInput.closest(\"label\");\n        if (label) {\n          label.removeEventListener(\"click\", this._handleLabelClick);\n        }\n      }\n      const { form } = this.telInput;\n      if (this._handleHiddenInputSubmit && form) {\n        form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n      }\n      this.telInput.removeEventListener(\"input\", this._handleInputEvent);\n      if (this._handleKeydownEvent) {\n        this.telInput.removeEventListener(\"keydown\", this._handleKeydownEvent);\n      }\n      if (this._handlePasteEvent) {\n        this.telInput.removeEventListener(\"paste\", this._handlePasteEvent);\n      }\n      if (this._handlePageLoad) {\n        window.removeEventListener(\"load\", this._handlePageLoad);\n      }\n      this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n      if (separateDialCode) {\n        if (this.isRTL) {\n          this.telInput.style.paddingRight = this.originalPaddingRight;\n        } else {\n          this.telInput.style.paddingLeft = this.originalPaddingLeft;\n        }\n      }\n      const wrapper = this.telInput.parentNode;\n      wrapper?.parentNode?.insertBefore(this.telInput, wrapper);\n      wrapper?.parentNode?.removeChild(wrapper);\n      delete intlTelInput.instances[this.id];\n    }\n    //* Get the extension from the current number.\n    getExtension() {\n      if (intlTelInput.utils) {\n        return intlTelInput.utils.getExtension(\n          this._getFullNumber(),\n          this.selectedCountryData.iso2\n        );\n      }\n      return \"\";\n    }\n    //* Format the number to the given format.\n    getNumber(format) {\n      if (intlTelInput.utils) {\n        const { iso2 } = this.selectedCountryData;\n        return intlTelInput.utils.formatNumber(\n          this._getFullNumber(),\n          iso2,\n          format\n        );\n      }\n      return \"\";\n    }\n    //* Get the type of the entered number e.g. landline/mobile.\n    getNumberType() {\n      if (intlTelInput.utils) {\n        return intlTelInput.utils.getNumberType(\n          this._getFullNumber(),\n          this.selectedCountryData.iso2\n        );\n      }\n      return -99;\n    }\n    //* Get the country data for the currently selected country.\n    getSelectedCountryData() {\n      return this.selectedCountryData;\n    }\n    //* Get the validation error.\n    getValidationError() {\n      if (intlTelInput.utils) {\n        const { iso2 } = this.selectedCountryData;\n        return intlTelInput.utils.getValidationError(this._getFullNumber(), iso2);\n      }\n      return -99;\n    }\n    //* Validate the input val (with precise=false)\n    isValidNumber() {\n      return this._validateNumber(false);\n    }\n    //* Validate the input val (with precise=true)\n    isValidNumberPrecise() {\n      return this._validateNumber(true);\n    }\n    _utilsIsPossibleNumber(val) {\n      return intlTelInput.utils ? intlTelInput.utils.isPossibleNumber(val, this.selectedCountryData.iso2, this.options.validationNumberTypes) : null;\n    }\n    //* Shared internal validation logic to handle alpha character extension rules.\n    _validateNumber(precise) {\n      if (!this.selectedCountryData.iso2) {\n        return false;\n      }\n      const testValidity = (s) => precise ? this._utilsIsValidNumber(s) : this._utilsIsPossibleNumber(s);\n      const val = this._getFullNumber();\n      const alphaCharPosition = val.search(/\\p{L}/u);\n      const hasAlphaChar = alphaCharPosition > -1;\n      if (hasAlphaChar && !this.options.allowPhonewords) {\n        const beforeAlphaChar = val.substring(0, alphaCharPosition);\n        const beforeAlphaIsValid = testValidity(beforeAlphaChar);\n        const isValid = testValidity(val);\n        return beforeAlphaIsValid && isValid;\n      }\n      return testValidity(val);\n    }\n    _utilsIsValidNumber(val) {\n      return intlTelInput.utils ? intlTelInput.utils.isValidNumber(val, this.selectedCountryData.iso2, this.options.validationNumberTypes) : null;\n    }\n    //* Update the selected country, and update the input val accordingly.\n    setCountry(iso2) {\n      const iso2Lower = iso2?.toLowerCase();\n      if (!isIso2(iso2Lower)) {\n        throw new Error(`Invalid country code: '${iso2Lower}'`);\n      }\n      const currentCountry = this.selectedCountryData.iso2;\n      const isCountryChange = iso2 && iso2Lower !== currentCountry || !iso2 && currentCountry;\n      if (isCountryChange) {\n        this._setCountry(iso2Lower);\n        this._updateDialCode(this.selectedCountryData.dialCode);\n        if (this.options.formatOnDisplay) {\n          this._updateValFromNumber(this.telInput.value);\n        }\n        this._triggerCountryChange();\n      }\n    }\n    //* Set the input value and update the country.\n    setNumber(number) {\n      const countryChanged = this._updateCountryFromNumber(number);\n      this._updateValFromNumber(number);\n      if (countryChanged) {\n        this._triggerCountryChange();\n      }\n      this._trigger(\"input\", { isSetNumber: true });\n    }\n    //* Set the placeholder number typ\n    setPlaceholderNumberType(type) {\n      this.options.placeholderNumberType = type;\n      this._updatePlaceholder();\n    }\n    setDisabled(disabled) {\n      this.telInput.disabled = disabled;\n      if (disabled) {\n        this.selectedCountry.setAttribute(\"disabled\", \"true\");\n      } else {\n        this.selectedCountry.removeAttribute(\"disabled\");\n      }\n    }\n  };\n  var attachUtils = (source) => {\n    if (!intlTelInput.utils && !intlTelInput.startedLoadingUtilsScript) {\n      let loadCall;\n      if (typeof source === \"function\") {\n        try {\n          loadCall = Promise.resolve(source());\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      } else {\n        return Promise.reject(new TypeError(`The argument passed to attachUtils must be a function that returns a promise for the utilities module, not ${typeof source}`));\n      }\n      intlTelInput.startedLoadingUtilsScript = true;\n      return loadCall.then((module) => {\n        const utils = module?.default;\n        if (!utils || typeof utils !== \"object\") {\n          throw new TypeError(\"The loader function passed to attachUtils did not resolve to a module object with utils as its default export.\");\n        }\n        intlTelInput.utils = utils;\n        forEachInstance(\"handleUtils\");\n        return true;\n      }).catch((error) => {\n        forEachInstance(\"rejectUtilsScriptPromise\", error);\n        throw error;\n      });\n    }\n    return null;\n  };\n  var intlTelInput = Object.assign(\n    (input, options) => {\n      const iti = new Iti(input, options);\n      iti._init();\n      input.setAttribute(\"data-intl-tel-input-id\", iti.id.toString());\n      intlTelInput.instances[iti.id] = iti;\n      input.iti = iti;\n      return iti;\n    },\n    {\n      defaults,\n      //* Using a static var like this allows us to mock it in the tests.\n      documentReady: () => document.readyState === \"complete\",\n      //* Get the country data object.\n      getCountryData: () => data_default,\n      //* A getter for the plugin instance.\n      getInstance: (input) => {\n        const id2 = input.getAttribute(\"data-intl-tel-input-id\");\n        return id2 ? intlTelInput.instances[id2] : null;\n      },\n      //* A map from instance ID to instance object.\n      instances: {},\n      attachUtils,\n      startedLoadingUtilsScript: false,\n      startedLoadingAutoCountry: false,\n      version: \"25.10.10\"\n    }\n  );\n  var intl_tel_input_default = intlTelInput;\n  return __toCommonJS(intl_tel_input_exports);\n})();\n\n// UMD\n  return factoryOutput.default;\n}));\n","import intlTelInput from 'intl-tel-input';\n\n;(function () {\n\t'use strict';\n\n\tconst initInternationalPhoneField = function() {\n\n\t\t// init phone fields\n\t\tvar fields = document.querySelectorAll('input.InternationalPhoneNumberField');\n\n\t\tArray.prototype.forEach.call(fields, function (field) {\n\n            var initialised = field.getAttribute('data-initialised');\n            if (typeof initialised !== 'undefined' && initialised !== null) {\n                return;\n            }\n\n\t\t\t// define geo lookup function\n\t\t\tvar geoLookup = null;\n\t\t\tvar initialCountry = field.getAttribute('data-initialcountry');\n            if (typeof initialCountry === 'undefined' || initialCountry === 'auto') {\n                if (field.getAttribute('data-apiurl') && field.getAttribute('data-apiurl').length > 0) {\n                    geoLookup = function(callback) {\n                        var xhr = new XMLHttpRequest();\n                        xhr.open('GET', field.getAttribute('data-apiurl'));\n                        xhr.setRequestHeader(\"Accept\", \"application/json\");\n                        xhr.onload = function() {\n                            if (xhr.status === 200) {\n                                var json = JSON.parse(xhr.responseText);\n                                var countryCode = (json && json[field.getAttribute('data-apireplykey')]) ? json[field.getAttribute('data-apireplykey')] : \"\";\n                                callback(countryCode);\n                            }\n                        };\n                        xhr.send();\n                    };\n                } else if (typeof window.loadCountryFromBrowserTimeZone === 'function') {\n                    initialCountry = window.loadCountryFromBrowserTimeZone();\n                }\n            }\n\n\t\t\t// create hidden field for data submission\n\t\t\tvar fieldname = field.getAttribute('name');\n\t\t\tvar hiddenField = document.createElement(\"input\");\n\t\t\thiddenField.setAttribute('type', 'hidden');\n\t\t\thiddenField.setAttribute('name', fieldname);\n\t\t\thiddenField.setAttribute('value', field.value);\n\t\t\t// rename visible field\n\t\t\tfield.setAttribute('name', fieldname + '_itl');\n\t\t\t// insert hidden field\n\t\t\tfield.parentElement.appendChild(hiddenField);\n\n\t\t\tvar iti = intlTelInput(field, {\n\t\t\t\tgeoIpLookup: geoLookup,\n\t\t\t\tinitialCountry: initialCountry,\n\t\t\t\tnationalMode: true,\n\t\t\t\tonlyCountries: field.getAttribute('data-onlycountries') ? field.getAttribute('data-onlycountries').split('-') : [],\n\t\t\t\tpreferredCountries: field.getAttribute('data-preferredcountries') ? field.getAttribute('data-preferredcountries').split('-') : [],\n\t\t\t\texcludeCountries: field.getAttribute('data-excludedcountries') ? field.getAttribute('data-excludedcountries').split('-') : [],\n\t\t\t\tutilsScript: field.getAttribute('data-utilsscripturl'),\n\t\t\t});\n\n\t\t\t// Update hidden field value with phone number if correct, otherwise just copy value. Validation happens on server.\n\t\t\tvar handleChange = function() {\n\t\t\t\tif (iti.isValidNumber(false)) {\n\t\t\t\t\thiddenField.value = iti.getNumber();\n\t\t\t\t} else {\n\t\t\t\t\thiddenField.value = field.value.trim();\n\t\t\t\t}\n\t\t\t};\n\t\t\tfield.addEventListener('change', handleChange);\n\t\t\tfield.addEventListener('keyup', handleChange);\n\t\t\tfield.addEventListener('blur', handleChange);\n\n            field.setAttribute('data-initialised', true);\n\t\t});\n\t}\n\n\tif (document.readyState === \"loading\") { // Loading hasn't finished yet\n\t\tdocument.addEventListener(\"DOMContentLoaded\", initInternationalPhoneField);\n\t} else { // `DOMContentLoaded` has already fired\n\t\tinitInternationalPhoneField();\n\t}\n\n\tif (window.jQuery && window.jQuery.fn.entwine) {\n\t\tjQuery.entwine(\"InternationalPhoneNumberField\", function ($) {\n\t\t\t$(\":input.InternationalPhoneNumberField\").entwine({\n\t\t\t\tonmatch: function () {\n\t\t\t\t\tinitInternationalPhoneField();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n}());\n"]}