{"version":3,"sources":["node_modules/libphonenumber-js/metadata.min.json.js","node_modules/libphonenumber-js/min/exports/withMetadataArgument.js","node_modules/libphonenumber-js/es6/tools/semver-compare.js","node_modules/libphonenumber-js/es6/helpers/isObject.js","node_modules/libphonenumber-js/es6/metadata.js","node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js","node_modules/libphonenumber-js/es6/helpers/mergeArrays.js","node_modules/libphonenumber-js/es6/helpers/getNumberType.js","node_modules/libphonenumber-js/es6/isPossible.js","node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js","node_modules/libphonenumber-js/es6/isValid.js","node_modules/libphonenumber-js/es6/helpers/getPossibleCountriesForNumber.js","node_modules/libphonenumber-js/es6/constants.js","node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js","node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js","node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js","node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js","node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js","node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js","node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js","node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js","node_modules/libphonenumber-js/es6/helpers/RFC3966.js","node_modules/libphonenumber-js/es6/format.js","node_modules/libphonenumber-js/es6/PhoneNumber.js","node_modules/libphonenumber-js/es6/ParseError.js","node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js","node_modules/libphonenumber-js/es6/helpers/parseDigits.js","node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","node_modules/libphonenumber-js/es6/helpers/getCountryByNationalNumber.js","node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js","node_modules/libphonenumber-js/es6/helpers/extractPhoneContext.js","node_modules/libphonenumber-js/es6/helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js","node_modules/libphonenumber-js/es6/parse.js","node_modules/libphonenumber-js/es6/normalizeArguments.js","node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","node_modules/libphonenumber-js/es6/isValidPhoneNumber.js","node_modules/libphonenumber-js/min/exports/isValidPhoneNumber.js","src/javascript/components/jquery-validator.js","node_modules/intl-tel-input/build/js/intlTelInput.js"],"names":["metadata","country_calling_codes","1","7","20","27","30","31","33","34","36","39","40","41","43","44","45","46","47","48","49","51","52","53","54","55","56","57","58","60","61","62","63","64","65","66","81","84","86","90","91","93","_typeof","94","95","_classCallCheck","98","211","_defineProperties","212","213","_createClass","216","218","220","221","222","223","224","225","226","227","228","229","231","232","233","234","235","236","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","260","261","262","263","264","265","266","267","268","269","290","291","297","298","299","350","351","352","353","354","355","356","357","358","359","370","371","372","373","374","375","376","377","378","380","381","382","383","385","386","387","389","420","421","423","500","501","502","503","504","505","506","507","508","509","590","591","592","593","594","595","596","597","598","599","670","672","673","674","675","676","677","678","679","680","681","682","683","685","686","687","688","689","690","691","692","850","852","853","855","856","880","886","960","961","962","963","964","965","966","967","968","970","971","972","973","974","975","976","977","992","993","994","995","996","998","countries","AC","AD","AE","AF","AG","AI","AL","AM","AO","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GT","GU","GW","GY","HK","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IR","IS","IT","JE","JM","JO","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TA","TC","TD","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW","nonGeographic","800","808","870","878","881","882","883","888","979","withMetadataArgument","func","_arguments","args","Array","prototype","slice","call","push","compare","a","b","split","pa","pb","i","na","Number","nb","isNaN","objectConstructor","constructor","isObject","object","_typeof$1","obj","Symbol","iterator","_classCallCheck$2","instance","Constructor","TypeError","_defineProperties$2","target","props","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass$2","protoProps","staticProps","V3","V4","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","this","validateMetadata","value","keys","filter","_","countryCode","v1","v2","v3","nonGeographical","country","undefined","getCountryMetadata","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","test","hasCountry","Error","concat","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","_createForOfIteratorHelperLoose","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","_type","type","ext","country_phone_code_to_countries","globalMetadataObject","setVersion","_this","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","_arrayLikeToArray","types","_type2","getType","Type","format","_format","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","nationalPrefixFormattingRule","FIRST_GROUP_ONLY_PREFIX_PATTERN","join","typeOf","getCountryCallingCode","countryCallingCode","isSupportedCountry","hasOwnProperty","version","v4","_createForOfIteratorHelperLoose$4","o","allowArrayLike","it","next","bind","isArray","_unsupportedIterableToArray$5","done","minLen","n","_arrayLikeToArray$5","toString","name","from","arr","len","arr2","mergeArrays","merged","_iterator","_step","element","indexOf","sort","checkNumberLength","nationalNumber","checkNumberLengthForType","type_info","possible_lengths","mobile_type","actual_length","minimum_length","isPossiblePhoneNumber","input","options","phone","isPossibleNumber","isNonGeographicCallingCode","matchesEntirely","text","regular_expression","RegExp","_createForOfIteratorHelperLoose$3","_unsupportedIterableToArray$4","_arrayLikeToArray$4","NON_FIXED_LINE_PHONE_TYPES","getNumberType","isNumberTypeEqualTo","pattern","isValidNumber","getPossibleCountriesForNumber","possibleCountries","couldNationalNumberBelongToCountry","_metadata","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","VALID_PUNCTUATION","PLUS_CHARS","CAPTURING_DIGIT_PATTERN","stripIddPrefix","number","countryMetadata","IDDPrefixPattern","search","matchedGroups","match","extractNationalNumberFromPossiblyIncompleteNumber","carrierCode","hasCapturedGroups","possiblePositionOfTheFirstCapturedGroup","prefixPattern","prefixMatch","exec","capturedGroupsCount","replace","prefixBeforeNationalNumber","extractNationalNumber","_extractNationalNumbe","shouldHaveExtractedNationalPrefix","isPossibleIncompleteNationalNumber","nationalNumberBefore","nationalNumberAfter","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","possibleShorterNumber","possibleShorterNationalNumber","_defineProperty","isNumberWithIddPrefix","numberWithoutIDD","_extractCountryCallin","countryCallingCodeSource","_countryCallingCode","applyInternationalSeparatorStyle","formattedNumber","trim","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","_ref","useInternationalFormat","withNationalPrefix","internationalFormat","ownKeys","_objectSpread","SINGLE_IDD_PREFIX_REG_EXP","getIddPrefix","RFC3966_EXTN_PREFIX","getExtensionDigitsPattern","maxLength","createExtensionPattern","purpose","possibleSeparatorsBetweenNumberAndExtLabel","possibleSeparatorsNumberExtLabelNoComma","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_START_REG_EXP","VALID_PHONE_NUMBER_WITH_EXTENSION","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","isViablePhoneNumberStart","formatRFC3966","_createForOfIteratorHelperLoose$2","_unsupportedIterableToArray$3","_arrayLikeToArray$3","ownKeys$5","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread$5","arguments","source","forEach","_defineProperty$5","getOwnPropertyDescriptors","defineProperties","formatExtension","extension","formatNumber","DEFAULT_OPTIONS","addExtension","formatNationalNumber","fromCountry","formatIDD","formatAs","_unsupportedIterableToArray","chooseFormatForNumber","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","iddPrefix","ownKeys$4","_objectSpread$4","_defineProperty$4","_classCallCheck$1","_defineProperties$1","_createClass$1","PhoneNumber","countryOrCountryCallingCode","e164Number","E164_NUMBER_REGEXP","extractCountryCallingCode","_getCountryAndCountry","getCountryAndCountryCallingCode","getMetadata","phoneNumber","isCountryCode","metadataJson","_inherits","subClass","superClass","create","_setPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","NewTarget","Super","_getPrototypeOf","_possibleConstructorReturn","Reflect","construct","self","_assertThisInitialized","ReferenceError","_wrapNativeSuper","Class","_cache","Map","_isNativeFunction","has","get","set","Wrapper","_construct","Parent","Function","sham","Proxy","Boolean","valueOf","e","fn","p","setPrototypeOf","__proto__","getPrototypeOf","ParseError","_super","code","EXTN_PATTERN","extractExtension","start","numberWithoutExtension","matches","DIGITS","0","2","3","4","5","6","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","parseDigit","character","_createForOfIteratorHelperLoose$1","_unsupportedIterableToArray$2","parsePhoneNumber","_arrayLikeToArray$2","parseIncompletePhoneNumber","string","result","parsePhoneNumberCharacter","prevParsedCharacters","emitEvent","_unsupportedIterableToArray$1","_arrayLikeToArray$1","getCountryByNationalNumber","nationalPhoneNumber","USE_NON_GEOGRAPHIC_COUNTRY_CODE","getCountryByCallingCode","defaultCountry","RFC3966_VISUAL_SEPARATOR_","RFC3966_PHONE_DIGIT_","RFC3966_GLOBAL_NUMBER_DIGITS_","PLUS_SIGN","RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_","ALPHANUM_","RFC3966_DOMAINLABEL_","VALID_ALPHA_","RFC3966_TOPLABEL_","RFC3966_DOMAINNAME_","RFC3966_DOMAINNAME_PATTERN_","RFC3966_PREFIX_","RFC3966_PHONE_CONTEXT_","RFC3966_ISDN_SUBADDRESS_","phoneContext","extractFormattedPhoneNumberFromPossibleRfc3966NumberUri","numberToParse","phoneNumberString","extractFormattedPhoneNumber","isPhoneContextValid","charAt","indexOfNationalNumber","indexOfRfc3966Prefix","indexOfPhoneContext","substring","indexOfIsdn","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","parse","_parseInput","parseInput","extract","formattedPhoneNumber","error","_parsePhoneNumber","parsePhoneNumber$1","defaultCallingCode","hasSelectedNumberingPlan","__countryCallingCodeSource","extended","valid","_extractFormattedPhoneNumber","throwOnError","MAX_INPUT_STRING_LENGTH","startsAt","withExtensionStripped","exactCountry","ownKeys$3","_objectSpread$3","_defineProperty$3","parsePhoneNumberWithError","ownKeys$2","_objectSpread$2","_defineProperty$2","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","_e","_arr","_n","_d","_i","_s","err","normalizeArguments","arg_1","_Array$prototype$slic2","arg_2","arg_3","arg_4","ownKeys$1","_objectSpread$1","_defineProperty$1","isValidPhoneNumber$1","_normalizeArguments","isValid","isValidPhoneNumber","getDefaultExportFromCjs","x","__esModule","addValidator","$","window","jQuery","validator","addMethod","phone_number","let","hidden","closest","find","first","val","optional","document","readyState","addEventListener","hasRequiredIntlTelInput","intlTelInput$1","exports","requireIntlTelInput","module","factory","__defProp","__getOwnPropDesc","__getOwnPropNames","getOwnPropertyNames","__hasOwnProp","__copyProps","to","except","desc","intl_tel_input_exports","rawCountryData","all","Iti","default","intl_tel_input_default","allCountries","c","iso2","dialCode","priority","areaCodes","nodeById","data_default","interface_default","selectedCountryAriaLabel","noCountrySelected","countryListAriaLabel","searchPlaceholder","zeroSearchResults","oneSearchResult","multipleSearchResults","ac","xk","en_default","ad","ae","af","ag","ai","al","am","ao","ar","as","at","au","aw","ax","az","ba","bb","bd","be","bf","bg","bh","bi","bj","bl","bm","bn","bo","bq","br","bs","bt","bw","by","bz","ca","cc","cd","cf","cg","ch","ci","ck","cl","cm","cn","co","cr","cu","cv","cw","cx","cy","cz","de","dj","dk","dm","do","dz","ec","ee","eg","eh","er","es","et","fi","fj","fk","fm","fo","fr","ga","gb","gd","ge","gf","gg","gh","gi","gl","gm","gn","gp","gq","gr","gt","gu","gw","gy","hk","hn","hr","ht","hu","id","ie","il","im","in","io","iq","ir","is","je","jm","jo","jp","ke","kg","kh","ki","km","kn","kp","kr","kw","ky","kz","la","lb","lc","lk","lr","ls","lt","lu","lv","ly","ma","mc","md","me","mf","mg","mh","mk","ml","mm","mn","mo","mp","mq","mr","ms","mt","mu","mv","mw","mx","my","mz","nc","ne","nf","ng","ni","nl","no","np","nr","nu","nz","om","pe","pf","pg","ph","pk","pl","pm","pr","ps","pt","pw","py","qa","re","ro","rs","ru","rw","sa","sb","sc","sd","se","sg","sh","si","sj","sk","sl","sm","sn","so","sr","ss","st","sv","sx","sy","sz","tc","td","tg","th","tj","tk","tl","tm","tn","tr","tt","tv","tw","tz","ua","ug","us","uy","uz","va","vc","ve","vg","vi","vn","vu","wf","ws","ye","yt","za","zm","zw","defaults","allowDropdown","autoPlaceholder","containerClass","countryOrder","countrySearch","customPlaceholder","dropdownContainer","excludeCountries","fixDropdownWidth","formatAsYouType","formatOnDisplay","geoIpLookup","hiddenInput","i18n","initialCountry","loadUtilsOnInit","nationalMode","onlyCountries","placeholderNumberType","showFlags","separateDialCode","strictMode","useFullscreenPopup","navigator","userAgent","innerWidth","utilsScript","validationNumberType","regionlessNanpNumbers","getNumeric","s","normaliseString","normalize","toLowerCase","isRegionlessNanp","numeric","areaCode","substr","createEl","attrs","container","el","createElement","entries","setAttribute","appendChild","forEachInstance","method","instances","intlTelInput","values","customOptions","telInput","highlightedItem","assign","hadInitialPlaceholder","getAttribute","_init","body","isAndroid","isRTL","showOnDefaultSide","autoCountryPromise","showSelectedCountryOnLeft","originalPaddingRight","style","paddingRight","originalPaddingLeft","paddingLeft","Promise","resolve","reject","resolveAutoCountryPromise","rejectAutoCountryPromise","utilsScriptPromise","resolveUtilsScriptPromise","rejectUtilsScriptPromise","promise","selectedCountryData","_processCountryData","_generateMarkup","_setInitialState","_initListeners","_initRequests","_processAllCountries","_processDialCodes","_translateCountryNames","_sortCountries","aIndex","bIndex","aIndexExists","bIndexExists","localeCompare","_addToDialCodeMap","dialCodeMaxLen","dialCodeToIso2Map","index","lowerCaseOnlyCountries","lowerCaseExcludeCountries","dialCodes","rootIso2Code","j","k","partialDialCode","classList","add","hasAttribute","form","parentClass","wrapper","class","parentNode","insertBefore","countryContainer","left","right","selectedCountry","aria-expanded","aria-label","aria-haspopup","aria-controls","role","disabled","selectedCountryPrimary","selectedCountryInner","selectedCountryA11yText","dropdownArrow","aria-hidden","selectedDialCode","dropdownContent","searchInput","placeholder","aria-autocomplete","autocomplete","searchResultsA11yText","countryList","_appendListItems","_updateSearchResultsText","dropdownClasses","dropdown","_updateInputPadding","names","hiddenInputCountry","extraClass","listItem","tabindex","data-dial-code","data-country-code","aria-selected","content","insertAdjacentHTML","overrideAutoCountry","attributeValue","inputValue","_getDialCode","isRegionlessNanpNumber","isAutoCountry","_updateCountryFromNumber","lowerInitialCountry","_getCountryData","_setCountry","_updateValFromNumber","_initTelInputListeners","_initDropdownListeners","_initHiddenInputListener","_handleHiddenInputSubmit","getNumber","getSelectedCountryData","_handleLabelClick","contains","focus","preventDefault","label","_handleClickSelectedCountry","readOnly","_openDropdown","_handleCountryContainerKeydown","includes","stopPropagation","_closeDropdown","utils","_handlePageLoad","removeEventListener","loadUtils","catch","documentReady","_loadAutoCountry","autoCountry","handleAutoCountry","startedLoadingAutoCountry","iso2Lower","setTimeout","_filterCountries","userOverrideFormatting","_handleInputEvent","data","currentCaretPos","selectionStart","valueBeforeCaret","valueAfterCaret","_openDropdownWithPlus","_triggerCountryChange","isFormattingChar","isPaste","inputType","disableFormatOnSetNumber","detail","relevantCharsBeforeCaret","isDeleteForwards","formattedValue","_formatNumberAsYouType","newCaretPos","relevantChars","prevCaretPos","count","setSelectionRange","_handleKeydownEvent","altKey","ctrlKey","metaKey","alreadyHasPlus","isInitialPlus","isNumeric","isAllowedChar","newValue","selectionEnd","newFullNumber","_getFullNumber","coreNumber","getCoreNumber","hasExceededMaxLength","maxCoreNumberLength","isChangingDialCode","currentCountry","newCountry","_getCountryFromNumber","_cap","max","parseInt","_trigger","detailProps","CustomEvent","bubbles","cancelable","dispatchEvent","width","offsetWidth","remove","_setDropdownPosition","firstCountryItem","firstElementChild","_highlightListItem","scrollTop","_bindDropdownListeners","inputPosRelativeToVP","inputHeight","getBoundingClientRect","offsetHeight","top","_handleWindowScroll","_handleMouseoverCountryList","_handleClickCountryList","_selectListItem","isOpening","query","_handleClickOffToClose","documentElement","queryTimer","_handleKeydownOnDropdown","_handleUpDownKey","_handleEnterKey","clearTimeout","_searchForCountry","doFilter","inputQuery","keyupTimer","_handleSearchChange","_scrollTo","isReset","noCountriesAddedYet","innerHTML","normalisedQuery","normalisedCountryName","countryInitials","word","fullDialCode","childElementCount","searchText","textContent","previousElementSibling","nextElementSibling","lastElementChild","fullNumber","NATIONAL","INTERNATIONAL","useNational","numberFormat","_beforeSetNumber","plusIndex","iso2Codes","alreadySelected","shouldFocus","prevItem","activeDescendant","allowFail","prevCountry","flagClass","a11yText","className","_setSelectedCountryTitleAttribute","_updatePlaceholder","_updateMaxLength","inputPadding","_getHiddenSelectedCountryWidth","numberType","exampleNumber","getExampleNumber","validNumber","title","containerClone","selectedCountryClone","cloneNode","visibility","countryContainerClone","removeChild","shouldSetPlaceholder","countryChanged","_updateDialCode","removeAttribute","containerHeight","containerTop","containerBottom","elementHeight","elementTop","elementBottom","newScrollTop","newDialCodeBare","prevDialCode","inputVal","newDialCode","newNumber","includeAreaCode","numericChars","overrideVal","prefix","numericVal","formatNumberAsYouType","setCountry","handleUtils","destroy","getExtension","getValidationError","beforeAlphaIsValid","alphaCharPosition","beforeAlphaChar","_utilsIsPossibleNumber","isValidNumberPrecise","_utilsIsValidNumber","setNumber","isSetNumber","setPlaceholderNumberType","setDisabled","iti","getCountryData","getInstance","id2","startedLoadingUtilsScript","loadCall","import","then","mod","intlTelInputExports","initInternationalPhoneField","fields","querySelectorAll","field","hiddenField","handleChange","initialised","geoLookup","callback","xhr","XMLHttpRequest","open","setRequestHeader","onload","status","json","JSON","responseText","send","loadCountryFromBrowserTimeZone","fieldname","parentElement","preferredCountries","entwine"],"mappings":"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","file":"intl-phone-number-field.js","sourcesContent":["// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":4,\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\"],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([457]\\\\d{6})$|1\",\"268$1\",0,\"268\"],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2457]\\\\d{6})$|1\",\"264$1\",0,\"264\"],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\"],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\"],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]]],\"AR\":[\"54\",\"00\",\"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\"],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"([267]\\\\d{6})$|1\",\"684$1\",0,\"684\"],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:48|5[0-3579]|[6-9])|7(?:20|32|8)|[89]\",\"(?:31|4)6|51|6(?:485|5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\"],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\",[5,6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"(183[12])|0\",0,0,0,[[\"(?:(?:2(?:(?:[0-26-9]\\\\d|3[0-8]|5[0135-9])\\\\d|4(?:[02-9]\\\\d|10))|3(?:(?:[0-3589]\\\\d|6[1-9]|7[0-35-9])\\\\d|4(?:[0-578]\\\\d|90))|7(?:[013-57-9]\\\\d|2[0-8])\\\\d)\\\\d\\\\d|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4])|[34]\\\\d\\\\d)|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|5[0-25-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"163\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",0,\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365[45]|46\",\"1[28]|2|365(?:4|5[02])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\"],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\"],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"246$1\",0,\"246\"],\"BD\":[\"880\",\"00\",\"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:[15]|28|4[14])|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]|2[23]\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\"],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\"],\"BF\":[\"226\",\"00\",\"(?:[025-7]\\\\d|44)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[024-7]\"]]]],\"BG\":[\"359\",\"00\",\"00800\\\\d{7}|[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9,12],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[02-4679]\"]]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]]],\"BJ\":[\"229\",\"00\",\"(?:01\\\\d|[24-689])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"0\"]]]],\"BL\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|3[3-7]|5[12]|87)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"441$1\",0,\"441\"],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"8001\\\\d{5}|(?:[2-467]\\\\d|50)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[235]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\"],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\"],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"[1-467]\\\\d{9,10}|55[0-46-9]\\\\d{8}|[34]\\\\d{7}|55\\\\d{7,8}|(?:5[0-46-9]|[89]\\\\d)\\\\d{7,9}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37|86)\",\"300|4(?:0(?:0|20)|370|864)\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\"],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([3-8]\\\\d{6})$|1\",\"242$1\",0,\"242\"],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]]],\"BW\":[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,0,\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]]],\"CA\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[7,10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|5[07]|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|[26]8|3[178]|50|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|7[39])|9(?:0[25]|42))[2-9]\\\\d{6}\",[10]],[\"\",[10]],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\",[10]],[\"900[2-9]\\\\d{6}\",[10]],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:2[125-9]|33|44|66|77|88)|6(?:22|33))[2-9]\\\\d{6}\",[10]],0,[\"310\\\\d{4}\",[7]],0,[\"600[2-9]\\\\d{6}\",[10]]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|5[0-25-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CD\":[\"243\",\"00\",\"(?:(?:[189]|5\\\\d)\\\\d|2)\\\\d{7}|[1-68]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"5\"],\"0$1\"]],\"0\"],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\"],\"CI\":[\"225\",\"00\",\"[02]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[1-36]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]]],\"CM\":[\"237\",\"00\",\"[26]\\\\d{8}|88\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]|88\"]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\",\"(?:(?:1[03-689]|2\\\\d)\\\\d\\\\d|6)\\\\d{8}|1\\\\d{10}|[126]\\\\d{6}(?:\\\\d(?:\\\\d{2})?)?|86\\\\d{5,6}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{5,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]|3(?:[157]|35|49|9[1-68])|4(?:1[124-9]|2[179]|6[47-9]|7|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:07|1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3|4[13]|5[1-5]|7[0-79]|9[0-35-9])|(?:4[35]|59|85)[1-9]\",\"(?:10|2[0-57-9])(?:1[02]|9[56])|8078|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))1\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|80781|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))12\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|807812|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))123\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:078|1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))123\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"(1(?:[12]\\\\d|79)\\\\d\\\\d)|0\",0,0,0,0,\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:46|60\\\\d\\\\d)\\\\d{6}|(?:1\\\\d|[39])\\\\d{9}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"46\"]],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"6|90\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3[0-357]|9[14]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\"],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\"],\"CU\":[\"53\",\"119\",\"(?:[2-7]|8\\\\d\\\\d)\\\\d{7}|[2-47]\\\\d{6}|[34]\\\\d{5}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[56]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\"],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\"],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|5[0-25-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[015]\\\\d|2[13]|31|[46][1-8])\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[03568]\",\"15(?:[0568]|31)\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\"],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"767$1\",0,\"767\"],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\"],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\"],\"EC\":[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{8})\",\"$1 $2\",[\"1\"],\"0$1\"]],\"0\"],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\"],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\"],\"ES\":[\"34\",\"00\",\"[5-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-579]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-579]\"],\"0$1\"]],\"0\"],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{5})\",\"$1\",[\"20[2-59]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"(?:[1-3]0|[68])0|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[14]|2[09]|50|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"(?:19|[2568])[1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",0,\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,0,\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]]],\"FO\":[\"298\",\"00\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\"],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\"],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"]],0,0,\"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\",\"$1\"],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0-35])|4(?:(?:[0-5]\\\\d|70)\\\\d|69[7-9])|(?:(?:5[0-26-9]|[78][0-49])\\\\d|6(?:[0-4]\\\\d|50))\\\\d)|(?:2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d|1(?:[0-7]\\\\d|8[0-3]))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d)\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"473$1\",0,\"473\"],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\"],\"GF\":[\"594\",\"00\",\"(?:[56]94\\\\d|7093)\\\\d{5}|(?:80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]|9[47]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[89]\"],\"0$1\"]],\"0\"],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"([25-9]\\\\d{5})$|0\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\"],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d|60)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d|70)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-9]\"]]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"GN\":[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]]],\"GP\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-79]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1-9]|5[3-579]|[68][0-689]|7[08]|9\\\\d)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\",[10,11,12],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]]],\"GT\":[\"502\",\"00\",\"80\\\\d{6}|(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-8]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"671$1\",0,\"671\"],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]]],\"GY\":[\"592\",\"001\",\"(?:[2-8]\\\\d{3}|9008)\\\\d{3}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,0,\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]]],\"HR\":[\"385\",\"00\",\"[2-69]\\\\d{8}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{6}\",[7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6|7[245]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-57]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"HT\":[\"509\",\"00\",\"[2-589]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-589]\"]]]],\"HU\":[\"36\",\"00\",\"[235-7]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\"],\"ID\":[\"62\",\"00[89]\",\"00[1-9]\\\\d{9,14}|(?:[1-36]|8\\\\d{5})\\\\d{6}|00\\\\d{9}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\"],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\"],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([25-8]\\\\d{5})$|0\",\"1624$1\",0,\"74576|(?:16|7[56])24\"],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\"],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\"],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,0,\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|(?:43|55|70)\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\",[6,7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1(?:44|[679])|[378]|43\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]|14\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\",[6,7,8,9,10,11]],[\"3[2-9]\\\\d{7,8}|(?:31|43)\\\\d{8}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],[\"3[2-8]\\\\d{9,10}\",[11,12]],0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([0-24-8]\\\\d{5})$|0\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97\\\\d))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\"],\"JO\":[\"962\",\"00\",\"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51)|9(?:80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[0459]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[26-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9]|9[29])|5(?:2|3(?:[045]|9[0-8])|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|3(?:[29]|60)|49|51|6(?:[0-24]|36|5[0-3589]|7[23]|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3(?:[045]|9(?:[0-58]|6[4-9]|7[0-35689]))|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|60|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[2-57-9]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|7(?:2[2-468]|3[78])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[257-9]\"],\"0$1\"]],\"0\",0,\"(000[259]\\\\d{6})$|(?:(?:003768)0?)|0\",\"$1\"],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\"],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|[235-9]\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\"],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"869$1\",0,\"869\"],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]0|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\"],\"KW\":[\"965\",\"00\",\"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[245]\"]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"345$1\",0,\"345\"],\"KZ\":[\"7\",\"810\",\"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\",[10,14],0,\"8\",0,0,0,0,\"33622|7\",0,\"8~10\"],\"LA\":[\"856\",\"00\",\"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\"],\"LB\":[\"961\",\"00\",\"[27-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-6]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27-9]\"]]],\"0\"],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-8]\\\\d{6})$|1\",\"758$1\",0,\"758\"],\"LI\":[\"423\",\"00\",\"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2379]|8(?:0[09]|7)\",\"[2379]|8(?:0(?:02|9)|7)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"(1001)|0\"],\"LK\":[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\"],\"LR\":[\"231\",\"00\",\"(?:[2457]\\\\d|33|88)\\\\d{7}|(?:2\\\\d|[4-6])\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4[67]|[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-578]\"],\"0$1\"]],\"0\"],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(0-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(0-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(0-$1)\",1]],\"0\",0,\"[08]\"],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\"],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-46-9]|3[3-9]|9)|8(?:0[89]|92)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:2(?:[0-25-79]\\\\d|3[1-578]|4[02-46-8]|8[0235-7])|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|8[014-9]|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[0167]\\\\d|2[0-8]|5[0-3]|8[0-7]))\\\\d{6}\"],[\"80[0-7]\\\\d{6}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"(?:592(?:4[0-2]|93)|80[89]\\\\d\\\\d)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"(?:[3489]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[389]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\"],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\"],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\"],\"MF\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|3[03-7]|5[0-268]|87)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"([24-9]\\\\d{6})$|0\",\"20$1\"],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\"],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2|34[47]|4(?:[37]7|5[47]|64)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\"],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"4(?:[2-46]|5[3-5])|5|6(?:[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-5]|(?:60|86)[23]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|452|678|86\",\"[12]|452|6788|86\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[5-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\"],\"MO\":[\"853\",\"00\",\"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"670$1\",0,\"670\"],\"MQ\":[\"596\",\"00\",\"(?:596\\\\d|7091)\\\\d{5}|(?:69|[89]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-79]|8(?:0[6-9]|[36])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]]],\"MS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\",[10],0,\"1\",0,\"([34]\\\\d{6})$|1\",\"664$1\",0,\"664\"],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[57]|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57]\"]],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,0,\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[34679]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,0,\"00\"],\"MW\":[\"265\",\"00\",\"(?:[1289]\\\\d|31|77)\\\\d{7}|1\\\\d{6}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\"],\"MX\":[\"52\",\"0[09]\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"]]],0,0,0,0,0,0,0,\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9]|53)|8\",\"1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1(?:[367]|80)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\"],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"NC\":[\"687\",\"00\",\"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[02-57-9]\"]]]],\"NE\":[\"227\",\"00\",\"[027-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[0467]\"]]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\"],\"NG\":[\"234\",\"009\",\"(?:20|9\\\\d)\\\\d{8}|[78]\\\\d{9,13}\",[10,11,12,13,14],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"20[129]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\"],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\",[5,6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-578]|91\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\"],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\"],\"NP\":[\"977\",\"00\",\"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-59]|[67][2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\"],\"NR\":[\"674\",\"00\",\"(?:222|444|(?:55|8\\\\d)\\\\d|666|777|999)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-9]\"]]]],\"NU\":[\"683\",\"00\",\"(?:[4-7]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[1289]\\\\d{9}|50\\\\d{5}(?:\\\\d{2,3})?|[27-9]\\\\d{7,8}|(?:[34]\\\\d|6[0-35-9])\\\\d{6}|8\\\\d{4,6}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"8[1-79]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|8|90\",\"50(?:[0367]|88)|8|90\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[589]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]]],\"PA\":[\"507\",\"00\",\"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\",[7,8,10,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]]],\"PE\":[\"51\",\"00|19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,0,\"00\",\" Anexo \"],\"PF\":[\"689\",\"00\",\"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\",[6,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4|8[7-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,0,\"00\"],\"PH\":[\"63\",\"00\",\"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\"],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\"],\"PL\":[\"48\",\"00\",\"(?:6|8\\\\d\\\\d)\\\\d{7}|[1-9]\\\\d{6}(?:\\\\d{2})?|[26]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|20|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}|(?:708|8\\\\d\\\\d)\\\\d{6}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\"],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\"],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"PT\":[\"351\",\"00\",\"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"16|[236-9]\"]]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-7])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\"],\"QA\":[\"974\",\"00\",\"800\\\\d{4}|(?:2|800)\\\\d{6}|(?:0080|[3-7])\\\\d{7}\",[7,8,9,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[136]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[3-7]\"]]]],\"RE\":[\"262\",\"00\",\"709\\\\d{6}|(?:26|[689]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[26-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"26(?:2\\\\d\\\\d|3(?:0\\\\d|1[0-6]))\\\\d{4}\"],[\"(?:69(?:2\\\\d\\\\d|3(?:[06][0-6]|1[0-3]|2[0-2]|3[0-39]|4\\\\d|5[0-5]|7[0-37]|8[0-8]|9[0-479]))|7092[0-3])\\\\d{4}\"],[\"80\\\\d{7}\"],[\"89[1-37-9]\\\\d{6}\"],0,0,0,0,[\"9(?:399[0-3]|479[0-6]|76(?:2[278]|3[0-37]))\\\\d{4}\"],[\"8(?:1[019]|2[0156]|84|90)\\\\d{6}\"]]],\"RO\":[\"40\",\"00\",\"(?:[236-8]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[236-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\"],\"RU\":[\"7\",\"810\",\"8\\\\d{13}|[347-9]\\\\d{9}\",[10,14],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[349]|8(?:[02-7]|1[1-8])\"],\"8 ($1)\",1],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"],\"8 ($1)\"]],\"8\",0,0,0,0,0,[[\"336(?:[013-9]\\\\d|2[013-9])\\\\d{5}|(?:3(?:0[12]|4[1-35-79]|5[1-3]|65|8[1-58]|9[0145])|4(?:01|1[1356]|2[13467]|7[1-5]|8[1-7]|9[1-689])|8(?:1[1-8]|2[01]|3[13-6]|4[0-8]|5[15-7]|6[0-35-79]|7[1-37-9]))\\\\d{7}\",[10]],[\"9\\\\d{9}\",[10]],[\"8(?:0[04]|108\\\\d{3})\\\\d{7}\"],[\"80[39]\\\\d{7}\",[10]],[\"808\\\\d{7}\",[10]]],\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"]],\"0\"],\"SA\":[\"966\",\"00\",\"(?:[15]\\\\d|800|92)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\"],\"SB\":[\"677\",\"0[01]\",\"[6-9]\\\\d{6}|[1-6]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"6[89]|7|8[4-9]|9(?:[1-8]|9[0-8])\"]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"(?:[2489]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,0,\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44|9)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\"],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-9]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\"],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,0,\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[489]\\\\d|79)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\"],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\"],\"SL\":[\"232\",\"00\",\"(?:[237-9]\\\\d|66)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\"],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\"],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d|93)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"(?:2|90)4|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[348]|64|79|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6[0-35-9]|7[67]|9[2-9]\"]]],\"0\"],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d|90)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-9]\"]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\"],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|(?:80\\\\d|900)\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"(5\\\\d{6})$|1\",\"721$1\",0,\"721\"],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\"],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\"],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-479]\\\\d{6})$|1\",\"649$1\",0,\"649\"],\"TD\":[\"235\",\"00|16\",\"(?:22|30|[689]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[236-9]\"]]],0,0,0,0,0,0,0,\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]]],\"TH\":[\"66\",\"00[1-9]\",\"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\",[8,9,10,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\"],\"TJ\":[\"992\",\"810\",\"[0-57-9]\\\\d{8}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"44[02-479]|[34]7\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[1245]|3[12])\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0-57-9]\"]]],0,0,0,0,0,0,0,\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]]],\"TM\":[\"993\",\"810\",\"(?:[1-6]\\\\d|71)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[67]\"],\"8 $1\"]],\"8\",0,0,0,0,0,0,\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]]],\"TO\":[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]]],\"TR\":[\"90\",\"00\",\"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12,13],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|61[06])\",\"5(?:[0-59]|61[06]1)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\"],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-46-8]\\\\d{6})$|1\",\"868$1\",0,\"868\"],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,0,0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[25-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\"],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])\",\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|89|9[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,0,\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\"],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"310\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:3052(?:0[0-8]|[1-9]\\\\d)|5056(?:[0-35-9]\\\\d|4[0-68]))\\\\d{4}|(?:2742|305[3-9]|472[247-9]|505[2-57-9]|983[2-47-9])\\\\d{6}|(?:2(?:0[1-35-9]|1[02-9]|2[03-57-9]|3[1459]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-47-9]|1[02-9]|2[0135-79]|3[0-24679]|4[167]|5[0-2]|6[01349]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[179]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|3[016]|4[0156]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-8]|3[0-247]|4[0378]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[0168]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-3589]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,0,[\"305209\\\\d{4}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"0004\\\\d{2,9}|[1249]\\\\d{7}|(?:[49]\\\\d|80)\\\\d{5}\",[6,7,8,9,10,11,12,13],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[49]0|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[124]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3 $4\",[\"0\"]]],\"0\",0,0,0,0,0,0,\"00\",\" int. \"],\"UZ\":[\"998\",\"00\",\"(?:20|33|[5-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-9]\"]]]],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11,12],0,0,0,0,0,0,\"06698\"],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"784$1\",0,\"784\"],\"VE\":[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\"],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-578]\\\\d{6})$|1\",\"284$1\",0,\"284\"],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"340$1\",0,\"340\"],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[357-9]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\"],\"VU\":[\"678\",\"00\",\"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]]]],\"WF\":[\"681\",\"00\",\"(?:40|72|8\\\\d{4})\\\\d{4}|[89]\\\\d{5}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[47-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]]],\"XK\":[\"383\",\"00\",\"2\\\\d{7,8}|3\\\\d{7,11}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2|39\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7,10})\",\"$1 $2\",[\"3\"],\"0$1\"]],\"0\"],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7(?:[24-6]|8[0-7])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\"],\"YT\":[\"262\",\"00\",\"7093\\\\d{5}|(?:80|9\\\\d)\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"269(?:0[0-467]|15|5[0-4]|6\\\\d|[78]0)\\\\d{4}\"],[\"(?:639(?:0[0-79]|1[019]|[267]\\\\d|3[09]|40|5[05-9]|9[04-79])|7093[5-7])\\\\d{4}\"],[\"80\\\\d{7}\"],0,0,0,0,0,[\"9(?:(?:39|47)8[01]|769\\\\d)\\\\d{4}\"]]],\"ZA\":[\"27\",\"00\",\"[1-79]\\\\d{8}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\"],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|[579]\\\\d|63)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[579]\"],\"0$1\"]],\"0\"],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\"]},\"nonGeographic\":{\"800\":[\"800\",0,\"(?:00|[1-9]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"\\\\d\"]]],0,0,0,0,0,0,[0,0,[\"(?:00|[1-9]\\\\d)\\\\d{6}\"]]],\"808\":[\"808\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\d{7}\"]]],\"870\":[\"870\",0,\"7\\\\d{11}|[235-7]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"],0,0,0,0,0,0,[\"2\\\\d{8}\",[9]]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"6\\\\d{9}|[0-36-9]\\\\d{8}\",[9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[0-37-9]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{5,6})\",\"$1 $2 $3\",[\"6\"]]],0,0,0,0,0,0,[0,[\"6\\\\d{9}|[0-36-9]\\\\d{8}\"]]],\"882\":[\"882\",0,\"[13]\\\\d{6}(?:\\\\d{2,5})?|[19]\\\\d{7}|(?:[25]\\\\d\\\\d|4)\\\\d{7}(?:\\\\d{2})?\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"49\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"1[36]|9\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"16\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|23|3(?:[15]|4[57])|4|51\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[1-35]\"]]],0,0,0,0,0,0,[0,[\"342\\\\d{4}|(?:337|49)\\\\d{6}|(?:3(?:2|47|7\\\\d{3})|50\\\\d{3})\\\\d{7}\",[7,8,9,10,12]],0,0,0,[\"348[57]\\\\d{7}\",[11]],0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:345\\\\d|9[89])\\\\d{6}|(?:10|2(?:3|85\\\\d)|3(?:[15]|[69]\\\\d\\\\d)|4[15-8]|51)\\\\d{8}\"]]],\"883\":[\"883\",0,\"(?:[1-4]\\\\d|51)\\\\d{6,10}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,8})\",\"$1 $2 $3\",[\"[14]|2[24-689]|3[02-689]|51[24-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"21\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"51[13]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[235]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"(?:2(?:00\\\\d\\\\d|10)|(?:370[1-9]|51\\\\d0)\\\\d)\\\\d{7}|51(?:00\\\\d{5}|[24-9]0\\\\d{4,7})|(?:1[0-79]|2[24-689]|3[02-689]|4[0-4])0\\\\d{5,9}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"[1359]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\d{8}\"]]]}}","// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../../metadata.min.json.js'\r\n\r\nexport default function withMetadataArgument(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}\n//# sourceMappingURL=semver-compare.js.map","var objectConstructor = {}.constructor;\nexport default function isObject(object) {\n  return object !== undefined && object !== null && object.constructor === objectConstructor;\n}\n//# sourceMappingURL=isObject.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport compare from './tools/semver-compare.js';\nimport isObject from './helpers/isObject.js'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n      // The test case could be found by searching for \"nonGeographical\".\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        // In that metadata, there was no concept of \"non-geographic\" metadata\n        // so metadata for `001` country code was stored along with other countries.\n        // The test case can be found by searching for:\n        // \"should work around `nonGeographic` metadata not existing\".\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport { Metadata as default };\n\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    } // Is always present.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    } // Is only present when a country supports multiple IDD prefixes.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    } // \"possible length\" data is always present in Google's metadata.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to `country_calling_codes` in `1.0.18`.\n  // For that reason, it's not used in this detection algorithm.\n  // Instead, it detects by `countries: {}` property existence.\n\n\n  if (!isObject(metadata) || !isObject(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(isObject(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + typeOf(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar typeOf = function typeOf(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries.hasOwnProperty(country);\n}\n\nfunction setVersion(metadata) {\n  var version = metadata.version;\n\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n//# sourceMappingURL=metadata.js.map","import mergeArrays from './mergeArrays.js';\nexport default function checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n} // Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n    return 'INVALID_LENGTH';\n  }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=checkNumberLength.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport default function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = _createForOfIteratorHelperLoose(b), _step; !(_step = _iterator()).done;) {\n    var element = _step.value;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=mergeArrays.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returns an empty object — `{}` —\n  // that means that the phone number is malformed,\n  // so it can't possibly be valid.\n\n  if (!input.country && !input.countryCallingCode) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\n    // For example, for \"US\" country.\n    // Old metadata (< `1.0.18`) had a specific \"types\" data structure\n    // that happened to be `undefined` for `MOBILE` in that case.\n    // Newer metadata (>= `1.0.18`) has another data structure that is\n    // not `undefined` for `MOBILE` in that case (it's just an empty array).\n    // So this `if` is just for backwards compatibility with old metadata.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(NON_FIXED_LINE_PHONE_TYPES), _step; !(_step = _iterator()).done;) {\n    var type = _step.value;\n\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n}\n//# sourceMappingURL=getNumberType.js.map","import Metadata from './metadata.js';\nimport checkNumberLength from './helpers/checkNumberLength.js';\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * isPossible(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  } // Old metadata (< 1.0.18) had no \"possible length\" data.\n\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n//# sourceMappingURL=isPossible.js.map","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport default function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n//# sourceMappingURL=matchesEntirely.js.map","import Metadata from './metadata.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport getNumberType from './helpers/getNumberType.js';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * isValid(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(nationalNumber, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=isValid.js.map","import Metadata from '../metadata.js';\n/**\r\n * Returns a list of countries that the phone number could potentially belong to.\r\n * @param  {string} callingCode — Calling code.\r\n * @param  {string} nationalNumber — National (significant) number.\r\n * @param  {object} metadata — Metadata.\r\n * @return {string[]} A list of possible countries.\r\n */\n\nexport default function getPossibleCountriesForNumber(callingCode, nationalNumber, metadata) {\n  var _metadata = new Metadata(metadata);\n\n  var possibleCountries = _metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return [];\n  }\n\n  return possibleCountries.filter(function (country) {\n    return couldNationalNumberBelongToCountry(nationalNumber, country, metadata);\n  });\n}\n\nfunction couldNationalNumberBelongToCountry(nationalNumber, country, metadata) {\n  var _metadata = new Metadata(metadata);\n\n  _metadata.selectNumberingPlan(country);\n\n  if (_metadata.numberingPlan.possibleLengths().indexOf(nationalNumber.length) >= 0) {\n    return true;\n  }\n\n  return false;\n}\n//# sourceMappingURL=getPossibleCountriesForNumber.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","import Metadata from '../metadata.js';\nimport { VALID_DIGITS } from '../constants.js';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}\n//# sourceMappingURL=stripIddPrefix.js.map","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,\n        // then carrier code is the second one.\n\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n        // `prefixBeforeNationalNumber` is the whole substring matched by\n        // the `national_prefix_for_parsing` regular expression.\n        // There seem to be no guarantees that it's just a national prefix.\n        // For example, if there's a carrier code, it's gonna be a\n        // part of `prefixBeforeNationalNumber` too.\n        var prefixBeforeNationalNumber = prefixMatch[0];\n        nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,\n        // then carrier code is the first one.\n\n        if (hasCapturedGroups) {\n          carrierCode = prefixMatch[1];\n        }\n      } // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n\n\n      var nationalPrefix;\n\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}\n//# sourceMappingURL=extractNationalNumberFromPossiblyIncompleteNumber.js.map","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport checkNumberLength from './checkNumberLength.js';\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nexport default function extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata),\n      carrierCode = _extractNationalNumbe.carrierCode,\n      nationalNumber = _extractNationalNumbe.nationalNumber;\n\n  if (nationalNumber !== number) {\n    if (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\n      // Don't strip the national prefix.\n      return {\n        nationalNumber: number\n      };\n    } // Check the national (significant) number length after extracting national prefix and carrier code.\n    // Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\n\n\n    if (metadata.possibleLengths()) {\n      // The number remaining after stripping the national prefix and carrier code\n      // should be long enough to have a possible length for the country.\n      // Otherwise, don't strip the national prefix and carrier code,\n      // since the original number could be a valid number.\n      // This check has been copy-pasted \"as is\" from Google's original library:\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      // It doesn't check for the \"possibility\" of the original `number`.\n      // I guess it's fine not checking that one. It works as is anyway.\n      if (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\n        // Don't strip the national prefix.\n        return {\n          nationalNumber: number\n        };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\n\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) && !matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\n    return false;\n  } // This \"is possible\" national number (length) check has been commented out\n  // because it's superceded by the (effectively) same check done in the\n  // `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\n  // In other words, why run the same check twice if it could only be run once.\n  // // Check the national (significant) number length after extracting national prefix and carrier code.\n  // // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\n  // // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\n  // if (metadata.possibleLengths()) {\n  // \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\n  // \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\n  // \t\treturn false\n  // \t}\n  // }\n\n\n  return true;\n}\n\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'TOO_SHORT':\n    case 'INVALID_LENGTH':\n      // This library ignores \"local-only\" phone numbers (for simplicity).\n      // See the readme for more info on what are \"local-only\" phone numbers.\n      // case 'IS_POSSIBLE_LOCAL_ONLY':\n      return false;\n\n    default:\n      return true;\n  }\n}\n//# sourceMappingURL=extractNationalNumber.js.map","import Metadata from '../metadata.js';\nimport matchesEntirely from './matchesEntirely.js';\nimport extractNationalNumber from './extractNationalNumber.js';\nimport checkNumberLength from './checkNumberLength.js';\nimport getCountryCallingCode from '../getCountryCallingCode.js';\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n\n    var _extractNationalNumbe2 = extractNationalNumber(number, metadata),\n        nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}\n//# sourceMappingURL=extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js.map","import stripIddPrefix from './stripIddPrefix.js';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js';\nimport Metadata from '../metadata.js';\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js';\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCodeSource: string?, countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport default function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  }\n\n  var isNumberWithIddPrefix; // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      isNumberWithIddPrefix = true;\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin.countryCallingCode,\n            shorterNumber = _extractCountryCallin.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCodeSource: 'FROM_NUMBER_WITHOUT_PLUS_SIGN',\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        // No need to set it to `UNSPECIFIED`. It can be just `undefined`.\n        // countryCallingCodeSource: 'UNSPECIFIED',\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCodeSource: isNumberWithIddPrefix ? 'FROM_NUMBER_WITH_IDD' : 'FROM_NUMBER_WITH_PLUS_SIGN',\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n} // The possible values for the returned `countryCallingCodeSource` are:\n//\n// Copy-pasted from:\n// https://github.com/google/libphonenumber/blob/master/resources/phonenumber.proto\n//\n// // The source from which the country_code is derived. This is not set in the\n// // general parsing method, but in the method that parses and keeps raw_input.\n// // New fields could be added upon request.\n// enum CountryCodeSource {\n//  // Default value returned if this is not set, because the phone number was\n//  // created using parse, not parseAndKeepRawInput. hasCountryCodeSource will\n//  // return false if this is the case.\n//  UNSPECIFIED = 0;\n//\n//  // The country_code is derived based on a phone number with a leading \"+\",\n//  // e.g. the French number \"+33 1 42 68 53 00\".\n//  FROM_NUMBER_WITH_PLUS_SIGN = 1;\n//\n//  // The country_code is derived based on a phone number with a leading IDD,\n//  // e.g. the French number \"011 33 1 42 68 53 00\", as it is dialled from US.\n//  FROM_NUMBER_WITH_IDD = 5;\n//\n//  // The country_code is derived based on a phone number without a leading\n//  // \"+\", e.g. the French number \"33 1 42 68 53 00\" when defaultCountry is\n//  // supplied as France.\n//  FROM_NUMBER_WITHOUT_PLUS_SIGN = 10;\n//\n//  // The country_code is derived NOT based on the phone number itself, but\n//  // from the defaultCountry parameter provided in the parsing function by the\n//  // clients. This happens mostly for numbers written in the national format\n//  // (without country code). For example, this would be set when parsing the\n//  // French number \"01 42 68 53 00\", when defaultCountry is supplied as\n//  // France.\n//  FROM_DEFAULT_COUNTRY = 20;\n// }\n//# sourceMappingURL=extractCountryCallingCode.js.map","import { VALID_PUNCTUATION } from '../constants.js'; // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n//# sourceMappingURL=applyInternationalSeparatorStyle.js.map","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle.js'; // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly. Therefore, we use `\\d`, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport default function formatNationalNumberUsingFormat(number, format, _ref) {\n  var useInternationalFormat = _ref.useInternationalFormat,\n      withNationalPrefix = _ref.withNationalPrefix,\n      carrierCode = _ref.carrierCode,\n      metadata = _ref.metadata;\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : // This library doesn't use `domestic_carrier_code_formatting_rule`,\n  // because that one is only used when formatting phone numbers\n  // for dialing from a mobile phone, and this is not a dialing library.\n  // carrierCode && format.domesticCarrierCodeFormattingRule()\n  // \t// First, replace the $CC in the formatting rule with the desired carrier code.\n  // \t// Then, replace the $FG in the formatting rule with the first group\n  // \t// and the carrier code combined in the appropriate way.\n  // \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\n  // \t: (\n  // \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\n  // \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n  // \t\t\t: format.format()\n  // \t)\n  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n//# sourceMappingURL=formatNationalNumberUsingFormat.js.map","import Metadata from '../metadata.js';\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport default function getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (countryMetadata.defaultIDDPrefix()) {\n    return countryMetadata.defaultIDDPrefix();\n  }\n\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n}\n//# sourceMappingURL=getIddPrefix.js.map","import { VALID_DIGITS } from '../../constants.js'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(VALID_DIGITS, \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\n\nexport default function createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}\n//# sourceMappingURL=createExtensionPattern.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from '../constants.js';\nimport createExtensionPattern from './extension/createExtensionPattern.js'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nexport var VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // This regular expression isn't present in Google's `libphonenumber`\n// and is only used to determine whether the phone number being input\n// is too short for it to even consider it a \"valid\" number.\n// This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nvar VALID_PHONE_NUMBER_START_REG_EXP = new RegExp('^' + '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){1,2}' + '$', 'i');\nexport var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + createExtensionPattern() + ')?'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n} // This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nexport function isViablePhoneNumberStart(number) {\n  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport isViablePhoneNumber from './isViablePhoneNumber.js'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = _createForOfIteratorHelperLoose(text.split(';')), _step; !(_step = _iterator()).done;) {\n    var part = _step.value;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref) {\n  var number = _ref.number,\n      ext = _ref.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js';\nimport Metadata, { getCountryCallingCode } from './metadata.js';\nimport getIddPrefix from './helpers/getIddPrefix.js';\nimport { formatRFC3966 } from './helpers/RFC3966.js';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  }\n};\n/**\r\n * Formats a phone number.\r\n *\r\n * format(phoneNumberInstance, 'INTERNATIONAL', { ..., v2: true }, metadata)\r\n * format(phoneNumberInstance, 'NATIONAL', { ..., v2: true }, metadata)\r\n *\r\n * format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', { ... }, metadata)\r\n * format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {string} format\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\n\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\n\nexport function chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = _createForOfIteratorHelperLoose(availableFormats), _step; !(_step = _iterator()).done;) {\n    var format = _step.value;\n\n    // Validate leading digits.\n    // The test case for \"else path\" could be found by searching for\n    // \"format.leadingDigitsPatterns().length === 0\".\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formattedNumber;\n  }\n\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}\n//# sourceMappingURL=format.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport Metadata, { validateMetadata } from './metadata.js';\nimport isPossibleNumber from './isPossible.js';\nimport isValidNumber from './isValid.js'; // import checkNumberLength from './helpers/checkNumberLength.js'\n\nimport getNumberType from './helpers/getNumberType.js';\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport isObject from './helpers/isObject.js';\nimport formatNumber from './format.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber = /*#__PURE__*/function () {\n  /**\r\n   * @param  {string} countryOrCountryCallingCode\r\n   * @param  {string} nationalNumber\r\n   * @param  {object} metadata — Metadata JSON\r\n   * @return {PhoneNumber}\r\n   */\n  function PhoneNumber(countryOrCountryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    // Validate `countryOrCountryCallingCode` argument.\n    if (!countryOrCountryCallingCode) {\n      throw new TypeError('First argument is required');\n    }\n\n    if (typeof countryOrCountryCallingCode !== 'string') {\n      throw new TypeError('First argument must be a string');\n    } // In case of public API use: `constructor(number, metadata)`.\n    // Transform the arguments from `constructor(number, metadata)` to\n    // `constructor(countryOrCountryCallingCode, nationalNumber, metadata)`.\n\n\n    if (countryOrCountryCallingCode[0] === '+' && !nationalNumber) {\n      throw new TypeError('`metadata` argument not passed');\n    }\n\n    if (isObject(nationalNumber) && isObject(nationalNumber.countries)) {\n      metadata = nationalNumber;\n      var e164Number = countryOrCountryCallingCode;\n\n      if (!E164_NUMBER_REGEXP.test(e164Number)) {\n        throw new Error('Invalid `number` argument passed: must consist of a \"+\" followed by digits');\n      }\n\n      var _extractCountryCallin = extractCountryCallingCode(e164Number, undefined, undefined, metadata),\n          _countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      nationalNumber = number;\n      countryOrCountryCallingCode = _countryCallingCode;\n\n      if (!nationalNumber) {\n        throw new Error('Invalid `number` argument passed: too short');\n      }\n    } // Validate `nationalNumber` argument.\n\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` argument is required');\n    }\n\n    if (typeof nationalNumber !== 'string') {\n      throw new TypeError('`nationalNumber` argument must be a string');\n    } // Validate `metadata` argument.\n\n\n    validateMetadata(metadata); // Initialize properties.\n\n    var _getCountryAndCountry = getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadata),\n        country = _getCountryAndCountry.country,\n        countryCallingCode = _getCountryAndCountry.countryCallingCode;\n\n    this.country = country;\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber; // Exclude `metadata` property output from `PhoneNumber.toString()`\n    // so that it doesn't clutter the console output of Node.js.\n    // Previously, when Node.js did `console.log(new PhoneNumber(...))`,\n    // it would output the whole internal structure of the `metadata` object.\n\n    this.getMetadata = function () {\n      return metadata;\n    };\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"getPossibleCountries\",\n    value: function getPossibleCountries() {\n      if (this.country) {\n        return [this.country];\n      }\n\n      return getPossibleCountriesForNumber(this.countryCallingCode, this.nationalNumber, this.getMetadata());\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.getMetadata());\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,\n    // but later it was found out that it doesn't include the possible `TOO_SHORT` result\n    // returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,\n    // so eventually I simply commented out this method from the `PhoneNumber` class\n    // and just left the `validatePhoneNumberLength()` function, even though that one would require\n    // and additional step to also validate the actual country / calling code of the phone number.\n    // validateLength() {\n    // \tconst metadata = new Metadata(this.getMetadata())\n    // \tmetadata.selectNumberingPlan(this.countryCallingCode)\n    // \tconst result = checkNumberLength(this.nationalNumber, metadata)\n    // \tif (result !== 'IS_POSSIBLE') {\n    // \t\treturn result\n    // \t}\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread(_objectSpread({}, options), {}, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.getMetadata());\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\n\nfunction getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {\n  var country;\n  var countryCallingCode;\n  var metadata = new Metadata(metadataJson); // If country code is passed then derive `countryCallingCode` from it.\n  // Also store the country code as `.country`.\n\n  if (isCountryCode(countryOrCountryCallingCode)) {\n    country = countryOrCountryCallingCode;\n    metadata.selectNumberingPlan(country);\n    countryCallingCode = metadata.countryCallingCode();\n  } else {\n    countryCallingCode = countryOrCountryCallingCode;\n    /* istanbul ignore if */\n\n    if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n      if (metadata.isNonGeographicCallingCode(countryCallingCode)) {\n        country = '001';\n      }\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode\n  };\n}\n\nvar E164_NUMBER_REGEXP = /^\\+\\d+$/;\n//# sourceMappingURL=PhoneNumber.js.map","function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// https://stackoverflow.com/a/46971044/970769\n// \"Breaking changes in Typescript 2.1\"\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\nvar ParseError = /*#__PURE__*/function (_Error) {\n  _inherits(ParseError, _Error);\n\n  var _super = _createSuper(ParseError);\n\n  function ParseError(code) {\n    var _this;\n\n    _classCallCheck(this, ParseError);\n\n    _this = _super.call(this, code); // Set the prototype explicitly.\n    // Any subclass of FooError will have to manually set the prototype as well.\n\n    Object.setPrototypeOf(_assertThisInitialized(_this), ParseError.prototype);\n    _this.name = _this.constructor.name;\n    return _this;\n  }\n\n  return _createClass(ParseError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexport { ParseError as default };\n//# sourceMappingURL=ParseError.js.map","import createExtensionPattern from './createExtensionPattern.js'; // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport default function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}\n//# sourceMappingURL=extractExtension.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}\n//# sourceMappingURL=parseDigits.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { parseDigit } from './helpers/parseDigits.js';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {\n    var character = _step.value;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {function?} emitEvent - An optional \"emit event\" function.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters, emitEvent) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      // `emitEvent` argument was added to this `export`ed function on Dec 26th, 2023.\n      // Any 3rd-party code that used to `import` and call this function before that\n      // won't be passing any `emitEvent` argument.\n      //\n      // The addition of the `emitEvent` argument was to fix the slightly-weird behavior\n      // of parsing an input string when the user inputs something like `\"2+7\"\n      // https://github.com/catamphetamine/react-phone-number-input/issues/437\n      //\n      // If the parser encounters an unexpected `+` in a string being parsed\n      // then it simply discards that out-of-place `+` and any following characters.\n      //\n      if (typeof emitEvent === 'function') {\n        emitEvent('end');\n      }\n\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Metadata from '../metadata.js';\nimport getNumberType from './getNumberType.js';\nexport default function getCountryByNationalNumber(nationalPhoneNumber, _ref) {\n  var countries = _ref.countries,\n      defaultCountry = _ref.defaultCountry,\n      metadata = _ref.metadata;\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata); // const matchingCountries = []\n\n  for (var _iterator = _createForOfIteratorHelperLoose(countries), _step; !(_step = _iterator()).done;) {\n    var country = _step.value;\n    metadata.country(country); // \"Leading digits\" patterns are only defined for about 20% of all countries.\n    // By definition, matching \"leading digits\" is a sufficient but not a necessary\n    // condition for a phone number to belong to a country.\n    // The point of \"leading digits\" check is that it's the fastest one to get a match.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n    // I'd suppose that \"leading digits\" patterns are mutually exclusive for different countries\n    // because of the intended use of that feature.\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      // If both the `defaultCountry` and the \"main\" one match the phone number,\n      // don't prefer the `defaultCountry` over the \"main\" one.\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/154\n      return country; // // If the `defaultCountry` is among the `matchingCountries` then return it.\n      // if (defaultCountry) {\n      // \tif (country === defaultCountry) {\n      // \t\treturn country\n      // \t}\n      // \tmatchingCountries.push(country)\n      // } else {\n      // \treturn country\n      // }\n    }\n  } // // Return the first (\"main\") one of the `matchingCountries`.\n  // if (matchingCountries.length > 0) {\n  // \treturn matchingCountries[0]\n  // }\n\n}\n//# sourceMappingURL=getCountryByNationalNumber.js.map","import getCountryByNationalNumber from './getCountryByNationalNumber.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, _ref) {\n  var nationalPhoneNumber = _ref.nationalNumber,\n      defaultCountry = _ref.defaultCountry,\n      metadata = _ref.metadata;\n\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  }\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return getCountryByNationalNumber(nationalPhoneNumber, {\n    countries: possibleCountries,\n    defaultCountry: defaultCountry,\n    metadata: metadata.metadata\n  });\n}\n//# sourceMappingURL=getCountryByCallingCode.js.map","// When phone numbers are written in `RFC3966` format — `\"tel:+12133734253\"` —\n// they can have their \"calling code\" part written separately in a `phone-context` parameter.\n// Example: `\"tel:12133734253;phone-context=+1\"`.\n// This function parses the full phone number from the local number and the `phone-context`\n// when the `phone-context` contains a `+` sign.\nimport { VALID_DIGITS // PLUS_CHARS\n} from '../constants.js';\nexport var PLUS_SIGN = '+';\nvar RFC3966_VISUAL_SEPARATOR_ = '[\\\\-\\\\.\\\\(\\\\)]?';\nvar RFC3966_PHONE_DIGIT_ = '(' + '[' + VALID_DIGITS + ']' + '|' + RFC3966_VISUAL_SEPARATOR_ + ')';\nvar RFC3966_GLOBAL_NUMBER_DIGITS_ = '^' + '\\\\' + PLUS_SIGN + RFC3966_PHONE_DIGIT_ + '*' + '[' + VALID_DIGITS + ']' + RFC3966_PHONE_DIGIT_ + '*' + '$';\n/**\r\n * Regular expression of valid global-number-digits for the phone-context\r\n * parameter, following the syntax defined in RFC3966.\r\n */\n\nvar RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_ = new RegExp(RFC3966_GLOBAL_NUMBER_DIGITS_, 'g'); // In this port of Google's library, we don't accept alpha characters in phone numbers.\n// const ALPHANUM_ = VALID_ALPHA_ + VALID_DIGITS\n\nvar ALPHANUM_ = VALID_DIGITS;\nvar RFC3966_DOMAINLABEL_ = '[' + ALPHANUM_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*';\nvar VALID_ALPHA_ = 'a-zA-Z';\nvar RFC3966_TOPLABEL_ = '[' + VALID_ALPHA_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*';\nvar RFC3966_DOMAINNAME_ = '^(' + RFC3966_DOMAINLABEL_ + '\\\\.)*' + RFC3966_TOPLABEL_ + '\\\\.?$';\n/**\r\n * Regular expression of valid domainname for the phone-context parameter,\r\n * following the syntax defined in RFC3966.\r\n */\n\nvar RFC3966_DOMAINNAME_PATTERN_ = new RegExp(RFC3966_DOMAINNAME_, 'g');\nexport var RFC3966_PREFIX_ = 'tel:';\nexport var RFC3966_PHONE_CONTEXT_ = ';phone-context=';\nexport var RFC3966_ISDN_SUBADDRESS_ = ';isub=';\n/**\r\n * Extracts the value of the phone-context parameter of `numberToExtractFrom`,\r\n * following the syntax defined in RFC3966.\r\n *\r\n * @param {string} numberToExtractFrom\r\n * @return {string|null} the extracted string (possibly empty), or `null` if no phone-context parameter is found.\r\n */\n\nexport default function extractPhoneContext(numberToExtractFrom) {\n  var indexOfPhoneContext = numberToExtractFrom.indexOf(RFC3966_PHONE_CONTEXT_); // If no phone-context parameter is present\n\n  if (indexOfPhoneContext < 0) {\n    return null;\n  }\n\n  var phoneContextStart = indexOfPhoneContext + RFC3966_PHONE_CONTEXT_.length; // If phone-context parameter is empty\n\n  if (phoneContextStart >= numberToExtractFrom.length) {\n    return '';\n  }\n\n  var phoneContextEnd = numberToExtractFrom.indexOf(';', phoneContextStart); // If phone-context is not the last parameter\n\n  if (phoneContextEnd >= 0) {\n    return numberToExtractFrom.substring(phoneContextStart, phoneContextEnd);\n  } else {\n    return numberToExtractFrom.substring(phoneContextStart);\n  }\n}\n/**\r\n * Returns whether the value of phoneContext follows the syntax defined in RFC3966.\r\n *\r\n * @param {string|null} phoneContext\r\n * @return {boolean}\r\n */\n\nexport function isPhoneContextValid(phoneContext) {\n  if (phoneContext === null) {\n    return true;\n  }\n\n  if (phoneContext.length === 0) {\n    return false;\n  } // Does phone-context value match pattern of global-number-digits or domainname.\n\n\n  return RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_.test(phoneContext) || RFC3966_DOMAINNAME_PATTERN_.test(phoneContext);\n}\n//# sourceMappingURL=extractPhoneContext.js.map","import extractPhoneContext, { isPhoneContextValid, PLUS_SIGN, RFC3966_PREFIX_, RFC3966_PHONE_CONTEXT_, RFC3966_ISDN_SUBADDRESS_ } from './extractPhoneContext.js';\nimport ParseError from '../ParseError.js';\n/**\r\n * @param  {string} numberToParse\r\n * @param  {string} nationalNumber\r\n * @return {}\r\n */\n\nexport default function extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(numberToParse, _ref) {\n  var extractFormattedPhoneNumber = _ref.extractFormattedPhoneNumber;\n  var phoneContext = extractPhoneContext(numberToParse);\n\n  if (!isPhoneContextValid(phoneContext)) {\n    throw new ParseError('NOT_A_NUMBER');\n  }\n\n  var phoneNumberString;\n\n  if (phoneContext === null) {\n    // Extract a possible number from the string passed in.\n    // (this strips leading characters that could not be the start of a phone number)\n    phoneNumberString = extractFormattedPhoneNumber(numberToParse) || '';\n  } else {\n    phoneNumberString = ''; // If the phone context contains a phone number prefix, we need to capture\n    // it, whereas domains will be ignored.\n\n    if (phoneContext.charAt(0) === PLUS_SIGN) {\n      phoneNumberString += phoneContext;\n    } // Now append everything between the \"tel:\" prefix and the phone-context.\n    // This should include the national number, an optional extension or\n    // isdn-subaddress component. Note we also handle the case when \"tel:\" is\n    // missing, as we have seen in some of the phone number inputs.\n    // In that case, we append everything from the beginning.\n\n\n    var indexOfRfc3966Prefix = numberToParse.indexOf(RFC3966_PREFIX_);\n    var indexOfNationalNumber; // RFC 3966 \"tel:\" prefix is preset at this stage because\n    // `isPhoneContextValid()` requires it to be present.\n\n    /* istanbul ignore else */\n\n    if (indexOfRfc3966Prefix >= 0) {\n      indexOfNationalNumber = indexOfRfc3966Prefix + RFC3966_PREFIX_.length;\n    } else {\n      indexOfNationalNumber = 0;\n    }\n\n    var indexOfPhoneContext = numberToParse.indexOf(RFC3966_PHONE_CONTEXT_);\n    phoneNumberString += numberToParse.substring(indexOfNationalNumber, indexOfPhoneContext);\n  } // Delete the isdn-subaddress and everything after it if it is present.\n  // Note extension won't appear at the same time with isdn-subaddress\n  // according to paragraph 5.3 of the RFC3966 spec.\n\n\n  var indexOfIsdn = phoneNumberString.indexOf(RFC3966_ISDN_SUBADDRESS_);\n\n  if (indexOfIsdn > 0) {\n    phoneNumberString = phoneNumberString.substring(0, indexOfIsdn);\n  } // If both phone context and isdn-subaddress are absent but other\n  // parameters are present, the parameters are left in nationalNumber.\n  // This is because we are concerned about deleting content from a potential\n  // number string when there is no strong evidence that the number is\n  // actually written in RFC3966.\n\n\n  if (phoneNumberString !== '') {\n    return phoneNumberString;\n  }\n}\n//# sourceMappingURL=extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN } from './constants.js';\nimport ParseError from './ParseError.js';\nimport Metadata from './metadata.js';\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js';\nimport extractExtension from './helpers/extension/extractExtension.js';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js';\nimport getCountryCallingCode from './getCountryCallingCode.js';\nimport { isPossibleNumber } from './isPossible.js'; // import { parseRFC3966 } from './helpers/RFC3966.js'\n\nimport PhoneNumber from './PhoneNumber.js';\nimport matchesEntirely from './helpers/matchesEntirely.js';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js';\nimport extractNationalNumber from './helpers/extractNationalNumber.js';\nimport stripIddPrefix from './helpers/stripIddPrefix.js';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js';\nimport extractFormattedPhoneNumberFromPossibleRfc3966NumberUri from './helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // Examples:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\n/**\r\n * Parses a phone number.\r\n *\r\n * parse('123456789', { defaultCountry: 'RU', v2: true }, metadata)\r\n * parse('123456789', { defaultCountry: 'RU' }, metadata)\r\n * parse('123456789', undefined, metadata)\r\n *\r\n * @param  {string} input\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {object|PhoneNumber?} If `options.v2: true` flag is passed, it returns a `PhoneNumber?` instance. Otherwise, returns an object of shape `{ phone: '...', country: '...' }` (or just `{}` if no phone number was parsed).\r\n */\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2, options.extract),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext,\n      error = _parseInput.error; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      if (error === 'TOO_SHORT') {\n        throw new ParseError('TOO_SHORT');\n      }\n\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      countryCallingCodeSource = _parsePhoneNumber.countryCallingCodeSource,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    phoneNumber.__countryCallingCodeSource = countryCallingCodeSource;\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  } // isInternational: countryCallingCode !== undefined\n\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nfunction _extractFormattedPhoneNumber(text, extract, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  }\n\n  if (extract === false) {\n    return text;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2, extract) {\n  // // Parse RFC 3966 phone number URI.\n  // if (text && text.indexOf('tel:') === 0) {\n  // \treturn parseRFC3966(text)\n  // }\n  // let number = extractFormattedPhoneNumber(text, extract, v2)\n  var number = extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(text, {\n    extractFormattedPhoneNumber: function extractFormattedPhoneNumber(text) {\n      return _extractFormattedPhoneNumber(text, extract, v2);\n    }\n  }); // If the phone number is not viable, then abort.\n\n  if (!number) {\n    return {};\n  }\n\n  if (!isViablePhoneNumber(number)) {\n    if (isViablePhoneNumberStart(number)) {\n      return {\n        error: 'TOO_SHORT'\n      };\n    }\n\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = extractExtension(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCodeSource = _extractCountryCallin.countryCallingCodeSource,\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  } // If `formattedPhoneNumber` is passed in \"national\" format\n  // then `number` is defined and `countryCallingCode` is `undefined`.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n    if (defaultCountry) {\n      country = defaultCountry;\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          country = '001';\n        }\n      }\n    }\n\n    countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n  } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCodeSource: countryCallingCodeSource,\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = getCountryByCallingCode(countryCallingCode, {\n    nationalNumber: nationalNumber,\n    defaultCountry: defaultCountry,\n    metadata: metadata\n  });\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    countryCallingCodeSource: countryCallingCodeSource,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n//# sourceMappingURL=parse.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport isObject from './helpers/isObject.js'; // Extracts the following properties from function arguments:\n// * input `text`\n// * `options` object\n// * `metadata` JSON\n\nexport default function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n    if (arg_3) {\n      options = arg_2;\n      metadata = arg_3;\n    } else {\n      metadata = arg_2;\n    }\n  } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n}\n//# sourceMappingURL=normalizeArguments.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parsePhoneNumberWithError from './parsePhoneNumberWithError_.js';\nimport ParseError from './ParseError.js';\nimport { isSupportedCountry } from './metadata.js';\nexport default function parsePhoneNumber(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return parsePhoneNumberWithError(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {//\n    } else {\n      throw error;\n    }\n  }\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport normalizeArguments from './normalizeArguments.js';\nimport parsePhoneNumber from './parsePhoneNumber_.js';\nexport default function isValidPhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  options = _objectSpread(_objectSpread({}, options), {}, {\n    extract: false\n  });\n  var phoneNumber = parsePhoneNumber(text, options, metadata);\n  return phoneNumber && phoneNumber.isValid() || false;\n}\n//# sourceMappingURL=isValidPhoneNumber.js.map","import withMetadataArgument from './withMetadataArgument.js'\r\nimport { isValidPhoneNumber as _isValidPhoneNumber } from '../../core/index.js'\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn withMetadataArgument(_isValidPhoneNumber, arguments)\r\n}","import { isValidPhoneNumber } from 'libphonenumber-js';\n\n;(function () {\n    'use strict';\n\n    const addValidator = function() {\n        // add validator method\n        if (window.jQuery) {\n            (function($) {\n                if ($.validator) {\n                    $.validator.addMethod(\"internationalPhone\", function(phone_number, element) {\n                        let hidden = $(element).closest('.field').find('input[type=\"hidden\"]').first();\n                        if (typeof hidden !== 'undefined' && hidden !== null) {\n                            let value = hidden.val();\n                            if (value.length === 0 && this.optional(element)) {\n                                return true;\n                            }\n                            return isValidPhoneNumber(value);\n                        } else {\n                            console.error('internationalPhone: hidden field not found');\n                        }\n                        return false;\n                    }, \"Please enter a valid phone number.\");\n                }\n            })(window.jQuery);\n        }\n    }\n\n    if (document.readyState === \"loading\") { // Loading hasn't finished yet\n        document.addEventListener(\"DOMContentLoaded\", addValidator);\n    } else { // `DOMContentLoaded` has already fired\n        addValidator();\n    }\n}());\n","/*\n * International Telephone Input v24.8.2\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// UMD\n(function(factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    window.intlTelInput = factory();\n  }\n}(() => {\n\nvar factoryOutput = (() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n  // src/js/intl-tel-input.ts\n  var intl_tel_input_exports = {};\n  __export(intl_tel_input_exports, {\n    Iti: () => Iti,\n    default: () => intl_tel_input_default\n  });\n\n  // src/js/intl-tel-input/data.ts\n  var rawCountryData = [\n    [\n      \"af\",\n      // Afghanistan\n      \"93\"\n    ],\n    [\n      \"ax\",\n      // Åland Islands\n      \"358\",\n      1,\n      [\"18\"]\n    ],\n    [\n      \"al\",\n      // Albania\n      \"355\"\n    ],\n    [\n      \"dz\",\n      // Algeria\n      \"213\"\n    ],\n    [\n      \"as\",\n      // American Samoa\n      \"1\",\n      5,\n      [\"684\"]\n    ],\n    [\n      \"ad\",\n      // Andorra\n      \"376\"\n    ],\n    [\n      \"ao\",\n      // Angola\n      \"244\"\n    ],\n    [\n      \"ai\",\n      // Anguilla\n      \"1\",\n      6,\n      [\"264\"]\n    ],\n    [\n      \"ag\",\n      // Antigua and Barbuda\n      \"1\",\n      7,\n      [\"268\"]\n    ],\n    [\n      \"ar\",\n      // Argentina\n      \"54\"\n    ],\n    [\n      \"am\",\n      // Armenia\n      \"374\"\n    ],\n    [\n      \"aw\",\n      // Aruba\n      \"297\"\n    ],\n    [\n      \"ac\",\n      // Ascension Island\n      \"247\"\n    ],\n    [\n      \"au\",\n      // Australia\n      \"61\",\n      0\n    ],\n    [\n      \"at\",\n      // Austria\n      \"43\"\n    ],\n    [\n      \"az\",\n      // Azerbaijan\n      \"994\"\n    ],\n    [\n      \"bs\",\n      // Bahamas\n      \"1\",\n      8,\n      [\"242\"]\n    ],\n    [\n      \"bh\",\n      // Bahrain\n      \"973\"\n    ],\n    [\n      \"bd\",\n      // Bangladesh\n      \"880\"\n    ],\n    [\n      \"bb\",\n      // Barbados\n      \"1\",\n      9,\n      [\"246\"]\n    ],\n    [\n      \"by\",\n      // Belarus\n      \"375\"\n    ],\n    [\n      \"be\",\n      // Belgium\n      \"32\"\n    ],\n    [\n      \"bz\",\n      // Belize\n      \"501\"\n    ],\n    [\n      \"bj\",\n      // Benin\n      \"229\"\n    ],\n    [\n      \"bm\",\n      // Bermuda\n      \"1\",\n      10,\n      [\"441\"]\n    ],\n    [\n      \"bt\",\n      // Bhutan\n      \"975\"\n    ],\n    [\n      \"bo\",\n      // Bolivia\n      \"591\"\n    ],\n    [\n      \"ba\",\n      // Bosnia and Herzegovina\n      \"387\"\n    ],\n    [\n      \"bw\",\n      // Botswana\n      \"267\"\n    ],\n    [\n      \"br\",\n      // Brazil\n      \"55\"\n    ],\n    [\n      \"io\",\n      // British Indian Ocean Territory\n      \"246\"\n    ],\n    [\n      \"vg\",\n      // British Virgin Islands\n      \"1\",\n      11,\n      [\"284\"]\n    ],\n    [\n      \"bn\",\n      // Brunei\n      \"673\"\n    ],\n    [\n      \"bg\",\n      // Bulgaria\n      \"359\"\n    ],\n    [\n      \"bf\",\n      // Burkina Faso\n      \"226\"\n    ],\n    [\n      \"bi\",\n      // Burundi\n      \"257\"\n    ],\n    [\n      \"kh\",\n      // Cambodia\n      \"855\"\n    ],\n    [\n      \"cm\",\n      // Cameroon\n      \"237\"\n    ],\n    [\n      \"ca\",\n      // Canada\n      \"1\",\n      1,\n      [\"204\", \"226\", \"236\", \"249\", \"250\", \"263\", \"289\", \"306\", \"343\", \"354\", \"365\", \"367\", \"368\", \"382\", \"387\", \"403\", \"416\", \"418\", \"428\", \"431\", \"437\", \"438\", \"450\", \"584\", \"468\", \"474\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"584\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"683\", \"705\", \"709\", \"742\", \"753\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"879\", \"902\", \"905\"]\n    ],\n    [\n      \"cv\",\n      // Cape Verde\n      \"238\"\n    ],\n    [\n      \"bq\",\n      // Caribbean Netherlands\n      \"599\",\n      1,\n      [\"3\", \"4\", \"7\"]\n    ],\n    [\n      \"ky\",\n      // Cayman Islands\n      \"1\",\n      12,\n      [\"345\"]\n    ],\n    [\n      \"cf\",\n      // Central African Republic\n      \"236\"\n    ],\n    [\n      \"td\",\n      // Chad\n      \"235\"\n    ],\n    [\n      \"cl\",\n      // Chile\n      \"56\"\n    ],\n    [\n      \"cn\",\n      // China\n      \"86\"\n    ],\n    [\n      \"cx\",\n      // Christmas Island\n      \"61\",\n      2,\n      [\"89164\"]\n    ],\n    [\n      \"cc\",\n      // Cocos (Keeling) Islands\n      \"61\",\n      1,\n      [\"89162\"]\n    ],\n    [\n      \"co\",\n      // Colombia\n      \"57\"\n    ],\n    [\n      \"km\",\n      // Comoros\n      \"269\"\n    ],\n    [\n      \"cg\",\n      // Congo (Brazzaville)\n      \"242\"\n    ],\n    [\n      \"cd\",\n      // Congo (Kinshasa)\n      \"243\"\n    ],\n    [\n      \"ck\",\n      // Cook Islands\n      \"682\"\n    ],\n    [\n      \"cr\",\n      // Costa Rica\n      \"506\"\n    ],\n    [\n      \"ci\",\n      // Côte d'Ivoire\n      \"225\"\n    ],\n    [\n      \"hr\",\n      // Croatia\n      \"385\"\n    ],\n    [\n      \"cu\",\n      // Cuba\n      \"53\"\n    ],\n    [\n      \"cw\",\n      // Curaçao\n      \"599\",\n      0\n    ],\n    [\n      \"cy\",\n      // Cyprus\n      \"357\"\n    ],\n    [\n      \"cz\",\n      // Czech Republic\n      \"420\"\n    ],\n    [\n      \"dk\",\n      // Denmark\n      \"45\"\n    ],\n    [\n      \"dj\",\n      // Djibouti\n      \"253\"\n    ],\n    [\n      \"dm\",\n      // Dominica\n      \"1\",\n      13,\n      [\"767\"]\n    ],\n    [\n      \"do\",\n      // Dominican Republic\n      \"1\",\n      2,\n      [\"809\", \"829\", \"849\"]\n    ],\n    [\n      \"ec\",\n      // Ecuador\n      \"593\"\n    ],\n    [\n      \"eg\",\n      // Egypt\n      \"20\"\n    ],\n    [\n      \"sv\",\n      // El Salvador\n      \"503\"\n    ],\n    [\n      \"gq\",\n      // Equatorial Guinea\n      \"240\"\n    ],\n    [\n      \"er\",\n      // Eritrea\n      \"291\"\n    ],\n    [\n      \"ee\",\n      // Estonia\n      \"372\"\n    ],\n    [\n      \"sz\",\n      // Eswatini\n      \"268\"\n    ],\n    [\n      \"et\",\n      // Ethiopia\n      \"251\"\n    ],\n    [\n      \"fk\",\n      // Falkland Islands (Malvinas)\n      \"500\"\n    ],\n    [\n      \"fo\",\n      // Faroe Islands\n      \"298\"\n    ],\n    [\n      \"fj\",\n      // Fiji\n      \"679\"\n    ],\n    [\n      \"fi\",\n      // Finland\n      \"358\",\n      0\n    ],\n    [\n      \"fr\",\n      // France\n      \"33\"\n    ],\n    [\n      \"gf\",\n      // French Guiana\n      \"594\"\n    ],\n    [\n      \"pf\",\n      // French Polynesia\n      \"689\"\n    ],\n    [\n      \"ga\",\n      // Gabon\n      \"241\"\n    ],\n    [\n      \"gm\",\n      // Gambia\n      \"220\"\n    ],\n    [\n      \"ge\",\n      // Georgia\n      \"995\"\n    ],\n    [\n      \"de\",\n      // Germany\n      \"49\"\n    ],\n    [\n      \"gh\",\n      // Ghana\n      \"233\"\n    ],\n    [\n      \"gi\",\n      // Gibraltar\n      \"350\"\n    ],\n    [\n      \"gr\",\n      // Greece\n      \"30\"\n    ],\n    [\n      \"gl\",\n      // Greenland\n      \"299\"\n    ],\n    [\n      \"gd\",\n      // Grenada\n      \"1\",\n      14,\n      [\"473\"]\n    ],\n    [\n      \"gp\",\n      // Guadeloupe\n      \"590\",\n      0\n    ],\n    [\n      \"gu\",\n      // Guam\n      \"1\",\n      15,\n      [\"671\"]\n    ],\n    [\n      \"gt\",\n      // Guatemala\n      \"502\"\n    ],\n    [\n      \"gg\",\n      // Guernsey\n      \"44\",\n      1,\n      [\"1481\", \"7781\", \"7839\", \"7911\"]\n    ],\n    [\n      \"gn\",\n      // Guinea\n      \"224\"\n    ],\n    [\n      \"gw\",\n      // Guinea-Bissau\n      \"245\"\n    ],\n    [\n      \"gy\",\n      // Guyana\n      \"592\"\n    ],\n    [\n      \"ht\",\n      // Haiti\n      \"509\"\n    ],\n    [\n      \"hn\",\n      // Honduras\n      \"504\"\n    ],\n    [\n      \"hk\",\n      // Hong Kong SAR China\n      \"852\"\n    ],\n    [\n      \"hu\",\n      // Hungary\n      \"36\"\n    ],\n    [\n      \"is\",\n      // Iceland\n      \"354\"\n    ],\n    [\n      \"in\",\n      // India\n      \"91\"\n    ],\n    [\n      \"id\",\n      // Indonesia\n      \"62\"\n    ],\n    [\n      \"ir\",\n      // Iran\n      \"98\"\n    ],\n    [\n      \"iq\",\n      // Iraq\n      \"964\"\n    ],\n    [\n      \"ie\",\n      // Ireland\n      \"353\"\n    ],\n    [\n      \"im\",\n      // Isle of Man\n      \"44\",\n      2,\n      [\"1624\", \"74576\", \"7524\", \"7924\", \"7624\"]\n    ],\n    [\n      \"il\",\n      // Israel\n      \"972\"\n    ],\n    [\n      \"it\",\n      // Italy\n      \"39\",\n      0\n    ],\n    [\n      \"jm\",\n      // Jamaica\n      \"1\",\n      4,\n      [\"876\", \"658\"]\n    ],\n    [\n      \"jp\",\n      // Japan\n      \"81\"\n    ],\n    [\n      \"je\",\n      // Jersey\n      \"44\",\n      3,\n      [\"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\"]\n    ],\n    [\n      \"jo\",\n      // Jordan\n      \"962\"\n    ],\n    [\n      \"kz\",\n      // Kazakhstan\n      \"7\",\n      1,\n      [\"33\", \"7\"]\n    ],\n    [\n      \"ke\",\n      // Kenya\n      \"254\"\n    ],\n    [\n      \"ki\",\n      // Kiribati\n      \"686\"\n    ],\n    [\n      \"xk\",\n      // Kosovo\n      \"383\"\n    ],\n    [\n      \"kw\",\n      // Kuwait\n      \"965\"\n    ],\n    [\n      \"kg\",\n      // Kyrgyzstan\n      \"996\"\n    ],\n    [\n      \"la\",\n      // Laos\n      \"856\"\n    ],\n    [\n      \"lv\",\n      // Latvia\n      \"371\"\n    ],\n    [\n      \"lb\",\n      // Lebanon\n      \"961\"\n    ],\n    [\n      \"ls\",\n      // Lesotho\n      \"266\"\n    ],\n    [\n      \"lr\",\n      // Liberia\n      \"231\"\n    ],\n    [\n      \"ly\",\n      // Libya\n      \"218\"\n    ],\n    [\n      \"li\",\n      // Liechtenstein\n      \"423\"\n    ],\n    [\n      \"lt\",\n      // Lithuania\n      \"370\"\n    ],\n    [\n      \"lu\",\n      // Luxembourg\n      \"352\"\n    ],\n    [\n      \"mo\",\n      // Macao SAR China\n      \"853\"\n    ],\n    [\n      \"mg\",\n      // Madagascar\n      \"261\"\n    ],\n    [\n      \"mw\",\n      // Malawi\n      \"265\"\n    ],\n    [\n      \"my\",\n      // Malaysia\n      \"60\"\n    ],\n    [\n      \"mv\",\n      // Maldives\n      \"960\"\n    ],\n    [\n      \"ml\",\n      // Mali\n      \"223\"\n    ],\n    [\n      \"mt\",\n      // Malta\n      \"356\"\n    ],\n    [\n      \"mh\",\n      // Marshall Islands\n      \"692\"\n    ],\n    [\n      \"mq\",\n      // Martinique\n      \"596\"\n    ],\n    [\n      \"mr\",\n      // Mauritania\n      \"222\"\n    ],\n    [\n      \"mu\",\n      // Mauritius\n      \"230\"\n    ],\n    [\n      \"yt\",\n      // Mayotte\n      \"262\",\n      1,\n      [\"269\", \"639\"]\n    ],\n    [\n      \"mx\",\n      // Mexico\n      \"52\"\n    ],\n    [\n      \"fm\",\n      // Micronesia\n      \"691\"\n    ],\n    [\n      \"md\",\n      // Moldova\n      \"373\"\n    ],\n    [\n      \"mc\",\n      // Monaco\n      \"377\"\n    ],\n    [\n      \"mn\",\n      // Mongolia\n      \"976\"\n    ],\n    [\n      \"me\",\n      // Montenegro\n      \"382\"\n    ],\n    [\n      \"ms\",\n      // Montserrat\n      \"1\",\n      16,\n      [\"664\"]\n    ],\n    [\n      \"ma\",\n      // Morocco\n      \"212\",\n      0\n    ],\n    [\n      \"mz\",\n      // Mozambique\n      \"258\"\n    ],\n    [\n      \"mm\",\n      // Myanmar (Burma)\n      \"95\"\n    ],\n    [\n      \"na\",\n      // Namibia\n      \"264\"\n    ],\n    [\n      \"nr\",\n      // Nauru\n      \"674\"\n    ],\n    [\n      \"np\",\n      // Nepal\n      \"977\"\n    ],\n    [\n      \"nl\",\n      // Netherlands\n      \"31\"\n    ],\n    [\n      \"nc\",\n      // New Caledonia\n      \"687\"\n    ],\n    [\n      \"nz\",\n      // New Zealand\n      \"64\"\n    ],\n    [\n      \"ni\",\n      // Nicaragua\n      \"505\"\n    ],\n    [\n      \"ne\",\n      // Niger\n      \"227\"\n    ],\n    [\n      \"ng\",\n      // Nigeria\n      \"234\"\n    ],\n    [\n      \"nu\",\n      // Niue\n      \"683\"\n    ],\n    [\n      \"nf\",\n      // Norfolk Island\n      \"672\"\n    ],\n    [\n      \"kp\",\n      // North Korea\n      \"850\"\n    ],\n    [\n      \"mk\",\n      // North Macedonia\n      \"389\"\n    ],\n    [\n      \"mp\",\n      // Northern Mariana Islands\n      \"1\",\n      17,\n      [\"670\"]\n    ],\n    [\n      \"no\",\n      // Norway\n      \"47\",\n      0\n    ],\n    [\n      \"om\",\n      // Oman\n      \"968\"\n    ],\n    [\n      \"pk\",\n      // Pakistan\n      \"92\"\n    ],\n    [\n      \"pw\",\n      // Palau\n      \"680\"\n    ],\n    [\n      \"ps\",\n      // Palestinian Territories\n      \"970\"\n    ],\n    [\n      \"pa\",\n      // Panama\n      \"507\"\n    ],\n    [\n      \"pg\",\n      // Papua New Guinea\n      \"675\"\n    ],\n    [\n      \"py\",\n      // Paraguay\n      \"595\"\n    ],\n    [\n      \"pe\",\n      // Peru\n      \"51\"\n    ],\n    [\n      \"ph\",\n      // Philippines\n      \"63\"\n    ],\n    [\n      \"pl\",\n      // Poland\n      \"48\"\n    ],\n    [\n      \"pt\",\n      // Portugal\n      \"351\"\n    ],\n    [\n      \"pr\",\n      // Puerto Rico\n      \"1\",\n      3,\n      [\"787\", \"939\"]\n    ],\n    [\n      \"qa\",\n      // Qatar\n      \"974\"\n    ],\n    [\n      \"re\",\n      // Réunion\n      \"262\",\n      0\n    ],\n    [\n      \"ro\",\n      // Romania\n      \"40\"\n    ],\n    [\n      \"ru\",\n      // Russia\n      \"7\",\n      0\n    ],\n    [\n      \"rw\",\n      // Rwanda\n      \"250\"\n    ],\n    [\n      \"ws\",\n      // Samoa\n      \"685\"\n    ],\n    [\n      \"sm\",\n      // San Marino\n      \"378\"\n    ],\n    [\n      \"st\",\n      // São Tomé & Príncipe\n      \"239\"\n    ],\n    [\n      \"sa\",\n      // Saudi Arabia\n      \"966\"\n    ],\n    [\n      \"sn\",\n      // Senegal\n      \"221\"\n    ],\n    [\n      \"rs\",\n      // Serbia\n      \"381\"\n    ],\n    [\n      \"sc\",\n      // Seychelles\n      \"248\"\n    ],\n    [\n      \"sl\",\n      // Sierra Leone\n      \"232\"\n    ],\n    [\n      \"sg\",\n      // Singapore\n      \"65\"\n    ],\n    [\n      \"sx\",\n      // Sint Maarten\n      \"1\",\n      21,\n      [\"721\"]\n    ],\n    [\n      \"sk\",\n      // Slovakia\n      \"421\"\n    ],\n    [\n      \"si\",\n      // Slovenia\n      \"386\"\n    ],\n    [\n      \"sb\",\n      // Solomon Islands\n      \"677\"\n    ],\n    [\n      \"so\",\n      // Somalia\n      \"252\"\n    ],\n    [\n      \"za\",\n      // South Africa\n      \"27\"\n    ],\n    [\n      \"kr\",\n      // South Korea\n      \"82\"\n    ],\n    [\n      \"ss\",\n      // South Sudan\n      \"211\"\n    ],\n    [\n      \"es\",\n      // Spain\n      \"34\"\n    ],\n    [\n      \"lk\",\n      // Sri Lanka\n      \"94\"\n    ],\n    [\n      \"bl\",\n      // St. Barthélemy\n      \"590\",\n      1\n    ],\n    [\n      \"sh\",\n      // St. Helena\n      \"290\"\n    ],\n    [\n      \"kn\",\n      // St. Kitts & Nevis\n      \"1\",\n      18,\n      [\"869\"]\n    ],\n    [\n      \"lc\",\n      // St. Lucia\n      \"1\",\n      19,\n      [\"758\"]\n    ],\n    [\n      \"mf\",\n      // St. Martin\n      \"590\",\n      2\n    ],\n    [\n      \"pm\",\n      // St. Pierre & Miquelon\n      \"508\"\n    ],\n    [\n      \"vc\",\n      // St. Vincent & Grenadines\n      \"1\",\n      20,\n      [\"784\"]\n    ],\n    [\n      \"sd\",\n      // Sudan\n      \"249\"\n    ],\n    [\n      \"sr\",\n      // Suriname\n      \"597\"\n    ],\n    [\n      \"sj\",\n      // Svalbard & Jan Mayen\n      \"47\",\n      1,\n      [\"79\"]\n    ],\n    [\n      \"se\",\n      // Sweden\n      \"46\"\n    ],\n    [\n      \"ch\",\n      // Switzerland\n      \"41\"\n    ],\n    [\n      \"sy\",\n      // Syria\n      \"963\"\n    ],\n    [\n      \"tw\",\n      // Taiwan\n      \"886\"\n    ],\n    [\n      \"tj\",\n      // Tajikistan\n      \"992\"\n    ],\n    [\n      \"tz\",\n      // Tanzania\n      \"255\"\n    ],\n    [\n      \"th\",\n      // Thailand\n      \"66\"\n    ],\n    [\n      \"tl\",\n      // Timor-Leste\n      \"670\"\n    ],\n    [\n      \"tg\",\n      // Togo\n      \"228\"\n    ],\n    [\n      \"tk\",\n      // Tokelau\n      \"690\"\n    ],\n    [\n      \"to\",\n      // Tonga\n      \"676\"\n    ],\n    [\n      \"tt\",\n      // Trinidad & Tobago\n      \"1\",\n      22,\n      [\"868\"]\n    ],\n    [\n      \"tn\",\n      // Tunisia\n      \"216\"\n    ],\n    [\n      \"tr\",\n      // Turkey\n      \"90\"\n    ],\n    [\n      \"tm\",\n      // Turkmenistan\n      \"993\"\n    ],\n    [\n      \"tc\",\n      // Turks & Caicos Islands\n      \"1\",\n      23,\n      [\"649\"]\n    ],\n    [\n      \"tv\",\n      // Tuvalu\n      \"688\"\n    ],\n    [\n      \"ug\",\n      // Uganda\n      \"256\"\n    ],\n    [\n      \"ua\",\n      // Ukraine\n      \"380\"\n    ],\n    [\n      \"ae\",\n      // United Arab Emirates\n      \"971\"\n    ],\n    [\n      \"gb\",\n      // United Kingdom\n      \"44\",\n      0\n    ],\n    [\n      \"us\",\n      // United States\n      \"1\",\n      0\n    ],\n    [\n      \"uy\",\n      // Uruguay\n      \"598\"\n    ],\n    [\n      \"vi\",\n      // U.S. Virgin Islands\n      \"1\",\n      24,\n      [\"340\"]\n    ],\n    [\n      \"uz\",\n      // Uzbekistan\n      \"998\"\n    ],\n    [\n      \"vu\",\n      // Vanuatu\n      \"678\"\n    ],\n    [\n      \"va\",\n      // Vatican City\n      \"39\",\n      1,\n      [\"06698\"]\n    ],\n    [\n      \"ve\",\n      // Venezuela\n      \"58\"\n    ],\n    [\n      \"vn\",\n      // Vietnam\n      \"84\"\n    ],\n    [\n      \"wf\",\n      // Wallis & Futuna\n      \"681\"\n    ],\n    [\n      \"eh\",\n      // Western Sahara\n      \"212\",\n      1,\n      [\"5288\", \"5289\"]\n    ],\n    [\n      \"ye\",\n      // Yemen\n      \"967\"\n    ],\n    [\n      \"zm\",\n      // Zambia\n      \"260\"\n    ],\n    [\n      \"zw\",\n      // Zimbabwe\n      \"263\"\n    ]\n  ];\n  var allCountries = [];\n  for (let i = 0; i < rawCountryData.length; i++) {\n    const c = rawCountryData[i];\n    allCountries[i] = {\n      name: \"\",\n      // this is now populated in the plugin\n      iso2: c[0],\n      dialCode: c[1],\n      priority: c[2] || 0,\n      areaCodes: c[3] || null,\n      nodeById: {}\n    };\n  }\n  var data_default = allCountries;\n\n  // src/js/intl-tel-input/i18n/en/countries.ts\n  var countryTranslations = {\n    ad: \"Andorra\",\n    ae: \"United Arab Emirates\",\n    af: \"Afghanistan\",\n    ag: \"Antigua & Barbuda\",\n    ai: \"Anguilla\",\n    al: \"Albania\",\n    am: \"Armenia\",\n    ao: \"Angola\",\n    ar: \"Argentina\",\n    as: \"American Samoa\",\n    at: \"Austria\",\n    au: \"Australia\",\n    aw: \"Aruba\",\n    ax: \"\\xC5land Islands\",\n    az: \"Azerbaijan\",\n    ba: \"Bosnia & Herzegovina\",\n    bb: \"Barbados\",\n    bd: \"Bangladesh\",\n    be: \"Belgium\",\n    bf: \"Burkina Faso\",\n    bg: \"Bulgaria\",\n    bh: \"Bahrain\",\n    bi: \"Burundi\",\n    bj: \"Benin\",\n    bl: \"St. Barth\\xE9lemy\",\n    bm: \"Bermuda\",\n    bn: \"Brunei\",\n    bo: \"Bolivia\",\n    bq: \"Caribbean Netherlands\",\n    br: \"Brazil\",\n    bs: \"Bahamas\",\n    bt: \"Bhutan\",\n    bw: \"Botswana\",\n    by: \"Belarus\",\n    bz: \"Belize\",\n    ca: \"Canada\",\n    cc: \"Cocos (Keeling) Islands\",\n    cd: \"Congo - Kinshasa\",\n    cf: \"Central African Republic\",\n    cg: \"Congo - Brazzaville\",\n    ch: \"Switzerland\",\n    ci: \"C\\xF4te d\\u2019Ivoire\",\n    ck: \"Cook Islands\",\n    cl: \"Chile\",\n    cm: \"Cameroon\",\n    cn: \"China\",\n    co: \"Colombia\",\n    cr: \"Costa Rica\",\n    cu: \"Cuba\",\n    cv: \"Cape Verde\",\n    cw: \"Cura\\xE7ao\",\n    cx: \"Christmas Island\",\n    cy: \"Cyprus\",\n    cz: \"Czechia\",\n    de: \"Germany\",\n    dj: \"Djibouti\",\n    dk: \"Denmark\",\n    dm: \"Dominica\",\n    do: \"Dominican Republic\",\n    dz: \"Algeria\",\n    ec: \"Ecuador\",\n    ee: \"Estonia\",\n    eg: \"Egypt\",\n    eh: \"Western Sahara\",\n    er: \"Eritrea\",\n    es: \"Spain\",\n    et: \"Ethiopia\",\n    fi: \"Finland\",\n    fj: \"Fiji\",\n    fk: \"Falkland Islands\",\n    fm: \"Micronesia\",\n    fo: \"Faroe Islands\",\n    fr: \"France\",\n    ga: \"Gabon\",\n    gb: \"United Kingdom\",\n    gd: \"Grenada\",\n    ge: \"Georgia\",\n    gf: \"French Guiana\",\n    gg: \"Guernsey\",\n    gh: \"Ghana\",\n    gi: \"Gibraltar\",\n    gl: \"Greenland\",\n    gm: \"Gambia\",\n    gn: \"Guinea\",\n    gp: \"Guadeloupe\",\n    gq: \"Equatorial Guinea\",\n    gr: \"Greece\",\n    gt: \"Guatemala\",\n    gu: \"Guam\",\n    gw: \"Guinea-Bissau\",\n    gy: \"Guyana\",\n    hk: \"Hong Kong SAR China\",\n    hn: \"Honduras\",\n    hr: \"Croatia\",\n    ht: \"Haiti\",\n    hu: \"Hungary\",\n    id: \"Indonesia\",\n    ie: \"Ireland\",\n    il: \"Israel\",\n    im: \"Isle of Man\",\n    in: \"India\",\n    io: \"British Indian Ocean Territory\",\n    iq: \"Iraq\",\n    ir: \"Iran\",\n    is: \"Iceland\",\n    it: \"Italy\",\n    je: \"Jersey\",\n    jm: \"Jamaica\",\n    jo: \"Jordan\",\n    jp: \"Japan\",\n    ke: \"Kenya\",\n    kg: \"Kyrgyzstan\",\n    kh: \"Cambodia\",\n    ki: \"Kiribati\",\n    km: \"Comoros\",\n    kn: \"St. Kitts & Nevis\",\n    kp: \"North Korea\",\n    kr: \"South Korea\",\n    kw: \"Kuwait\",\n    ky: \"Cayman Islands\",\n    kz: \"Kazakhstan\",\n    la: \"Laos\",\n    lb: \"Lebanon\",\n    lc: \"St. Lucia\",\n    li: \"Liechtenstein\",\n    lk: \"Sri Lanka\",\n    lr: \"Liberia\",\n    ls: \"Lesotho\",\n    lt: \"Lithuania\",\n    lu: \"Luxembourg\",\n    lv: \"Latvia\",\n    ly: \"Libya\",\n    ma: \"Morocco\",\n    mc: \"Monaco\",\n    md: \"Moldova\",\n    me: \"Montenegro\",\n    mf: \"St. Martin\",\n    mg: \"Madagascar\",\n    mh: \"Marshall Islands\",\n    mk: \"North Macedonia\",\n    ml: \"Mali\",\n    mm: \"Myanmar (Burma)\",\n    mn: \"Mongolia\",\n    mo: \"Macao SAR China\",\n    mp: \"Northern Mariana Islands\",\n    mq: \"Martinique\",\n    mr: \"Mauritania\",\n    ms: \"Montserrat\",\n    mt: \"Malta\",\n    mu: \"Mauritius\",\n    mv: \"Maldives\",\n    mw: \"Malawi\",\n    mx: \"Mexico\",\n    my: \"Malaysia\",\n    mz: \"Mozambique\",\n    na: \"Namibia\",\n    nc: \"New Caledonia\",\n    ne: \"Niger\",\n    nf: \"Norfolk Island\",\n    ng: \"Nigeria\",\n    ni: \"Nicaragua\",\n    nl: \"Netherlands\",\n    no: \"Norway\",\n    np: \"Nepal\",\n    nr: \"Nauru\",\n    nu: \"Niue\",\n    nz: \"New Zealand\",\n    om: \"Oman\",\n    pa: \"Panama\",\n    pe: \"Peru\",\n    pf: \"French Polynesia\",\n    pg: \"Papua New Guinea\",\n    ph: \"Philippines\",\n    pk: \"Pakistan\",\n    pl: \"Poland\",\n    pm: \"St. Pierre & Miquelon\",\n    pr: \"Puerto Rico\",\n    ps: \"Palestinian Territories\",\n    pt: \"Portugal\",\n    pw: \"Palau\",\n    py: \"Paraguay\",\n    qa: \"Qatar\",\n    re: \"R\\xE9union\",\n    ro: \"Romania\",\n    rs: \"Serbia\",\n    ru: \"Russia\",\n    rw: \"Rwanda\",\n    sa: \"Saudi Arabia\",\n    sb: \"Solomon Islands\",\n    sc: \"Seychelles\",\n    sd: \"Sudan\",\n    se: \"Sweden\",\n    sg: \"Singapore\",\n    sh: \"St. Helena\",\n    si: \"Slovenia\",\n    sj: \"Svalbard & Jan Mayen\",\n    sk: \"Slovakia\",\n    sl: \"Sierra Leone\",\n    sm: \"San Marino\",\n    sn: \"Senegal\",\n    so: \"Somalia\",\n    sr: \"Suriname\",\n    ss: \"South Sudan\",\n    st: \"S\\xE3o Tom\\xE9 & Pr\\xEDncipe\",\n    sv: \"El Salvador\",\n    sx: \"Sint Maarten\",\n    sy: \"Syria\",\n    sz: \"Eswatini\",\n    tc: \"Turks & Caicos Islands\",\n    td: \"Chad\",\n    tg: \"Togo\",\n    th: \"Thailand\",\n    tj: \"Tajikistan\",\n    tk: \"Tokelau\",\n    tl: \"Timor-Leste\",\n    tm: \"Turkmenistan\",\n    tn: \"Tunisia\",\n    to: \"Tonga\",\n    tr: \"Turkey\",\n    tt: \"Trinidad & Tobago\",\n    tv: \"Tuvalu\",\n    tw: \"Taiwan\",\n    tz: \"Tanzania\",\n    ua: \"Ukraine\",\n    ug: \"Uganda\",\n    us: \"United States\",\n    uy: \"Uruguay\",\n    uz: \"Uzbekistan\",\n    va: \"Vatican City\",\n    vc: \"St. Vincent & Grenadines\",\n    ve: \"Venezuela\",\n    vg: \"British Virgin Islands\",\n    vi: \"U.S. Virgin Islands\",\n    vn: \"Vietnam\",\n    vu: \"Vanuatu\",\n    wf: \"Wallis & Futuna\",\n    ws: \"Samoa\",\n    ye: \"Yemen\",\n    yt: \"Mayotte\",\n    za: \"South Africa\",\n    zm: \"Zambia\",\n    zw: \"Zimbabwe\"\n  };\n  var countries_default = countryTranslations;\n\n  // src/js/intl-tel-input/i18n/en/interface.ts\n  var interfaceTranslations = {\n    selectedCountryAriaLabel: \"Selected country\",\n    noCountrySelected: \"No country selected\",\n    countryListAriaLabel: \"List of countries\",\n    searchPlaceholder: \"Search\",\n    zeroSearchResults: \"No results found\",\n    oneSearchResult: \"1 result found\",\n    multipleSearchResults: \"${count} results found\",\n    // additional countries (not supported by country-list library)\n    ac: \"Ascension Island\",\n    xk: \"Kosovo\"\n  };\n  var interface_default = interfaceTranslations;\n\n  // src/js/intl-tel-input/i18n/en/index.ts\n  var allTranslations = { ...countries_default, ...interface_default };\n  var en_default = allTranslations;\n\n  // src/js/intl-tel-input.ts\n  for (let i = 0; i < data_default.length; i++) {\n    data_default[i].name = en_default[data_default[i].iso2];\n  }\n  var id = 0;\n  var defaults = {\n    //* Whether or not to allow the dropdown.\n    allowDropdown: true,\n    //* Add a placeholder in the input with an example number for the selected country.\n    autoPlaceholder: \"polite\",\n    //* Modify the parentClass.\n    containerClass: \"\",\n    //* The order of the countries in the dropdown. Defaults to alphabetical.\n    countryOrder: null,\n    //* Add a country search input at the top of the dropdown.\n    countrySearch: true,\n    //* Modify the auto placeholder.\n    customPlaceholder: null,\n    //* Append menu to specified element.\n    dropdownContainer: null,\n    //* Don't display these countries.\n    excludeCountries: [],\n    //* Fix the dropdown width to the input width (rather than being as wide as the longest country name).\n    fixDropdownWidth: true,\n    //* Format the number as the user types\n    formatAsYouType: true,\n    //* Format the input value during initialisation and on setNumber.\n    formatOnDisplay: true,\n    //* geoIp lookup function.\n    geoIpLookup: null,\n    //* Inject a hidden input with the name returned from this function, and on submit, populate it with the result of getNumber.\n    hiddenInput: null,\n    //* Internationalise the plugin text e.g. search input placeholder, country names.\n    i18n: {},\n    //* Initial country.\n    initialCountry: \"\",\n    //* Specify the path to the libphonenumber script to enable validation/formatting.\n    loadUtilsOnInit: \"\",\n    //* National vs international formatting for numbers e.g. placeholders and displaying existing numbers.\n    nationalMode: true,\n    //* Display only these countries.\n    onlyCountries: [],\n    //* Number type to use for placeholders.\n    placeholderNumberType: \"MOBILE\",\n    //* Show flags - for both the selected country, and in the country dropdown\n    showFlags: true,\n    //* Display the international dial code next to the selected flag.\n    separateDialCode: false,\n    //* Only allow certain chars e.g. a plus followed by numeric digits, and cap at max valid length.\n    strictMode: false,\n    //* Use full screen popup instead of dropdown for country list.\n    useFullscreenPopup: typeof navigator !== \"undefined\" && typeof window !== \"undefined\" ? (\n      //* We cannot just test screen size as some smartphones/website meta tags will report desktop resolutions.\n      //* Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n      /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n        navigator.userAgent\n      ) || window.innerWidth <= 500\n    ) : false,\n    //* Deprecated! Use `loadUtilsOnInit` instead.\n    utilsScript: \"\",\n    //* The number type to enforce during validation.\n    validationNumberType: \"MOBILE\"\n  };\n  var regionlessNanpNumbers = [\n    \"800\",\n    \"822\",\n    \"833\",\n    \"844\",\n    \"855\",\n    \"866\",\n    \"877\",\n    \"880\",\n    \"881\",\n    \"882\",\n    \"883\",\n    \"884\",\n    \"885\",\n    \"886\",\n    \"887\",\n    \"888\",\n    \"889\"\n  ];\n  var getNumeric = (s) => s.replace(/\\D/g, \"\");\n  var normaliseString = (s = \"\") => s.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\n  var isRegionlessNanp = (number) => {\n    const numeric = getNumeric(number);\n    if (numeric.charAt(0) === \"1\") {\n      const areaCode = numeric.substr(1, 3);\n      return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n    }\n    return false;\n  };\n  var translateCursorPosition = (relevantChars, formattedValue, prevCaretPos, isDeleteForwards) => {\n    if (prevCaretPos === 0 && !isDeleteForwards) {\n      return 0;\n    }\n    let count = 0;\n    for (let i = 0; i < formattedValue.length; i++) {\n      if (/[+0-9]/.test(formattedValue[i])) {\n        count++;\n      }\n      if (count === relevantChars && !isDeleteForwards) {\n        return i + 1;\n      }\n      if (isDeleteForwards && count === relevantChars + 1) {\n        return i;\n      }\n    }\n    return formattedValue.length;\n  };\n  var createEl = (name, attrs, container) => {\n    const el = document.createElement(name);\n    if (attrs) {\n      Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n    }\n    if (container) {\n      container.appendChild(el);\n    }\n    return el;\n  };\n  var forEachInstance = (method, ...args) => {\n    const { instances } = intlTelInput;\n    Object.values(instances).forEach((instance) => instance[method](...args));\n  };\n  var Iti = class {\n    constructor(input, customOptions = {}) {\n      this.id = id++;\n      this.telInput = input;\n      this.highlightedItem = null;\n      this.options = Object.assign({}, defaults, customOptions);\n      this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n    }\n    //* Can't be private as it's called from intlTelInput convenience wrapper.\n    _init() {\n      if (this.options.useFullscreenPopup) {\n        this.options.fixDropdownWidth = false;\n      }\n      if (this.options.onlyCountries.length === 1) {\n        this.options.initialCountry = this.options.onlyCountries[0];\n      }\n      if (this.options.separateDialCode) {\n        this.options.nationalMode = false;\n      }\n      if (this.options.allowDropdown && !this.options.showFlags && !this.options.separateDialCode) {\n        this.options.nationalMode = false;\n      }\n      if (this.options.useFullscreenPopup && !this.options.dropdownContainer) {\n        this.options.dropdownContainer = document.body;\n      }\n      this.isAndroid = typeof navigator !== \"undefined\" ? /Android/i.test(navigator.userAgent) : false;\n      this.isRTL = !!this.telInput.closest(\"[dir=rtl]\");\n      const showOnDefaultSide = this.options.allowDropdown || this.options.separateDialCode;\n      this.showSelectedCountryOnLeft = this.isRTL ? !showOnDefaultSide : showOnDefaultSide;\n      if (this.options.separateDialCode) {\n        if (this.isRTL) {\n          this.originalPaddingRight = this.telInput.style.paddingRight;\n        } else {\n          this.originalPaddingLeft = this.telInput.style.paddingLeft;\n        }\n      }\n      this.options.i18n = { ...en_default, ...this.options.i18n };\n      const autoCountryPromise = new Promise((resolve, reject) => {\n        this.resolveAutoCountryPromise = resolve;\n        this.rejectAutoCountryPromise = reject;\n      });\n      const utilsScriptPromise = new Promise((resolve, reject) => {\n        this.resolveUtilsScriptPromise = resolve;\n        this.rejectUtilsScriptPromise = reject;\n      });\n      this.promise = Promise.all([autoCountryPromise, utilsScriptPromise]);\n      this.selectedCountryData = {};\n      this._processCountryData();\n      this._generateMarkup();\n      this._setInitialState();\n      this._initListeners();\n      this._initRequests();\n    }\n    //********************\n    //*  PRIVATE METHODS\n    //********************\n    //* Prepare all of the country data, including onlyCountries, excludeCountries, countryOrder options.\n    _processCountryData() {\n      this._processAllCountries();\n      this._processDialCodes();\n      this._translateCountryNames();\n      this._sortCountries();\n    }\n    //* Sort countries by countryOrder option (if present), then name.\n    _sortCountries() {\n      if (this.options.countryOrder) {\n        this.options.countryOrder = this.options.countryOrder.map((country) => country.toLowerCase());\n      }\n      this.countries.sort((a, b) => {\n        const { countryOrder } = this.options;\n        if (countryOrder) {\n          const aIndex = countryOrder.indexOf(a.iso2);\n          const bIndex = countryOrder.indexOf(b.iso2);\n          const aIndexExists = aIndex > -1;\n          const bIndexExists = bIndex > -1;\n          if (aIndexExists || bIndexExists) {\n            if (aIndexExists && bIndexExists) {\n              return aIndex - bIndex;\n            }\n            return aIndexExists ? -1 : 1;\n          }\n        }\n        return a.name.localeCompare(b.name);\n      });\n    }\n    //* Add a dial code to this.dialCodeToIso2Map.\n    _addToDialCodeMap(iso2, dialCode, priority) {\n      if (dialCode.length > this.dialCodeMaxLen) {\n        this.dialCodeMaxLen = dialCode.length;\n      }\n      if (!this.dialCodeToIso2Map.hasOwnProperty(dialCode)) {\n        this.dialCodeToIso2Map[dialCode] = [];\n      }\n      for (let i = 0; i < this.dialCodeToIso2Map[dialCode].length; i++) {\n        if (this.dialCodeToIso2Map[dialCode][i] === iso2) {\n          return;\n        }\n      }\n      const index = priority !== void 0 ? priority : this.dialCodeToIso2Map[dialCode].length;\n      this.dialCodeToIso2Map[dialCode][index] = iso2;\n    }\n    //* Process onlyCountries or excludeCountries array if present.\n    _processAllCountries() {\n      const { onlyCountries, excludeCountries } = this.options;\n      if (onlyCountries.length) {\n        const lowerCaseOnlyCountries = onlyCountries.map(\n          (country) => country.toLowerCase()\n        );\n        this.countries = data_default.filter(\n          (country) => lowerCaseOnlyCountries.indexOf(country.iso2) > -1\n        );\n      } else if (excludeCountries.length) {\n        const lowerCaseExcludeCountries = excludeCountries.map(\n          (country) => country.toLowerCase()\n        );\n        this.countries = data_default.filter(\n          (country) => lowerCaseExcludeCountries.indexOf(country.iso2) === -1\n        );\n      } else {\n        this.countries = data_default;\n      }\n    }\n    //* Translate Countries by object literal provided on config.\n    _translateCountryNames() {\n      for (let i = 0; i < this.countries.length; i++) {\n        const iso2 = this.countries[i].iso2.toLowerCase();\n        if (this.options.i18n.hasOwnProperty(iso2)) {\n          this.countries[i].name = this.options.i18n[iso2];\n        }\n      }\n    }\n    //* Generate this.dialCodes and this.dialCodeToIso2Map.\n    _processDialCodes() {\n      this.dialCodes = {};\n      this.dialCodeMaxLen = 0;\n      this.dialCodeToIso2Map = {};\n      for (let i = 0; i < this.countries.length; i++) {\n        const c = this.countries[i];\n        if (!this.dialCodes[c.dialCode]) {\n          this.dialCodes[c.dialCode] = true;\n        }\n        this._addToDialCodeMap(c.iso2, c.dialCode, c.priority);\n      }\n      for (let i = 0; i < this.countries.length; i++) {\n        const c = this.countries[i];\n        if (c.areaCodes) {\n          const rootIso2Code = this.dialCodeToIso2Map[c.dialCode][0];\n          for (let j = 0; j < c.areaCodes.length; j++) {\n            const areaCode = c.areaCodes[j];\n            for (let k = 1; k < areaCode.length; k++) {\n              const partialDialCode = c.dialCode + areaCode.substr(0, k);\n              this._addToDialCodeMap(rootIso2Code, partialDialCode);\n              this._addToDialCodeMap(c.iso2, partialDialCode);\n            }\n            this._addToDialCodeMap(c.iso2, c.dialCode + areaCode);\n          }\n        }\n      }\n    }\n    //* Generate all of the markup for the plugin: the selected country overlay, and the dropdown.\n    _generateMarkup() {\n      this.telInput.classList.add(\"iti__tel-input\");\n      if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n        this.telInput.setAttribute(\"autocomplete\", \"off\");\n      }\n      const {\n        allowDropdown,\n        separateDialCode,\n        showFlags,\n        containerClass,\n        hiddenInput,\n        dropdownContainer,\n        fixDropdownWidth,\n        useFullscreenPopup,\n        countrySearch,\n        i18n\n      } = this.options;\n      let parentClass = \"iti\";\n      if (allowDropdown) {\n        parentClass += \" iti--allow-dropdown\";\n      }\n      if (showFlags) {\n        parentClass += \" iti--show-flags\";\n      }\n      if (containerClass) {\n        parentClass += ` ${containerClass}`;\n      }\n      if (!useFullscreenPopup) {\n        parentClass += \" iti--inline-dropdown\";\n      }\n      const wrapper = createEl(\"div\", { class: parentClass });\n      this.telInput.parentNode?.insertBefore(wrapper, this.telInput);\n      if (allowDropdown || showFlags || separateDialCode) {\n        this.countryContainer = createEl(\n          \"div\",\n          { class: \"iti__country-container\" },\n          wrapper\n        );\n        if (this.showSelectedCountryOnLeft) {\n          this.countryContainer.style.left = \"0px\";\n        } else {\n          this.countryContainer.style.right = \"0px\";\n        }\n        if (allowDropdown) {\n          this.selectedCountry = createEl(\n            \"button\",\n            {\n              type: \"button\",\n              class: \"iti__selected-country\",\n              \"aria-expanded\": \"false\",\n              \"aria-label\": this.options.i18n.selectedCountryAriaLabel,\n              \"aria-haspopup\": \"true\",\n              \"aria-controls\": `iti-${this.id}__dropdown-content`,\n              \"role\": \"combobox\"\n            },\n            this.countryContainer\n          );\n          if (this.telInput.disabled) {\n            this.selectedCountry.setAttribute(\"disabled\", \"true\");\n          }\n        } else {\n          this.selectedCountry = createEl(\n            \"div\",\n            { class: \"iti__selected-country\" },\n            this.countryContainer\n          );\n        }\n        const selectedCountryPrimary = createEl(\"div\", { class: \"iti__selected-country-primary\" }, this.selectedCountry);\n        this.selectedCountryInner = createEl(\"div\", { class: \"iti__flag\" }, selectedCountryPrimary);\n        this.selectedCountryA11yText = createEl(\n          \"span\",\n          { class: \"iti__a11y-text\" },\n          this.selectedCountryInner\n        );\n        if (allowDropdown) {\n          this.dropdownArrow = createEl(\n            \"div\",\n            { class: \"iti__arrow\", \"aria-hidden\": \"true\" },\n            selectedCountryPrimary\n          );\n        }\n        if (separateDialCode) {\n          this.selectedDialCode = createEl(\n            \"div\",\n            { class: \"iti__selected-dial-code\" },\n            this.selectedCountry\n          );\n        }\n        if (allowDropdown) {\n          const extraClasses = fixDropdownWidth ? \"\" : \"iti--flexible-dropdown-width\";\n          this.dropdownContent = createEl(\"div\", {\n            id: `iti-${this.id}__dropdown-content`,\n            class: `iti__dropdown-content iti__hide ${extraClasses}`\n          });\n          if (countrySearch) {\n            this.searchInput = createEl(\n              \"input\",\n              {\n                type: \"text\",\n                class: \"iti__search-input\",\n                placeholder: i18n.searchPlaceholder,\n                role: \"combobox\",\n                \"aria-expanded\": \"true\",\n                \"aria-label\": i18n.searchPlaceholder,\n                \"aria-controls\": `iti-${this.id}__country-listbox`,\n                \"aria-autocomplete\": \"list\",\n                \"autocomplete\": \"off\"\n              },\n              this.dropdownContent\n            );\n            this.searchResultsA11yText = createEl(\n              \"span\",\n              { class: \"iti__a11y-text\" },\n              this.dropdownContent\n            );\n          }\n          this.countryList = createEl(\n            \"ul\",\n            {\n              class: \"iti__country-list\",\n              id: `iti-${this.id}__country-listbox`,\n              role: \"listbox\",\n              \"aria-label\": i18n.countryListAriaLabel\n            },\n            this.dropdownContent\n          );\n          this._appendListItems();\n          if (countrySearch) {\n            this._updateSearchResultsText();\n          }\n          if (dropdownContainer) {\n            let dropdownClasses = \"iti iti--container\";\n            if (useFullscreenPopup) {\n              dropdownClasses += \" iti--fullscreen-popup\";\n            } else {\n              dropdownClasses += \" iti--inline-dropdown\";\n            }\n            this.dropdown = createEl(\"div\", { class: dropdownClasses });\n            this.dropdown.appendChild(this.dropdownContent);\n          } else {\n            this.countryContainer.appendChild(this.dropdownContent);\n          }\n        }\n      }\n      wrapper.appendChild(this.telInput);\n      this._updateInputPadding();\n      if (hiddenInput) {\n        const telInputName = this.telInput.getAttribute(\"name\") || \"\";\n        const names = hiddenInput(telInputName);\n        if (names.phone) {\n          this.hiddenInput = createEl(\"input\", {\n            type: \"hidden\",\n            name: names.phone\n          });\n          wrapper.appendChild(this.hiddenInput);\n        }\n        if (names.country) {\n          this.hiddenInputCountry = createEl(\"input\", {\n            type: \"hidden\",\n            name: names.country\n          });\n          wrapper.appendChild(this.hiddenInputCountry);\n        }\n      }\n    }\n    //* For each country: add a country list item <li> to the countryList <ul> container.\n    _appendListItems() {\n      for (let i = 0; i < this.countries.length; i++) {\n        const c = this.countries[i];\n        const extraClass = i === 0 ? \"iti__highlight\" : \"\";\n        const listItem = createEl(\n          \"li\",\n          {\n            id: `iti-${this.id}__item-${c.iso2}`,\n            class: `iti__country ${extraClass}`,\n            tabindex: \"-1\",\n            role: \"option\",\n            \"data-dial-code\": c.dialCode,\n            \"data-country-code\": c.iso2,\n            \"aria-selected\": \"false\"\n          },\n          this.countryList\n        );\n        c.nodeById[this.id] = listItem;\n        let content = \"\";\n        if (this.options.showFlags) {\n          content += `<div class='iti__flag iti__${c.iso2}'></div>`;\n        }\n        content += `<span class='iti__country-name'>${c.name}</span>`;\n        content += `<span class='iti__dial-code'>+${c.dialCode}</span>`;\n        listItem.insertAdjacentHTML(\"beforeend\", content);\n      }\n    }\n    //* Set the initial state of the input value and the selected country by:\n    //* 1. Extracting a dial code from the given number\n    //* 2. Using explicit initialCountry\n    _setInitialState(overrideAutoCountry = false) {\n      const attributeValue = this.telInput.getAttribute(\"value\");\n      const inputValue = this.telInput.value;\n      const useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n      const val = useAttribute ? attributeValue : inputValue;\n      const dialCode = this._getDialCode(val);\n      const isRegionlessNanpNumber = isRegionlessNanp(val);\n      const { initialCountry, geoIpLookup } = this.options;\n      const isAutoCountry = initialCountry === \"auto\" && geoIpLookup;\n      if (dialCode && !isRegionlessNanpNumber) {\n        this._updateCountryFromNumber(val);\n      } else if (!isAutoCountry || overrideAutoCountry) {\n        const lowerInitialCountry = initialCountry ? initialCountry.toLowerCase() : \"\";\n        const isValidInitialCountry = lowerInitialCountry && this._getCountryData(lowerInitialCountry, true);\n        if (isValidInitialCountry) {\n          this._setCountry(lowerInitialCountry);\n        } else {\n          if (dialCode && isRegionlessNanpNumber) {\n            this._setCountry(\"us\");\n          } else {\n            this._setCountry();\n          }\n        }\n      }\n      if (val) {\n        this._updateValFromNumber(val);\n      }\n    }\n    //* Initialise the main event listeners: input keyup, and click selected country.\n    _initListeners() {\n      this._initTelInputListeners();\n      if (this.options.allowDropdown) {\n        this._initDropdownListeners();\n      }\n      if ((this.hiddenInput || this.hiddenInputCountry) && this.telInput.form) {\n        this._initHiddenInputListener();\n      }\n    }\n    //* Update hidden input on form submit.\n    _initHiddenInputListener() {\n      this._handleHiddenInputSubmit = () => {\n        if (this.hiddenInput) {\n          this.hiddenInput.value = this.getNumber();\n        }\n        if (this.hiddenInputCountry) {\n          this.hiddenInputCountry.value = this.getSelectedCountryData().iso2 || \"\";\n        }\n      };\n      this.telInput.form?.addEventListener(\n        \"submit\",\n        this._handleHiddenInputSubmit\n      );\n    }\n    //* initialise the dropdown listeners.\n    _initDropdownListeners() {\n      this._handleLabelClick = (e) => {\n        if (this.dropdownContent.classList.contains(\"iti__hide\")) {\n          this.telInput.focus();\n        } else {\n          e.preventDefault();\n        }\n      };\n      const label = this.telInput.closest(\"label\");\n      if (label) {\n        label.addEventListener(\"click\", this._handleLabelClick);\n      }\n      this._handleClickSelectedCountry = () => {\n        if (this.dropdownContent.classList.contains(\"iti__hide\") && !this.telInput.disabled && !this.telInput.readOnly) {\n          this._openDropdown();\n        }\n      };\n      this.selectedCountry.addEventListener(\"click\", this._handleClickSelectedCountry);\n      this._handleCountryContainerKeydown = (e) => {\n        const isDropdownHidden = this.dropdownContent.classList.contains(\"iti__hide\");\n        if (isDropdownHidden && [\"ArrowUp\", \"ArrowDown\", \" \", \"Enter\"].includes(e.key)) {\n          e.preventDefault();\n          e.stopPropagation();\n          this._openDropdown();\n        }\n        if (e.key === \"Tab\") {\n          this._closeDropdown();\n        }\n      };\n      this.countryContainer.addEventListener(\n        \"keydown\",\n        this._handleCountryContainerKeydown\n      );\n    }\n    //* Init many requests: utils script / geo ip lookup.\n    _initRequests() {\n      let { loadUtilsOnInit, utilsScript, initialCountry, geoIpLookup } = this.options;\n      if (!loadUtilsOnInit && utilsScript) {\n        console.warn(\"intl-tel-input: The `utilsScript` option is deprecated and will be removed in a future release! Please use the `loadUtilsOnInit` option instead.\");\n        loadUtilsOnInit = utilsScript;\n      }\n      if (loadUtilsOnInit && !intlTelInput.utils) {\n        this._handlePageLoad = () => {\n          window.removeEventListener(\"load\", this._handlePageLoad);\n          intlTelInput.loadUtils(loadUtilsOnInit)?.catch(() => {\n          });\n        };\n        if (intlTelInput.documentReady()) {\n          this._handlePageLoad();\n        } else {\n          window.addEventListener(\"load\", this._handlePageLoad);\n        }\n      } else {\n        this.resolveUtilsScriptPromise();\n      }\n      const isAutoCountry = initialCountry === \"auto\" && geoIpLookup;\n      if (isAutoCountry && !this.selectedCountryData.iso2) {\n        this._loadAutoCountry();\n      } else {\n        this.resolveAutoCountryPromise();\n      }\n    }\n    //* Perform the geo ip lookup.\n    _loadAutoCountry() {\n      if (intlTelInput.autoCountry) {\n        this.handleAutoCountry();\n      } else if (!intlTelInput.startedLoadingAutoCountry) {\n        intlTelInput.startedLoadingAutoCountry = true;\n        if (typeof this.options.geoIpLookup === \"function\") {\n          this.options.geoIpLookup(\n            (iso2 = \"\") => {\n              const iso2Lower = iso2.toLowerCase();\n              const isValidIso2 = iso2Lower && this._getCountryData(iso2Lower, true);\n              if (isValidIso2) {\n                intlTelInput.autoCountry = iso2Lower;\n                setTimeout(() => forEachInstance(\"handleAutoCountry\"));\n              } else {\n                this._setInitialState(true);\n                forEachInstance(\"rejectAutoCountryPromise\");\n              }\n            },\n            () => {\n              this._setInitialState(true);\n              forEachInstance(\"rejectAutoCountryPromise\");\n            }\n          );\n        }\n      }\n    }\n    _openDropdownWithPlus() {\n      this._openDropdown();\n      this.searchInput.value = \"+\";\n      this._filterCountries(\"\", true);\n    }\n    //* Initialize the tel input listeners.\n    _initTelInputListeners() {\n      const { strictMode, formatAsYouType, separateDialCode, formatOnDisplay, allowDropdown, countrySearch } = this.options;\n      let userOverrideFormatting = false;\n      if (/\\p{L}/u.test(this.telInput.value)) {\n        userOverrideFormatting = true;\n      }\n      this._handleInputEvent = (e) => {\n        if (this.isAndroid && e?.data === \"+\" && separateDialCode && allowDropdown && countrySearch) {\n          const currentCaretPos = this.telInput.selectionStart || 0;\n          const valueBeforeCaret = this.telInput.value.substring(0, currentCaretPos - 1);\n          const valueAfterCaret = this.telInput.value.substring(currentCaretPos);\n          this.telInput.value = valueBeforeCaret + valueAfterCaret;\n          this._openDropdownWithPlus();\n          return;\n        }\n        if (this._updateCountryFromNumber(this.telInput.value)) {\n          this._triggerCountryChange();\n        }\n        const isFormattingChar = e?.data && /[^+0-9]/.test(e.data);\n        const isPaste = e?.inputType === \"insertFromPaste\" && this.telInput.value;\n        if (isFormattingChar || isPaste && !strictMode) {\n          userOverrideFormatting = true;\n        } else if (!/[^+0-9]/.test(this.telInput.value)) {\n          userOverrideFormatting = false;\n        }\n        const disableFormatOnSetNumber = e?.detail && e.detail[\"isSetNumber\"] && !formatOnDisplay;\n        if (formatAsYouType && !userOverrideFormatting && !disableFormatOnSetNumber) {\n          const currentCaretPos = this.telInput.selectionStart || 0;\n          const valueBeforeCaret = this.telInput.value.substring(0, currentCaretPos);\n          const relevantCharsBeforeCaret = valueBeforeCaret.replace(/[^+0-9]/g, \"\").length;\n          const isDeleteForwards = e?.inputType === \"deleteContentForward\";\n          const formattedValue = this._formatNumberAsYouType();\n          const newCaretPos = translateCursorPosition(relevantCharsBeforeCaret, formattedValue, currentCaretPos, isDeleteForwards);\n          this.telInput.value = formattedValue;\n          this.telInput.setSelectionRange(newCaretPos, newCaretPos);\n        }\n      };\n      this.telInput.addEventListener(\"input\", this._handleInputEvent);\n      if (strictMode || separateDialCode) {\n        this._handleKeydownEvent = (e) => {\n          if (e.key && e.key.length === 1 && !e.altKey && !e.ctrlKey && !e.metaKey) {\n            if (separateDialCode && allowDropdown && countrySearch && e.key === \"+\") {\n              e.preventDefault();\n              this._openDropdownWithPlus();\n              return;\n            }\n            if (strictMode) {\n              const value = this.telInput.value;\n              const alreadyHasPlus = value.charAt(0) === \"+\";\n              const isInitialPlus = !alreadyHasPlus && this.telInput.selectionStart === 0 && e.key === \"+\";\n              const isNumeric = /^[0-9]$/.test(e.key);\n              const isAllowedChar = separateDialCode ? isNumeric : isInitialPlus || isNumeric;\n              const newValue = value.slice(0, this.telInput.selectionStart) + e.key + value.slice(this.telInput.selectionEnd);\n              const newFullNumber = this._getFullNumber(newValue);\n              const coreNumber = intlTelInput.utils.getCoreNumber(newFullNumber, this.selectedCountryData.iso2);\n              const hasExceededMaxLength = this.maxCoreNumberLength && coreNumber.length > this.maxCoreNumberLength;\n              let isChangingDialCode = false;\n              if (alreadyHasPlus) {\n                const currentCountry = this.selectedCountryData.iso2;\n                const newCountry = this._getCountryFromNumber(newFullNumber);\n                isChangingDialCode = newCountry !== currentCountry;\n              }\n              if (!isAllowedChar || hasExceededMaxLength && !isChangingDialCode && !isInitialPlus) {\n                e.preventDefault();\n              }\n            }\n          }\n        };\n        this.telInput.addEventListener(\"keydown\", this._handleKeydownEvent);\n      }\n    }\n    //* Adhere to the input's maxlength attr.\n    _cap(number) {\n      const max = parseInt(this.telInput.getAttribute(\"maxlength\") || \"\", 10);\n      return max && number.length > max ? number.substr(0, max) : number;\n    }\n    //* Trigger a custom event on the input.\n    _trigger(name, detailProps = {}) {\n      const e = new CustomEvent(name, {\n        bubbles: true,\n        cancelable: true,\n        detail: detailProps\n      });\n      this.telInput.dispatchEvent(e);\n    }\n    //* Open the dropdown.\n    _openDropdown() {\n      const { fixDropdownWidth, countrySearch } = this.options;\n      if (fixDropdownWidth) {\n        this.dropdownContent.style.width = `${this.telInput.offsetWidth}px`;\n      }\n      this.dropdownContent.classList.remove(\"iti__hide\");\n      this.selectedCountry.setAttribute(\"aria-expanded\", \"true\");\n      this._setDropdownPosition();\n      if (countrySearch) {\n        const firstCountryItem = this.countryList.firstElementChild;\n        if (firstCountryItem) {\n          this._highlightListItem(firstCountryItem, false);\n          this.countryList.scrollTop = 0;\n        }\n        this.searchInput.focus();\n      }\n      this._bindDropdownListeners();\n      this.dropdownArrow.classList.add(\"iti__arrow--up\");\n      this._trigger(\"open:countrydropdown\");\n    }\n    //* Set the dropdown position\n    _setDropdownPosition() {\n      if (this.options.dropdownContainer) {\n        this.options.dropdownContainer.appendChild(this.dropdown);\n      }\n      if (!this.options.useFullscreenPopup) {\n        const inputPosRelativeToVP = this.telInput.getBoundingClientRect();\n        const inputHeight = this.telInput.offsetHeight;\n        if (this.options.dropdownContainer) {\n          this.dropdown.style.top = `${inputPosRelativeToVP.top + inputHeight}px`;\n          this.dropdown.style.left = `${inputPosRelativeToVP.left}px`;\n          this._handleWindowScroll = () => this._closeDropdown();\n          window.addEventListener(\"scroll\", this._handleWindowScroll);\n        }\n      }\n    }\n    //* We only bind dropdown listeners when the dropdown is open.\n    _bindDropdownListeners() {\n      this._handleMouseoverCountryList = (e) => {\n        const listItem = e.target?.closest(\".iti__country\");\n        if (listItem) {\n          this._highlightListItem(listItem, false);\n        }\n      };\n      this.countryList.addEventListener(\n        \"mouseover\",\n        this._handleMouseoverCountryList\n      );\n      this._handleClickCountryList = (e) => {\n        const listItem = e.target?.closest(\".iti__country\");\n        if (listItem) {\n          this._selectListItem(listItem);\n        }\n      };\n      this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n      let isOpening = true;\n      this._handleClickOffToClose = () => {\n        if (!isOpening) {\n          this._closeDropdown();\n        }\n        isOpening = false;\n      };\n      document.documentElement.addEventListener(\n        \"click\",\n        this._handleClickOffToClose\n      );\n      let query = \"\";\n      let queryTimer = null;\n      this._handleKeydownOnDropdown = (e) => {\n        if ([\"ArrowUp\", \"ArrowDown\", \"Enter\", \"Escape\"].includes(e.key)) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\") {\n            this._handleUpDownKey(e.key);\n          } else if (e.key === \"Enter\") {\n            this._handleEnterKey();\n          } else if (e.key === \"Escape\") {\n            this._closeDropdown();\n          }\n        }\n        if (!this.options.countrySearch && /^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n          e.stopPropagation();\n          if (queryTimer) {\n            clearTimeout(queryTimer);\n          }\n          query += e.key.toLowerCase();\n          this._searchForCountry(query);\n          queryTimer = setTimeout(() => {\n            query = \"\";\n          }, 1e3);\n        }\n      };\n      document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n      if (this.options.countrySearch) {\n        const doFilter = () => {\n          const inputQuery = this.searchInput.value.trim();\n          if (inputQuery) {\n            this._filterCountries(inputQuery);\n          } else {\n            this._filterCountries(\"\", true);\n          }\n        };\n        let keyupTimer = null;\n        this._handleSearchChange = () => {\n          if (keyupTimer) {\n            clearTimeout(keyupTimer);\n          }\n          keyupTimer = setTimeout(() => {\n            doFilter();\n            keyupTimer = null;\n          }, 100);\n        };\n        this.searchInput.addEventListener(\"input\", this._handleSearchChange);\n        this.searchInput.addEventListener(\"click\", (e) => e.stopPropagation());\n      }\n    }\n    //* Hidden search (countrySearch disabled): Find the first list item whose name starts with the query string.\n    _searchForCountry(query) {\n      for (let i = 0; i < this.countries.length; i++) {\n        const c = this.countries[i];\n        const startsWith = c.name.substr(0, query.length).toLowerCase() === query;\n        if (startsWith) {\n          const listItem = c.nodeById[this.id];\n          this._highlightListItem(listItem, false);\n          this._scrollTo(listItem);\n          break;\n        }\n      }\n    }\n    //* Country search enabled: Filter the countries according to the search query.\n    _filterCountries(query, isReset = false) {\n      let noCountriesAddedYet = true;\n      this.countryList.innerHTML = \"\";\n      const normalisedQuery = normaliseString(query);\n      for (let i = 0; i < this.countries.length; i++) {\n        const c = this.countries[i];\n        const normalisedCountryName = normaliseString(c.name);\n        const countryInitials = c.name.split(/[^a-zA-ZÀ-ÿа-яА-Я]/).map((word) => word[0]).join(\"\").toLowerCase();\n        const fullDialCode = `+${c.dialCode}`;\n        if (isReset || normalisedCountryName.includes(normalisedQuery) || fullDialCode.includes(normalisedQuery) || c.iso2.includes(normalisedQuery) || countryInitials.includes(normalisedQuery)) {\n          const listItem = c.nodeById[this.id];\n          if (listItem) {\n            this.countryList.appendChild(listItem);\n          }\n          if (noCountriesAddedYet) {\n            this._highlightListItem(listItem, false);\n            noCountriesAddedYet = false;\n          }\n        }\n      }\n      if (noCountriesAddedYet) {\n        this._highlightListItem(null, false);\n      }\n      this.countryList.scrollTop = 0;\n      this._updateSearchResultsText();\n    }\n    //* Update search results text (for a11y).\n    _updateSearchResultsText() {\n      const { i18n } = this.options;\n      const count = this.countryList.childElementCount;\n      let searchText;\n      if (count === 0) {\n        searchText = i18n.zeroSearchResults;\n      } else if (count === 1) {\n        searchText = i18n.oneSearchResult;\n      } else {\n        searchText = i18n.multipleSearchResults.replace(\"${count}\", count.toString());\n      }\n      this.searchResultsA11yText.textContent = searchText;\n    }\n    //* Highlight the next/prev item in the list (and ensure it is visible).\n    _handleUpDownKey(key) {\n      let next = key === \"ArrowUp\" ? this.highlightedItem?.previousElementSibling : this.highlightedItem?.nextElementSibling;\n      if (!next && this.countryList.childElementCount > 1) {\n        next = key === \"ArrowUp\" ? this.countryList.lastElementChild : this.countryList.firstElementChild;\n      }\n      if (next) {\n        this._scrollTo(next);\n        this._highlightListItem(next, false);\n      }\n    }\n    //* Select the currently highlighted item.\n    _handleEnterKey() {\n      if (this.highlightedItem) {\n        this._selectListItem(this.highlightedItem);\n      }\n    }\n    //* Update the input's value to the given val (format first if possible)\n    //* NOTE: this is called from _setInitialState, handleUtils and setNumber.\n    _updateValFromNumber(fullNumber) {\n      let number = fullNumber;\n      if (this.options.formatOnDisplay && intlTelInput.utils && this.selectedCountryData) {\n        const useNational = this.options.nationalMode || number.charAt(0) !== \"+\" && !this.options.separateDialCode;\n        const { NATIONAL, INTERNATIONAL } = intlTelInput.utils.numberFormat;\n        const format = useNational ? NATIONAL : INTERNATIONAL;\n        number = intlTelInput.utils.formatNumber(\n          number,\n          this.selectedCountryData.iso2,\n          format\n        );\n      }\n      number = this._beforeSetNumber(number);\n      this.telInput.value = number;\n    }\n    //* Check if need to select a new country based on the given number\n    //* Note: called from _setInitialState, keyup handler, setNumber.\n    _updateCountryFromNumber(fullNumber) {\n      const iso2 = this._getCountryFromNumber(fullNumber);\n      if (iso2 !== null) {\n        return this._setCountry(iso2);\n      }\n      return false;\n    }\n    _getCountryFromNumber(fullNumber) {\n      const plusIndex = fullNumber.indexOf(\"+\");\n      let number = plusIndex ? fullNumber.substring(plusIndex) : fullNumber;\n      const selectedDialCode = this.selectedCountryData.dialCode;\n      const isNanp = selectedDialCode === \"1\";\n      if (number && isNanp && number.charAt(0) !== \"+\") {\n        if (number.charAt(0) !== \"1\") {\n          number = `1${number}`;\n        }\n        number = `+${number}`;\n      }\n      if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n        number = `+${selectedDialCode}${number}`;\n      }\n      const dialCode = this._getDialCode(number, true);\n      const numeric = getNumeric(number);\n      if (dialCode) {\n        const iso2Codes = this.dialCodeToIso2Map[getNumeric(dialCode)];\n        const alreadySelected = iso2Codes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n        const isRegionlessNanpNumber = selectedDialCode === \"1\" && isRegionlessNanp(numeric);\n        if (!isRegionlessNanpNumber && !alreadySelected) {\n          for (let j = 0; j < iso2Codes.length; j++) {\n            if (iso2Codes[j]) {\n              return iso2Codes[j];\n            }\n          }\n        }\n      } else if (number.charAt(0) === \"+\" && numeric.length) {\n        return \"\";\n      } else if ((!number || number === \"+\") && !this.selectedCountryData.iso2) {\n        return this.defaultCountry;\n      }\n      return null;\n    }\n    //* Remove highlighting from other list items and highlight the given item.\n    _highlightListItem(listItem, shouldFocus) {\n      const prevItem = this.highlightedItem;\n      if (prevItem) {\n        prevItem.classList.remove(\"iti__highlight\");\n        prevItem.setAttribute(\"aria-selected\", \"false\");\n      }\n      this.highlightedItem = listItem;\n      if (this.highlightedItem) {\n        this.highlightedItem.classList.add(\"iti__highlight\");\n        this.highlightedItem.setAttribute(\"aria-selected\", \"true\");\n        const activeDescendant = this.highlightedItem.getAttribute(\"id\") || \"\";\n        this.selectedCountry.setAttribute(\"aria-activedescendant\", activeDescendant);\n        if (this.options.countrySearch) {\n          this.searchInput.setAttribute(\"aria-activedescendant\", activeDescendant);\n        }\n      }\n      if (shouldFocus) {\n        this.highlightedItem.focus();\n      }\n    }\n    //* Find the country data for the given iso2 code\n    //* the ignoreOnlyCountriesOption is only used during init() while parsing the onlyCountries array\n    _getCountryData(iso2, allowFail) {\n      for (let i = 0; i < this.countries.length; i++) {\n        if (this.countries[i].iso2 === iso2) {\n          return this.countries[i];\n        }\n      }\n      if (allowFail) {\n        return null;\n      }\n      throw new Error(`No country data for '${iso2}'`);\n    }\n    //* Update the selected country, dial code (if separateDialCode), placeholder, title, and active list item.\n    //* Note: called from _setInitialState, _updateCountryFromNumber, _selectListItem, setCountry.\n    _setCountry(iso2) {\n      const { separateDialCode, showFlags, i18n } = this.options;\n      const prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n      this.selectedCountryData = iso2 ? this._getCountryData(iso2, false) || {} : {};\n      if (this.selectedCountryData.iso2) {\n        this.defaultCountry = this.selectedCountryData.iso2;\n      }\n      if (this.selectedCountryInner) {\n        let flagClass = \"\";\n        let a11yText = \"\";\n        if (iso2 && showFlags) {\n          flagClass = `iti__flag iti__${iso2}`;\n          a11yText = `${this.selectedCountryData.name} +${this.selectedCountryData.dialCode}`;\n        } else {\n          flagClass = \"iti__flag iti__globe\";\n          a11yText = i18n.noCountrySelected;\n        }\n        this.selectedCountryInner.className = flagClass;\n        this.selectedCountryA11yText.textContent = a11yText;\n      }\n      this._setSelectedCountryTitleAttribute(iso2, separateDialCode);\n      if (separateDialCode) {\n        const dialCode = this.selectedCountryData.dialCode ? `+${this.selectedCountryData.dialCode}` : \"\";\n        this.selectedDialCode.innerHTML = dialCode;\n        this._updateInputPadding();\n      }\n      this._updatePlaceholder();\n      this._updateMaxLength();\n      return prevCountry.iso2 !== iso2;\n    }\n    //* Update the input padding to make space for the selected country/dial code.\n    _updateInputPadding() {\n      if (this.selectedCountry) {\n        const selectedCountryWidth = this.selectedCountry.offsetWidth || this._getHiddenSelectedCountryWidth();\n        const inputPadding = selectedCountryWidth + 6;\n        if (this.showSelectedCountryOnLeft) {\n          this.telInput.style.paddingLeft = `${inputPadding}px`;\n        } else {\n          this.telInput.style.paddingRight = `${inputPadding}px`;\n        }\n      }\n    }\n    //* Update the maximum valid number length for the currently selected country.\n    _updateMaxLength() {\n      const { strictMode, placeholderNumberType, validationNumberType } = this.options;\n      const { iso2 } = this.selectedCountryData;\n      if (strictMode && intlTelInput.utils) {\n        if (iso2) {\n          const numberType = intlTelInput.utils.numberType[placeholderNumberType];\n          let exampleNumber = intlTelInput.utils.getExampleNumber(\n            iso2,\n            false,\n            numberType,\n            true\n          );\n          let validNumber = exampleNumber;\n          while (intlTelInput.utils.isPossibleNumber(exampleNumber, iso2, validationNumberType)) {\n            validNumber = exampleNumber;\n            exampleNumber += \"0\";\n          }\n          const coreNumber = intlTelInput.utils.getCoreNumber(validNumber, iso2);\n          this.maxCoreNumberLength = coreNumber.length;\n          if (iso2 === \"by\") {\n            this.maxCoreNumberLength = coreNumber.length + 1;\n          }\n        } else {\n          this.maxCoreNumberLength = null;\n        }\n      }\n    }\n    _setSelectedCountryTitleAttribute(iso2 = null, separateDialCode) {\n      if (!this.selectedCountry) {\n        return;\n      }\n      let title;\n      if (iso2 && !separateDialCode) {\n        title = `${this.selectedCountryData.name}: +${this.selectedCountryData.dialCode}`;\n      } else if (iso2) {\n        title = this.selectedCountryData.name;\n      } else {\n        title = \"Unknown\";\n      }\n      this.selectedCountry.setAttribute(\"title\", title);\n    }\n    //* When the input is in a hidden container during initialisation, we must inject some markup\n    //* into the end of the DOM to calculate the correct offsetWidth.\n    //* NOTE: this is only used when separateDialCode is enabled, so countryContainer and selectedCountry\n    //* will definitely exist.\n    _getHiddenSelectedCountryWidth() {\n      if (this.telInput.parentNode) {\n        const containerClone = this.telInput.parentNode.cloneNode(false);\n        containerClone.style.visibility = \"hidden\";\n        document.body.appendChild(containerClone);\n        const countryContainerClone = this.countryContainer.cloneNode();\n        containerClone.appendChild(countryContainerClone);\n        const selectedCountryClone = this.selectedCountry.cloneNode(true);\n        countryContainerClone.appendChild(selectedCountryClone);\n        const width = selectedCountryClone.offsetWidth;\n        document.body.removeChild(containerClone);\n        return width;\n      }\n      return 0;\n    }\n    //* Update the input placeholder to an example number from the currently selected country.\n    _updatePlaceholder() {\n      const {\n        autoPlaceholder,\n        placeholderNumberType,\n        nationalMode,\n        customPlaceholder\n      } = this.options;\n      const shouldSetPlaceholder = autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && autoPlaceholder === \"polite\";\n      if (intlTelInput.utils && shouldSetPlaceholder) {\n        const numberType = intlTelInput.utils.numberType[placeholderNumberType];\n        let placeholder = this.selectedCountryData.iso2 ? intlTelInput.utils.getExampleNumber(\n          this.selectedCountryData.iso2,\n          nationalMode,\n          numberType\n        ) : \"\";\n        placeholder = this._beforeSetNumber(placeholder);\n        if (typeof customPlaceholder === \"function\") {\n          placeholder = customPlaceholder(placeholder, this.selectedCountryData);\n        }\n        this.telInput.setAttribute(\"placeholder\", placeholder);\n      }\n    }\n    //* Called when the user selects a list item from the dropdown.\n    _selectListItem(listItem) {\n      const countryChanged = this._setCountry(\n        listItem.getAttribute(\"data-country-code\")\n      );\n      this._closeDropdown();\n      this._updateDialCode(listItem.getAttribute(\"data-dial-code\"));\n      this.telInput.focus();\n      if (countryChanged) {\n        this._triggerCountryChange();\n      }\n    }\n    //* Close the dropdown and unbind any listeners.\n    _closeDropdown() {\n      this.dropdownContent.classList.add(\"iti__hide\");\n      this.selectedCountry.setAttribute(\"aria-expanded\", \"false\");\n      this.selectedCountry.removeAttribute(\"aria-activedescendant\");\n      if (this.highlightedItem) {\n        this.highlightedItem.setAttribute(\"aria-selected\", \"false\");\n      }\n      if (this.options.countrySearch) {\n        this.searchInput.removeAttribute(\"aria-activedescendant\");\n      }\n      this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n      document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n      if (this.options.countrySearch) {\n        this.searchInput.removeEventListener(\"input\", this._handleSearchChange);\n      }\n      document.documentElement.removeEventListener(\n        \"click\",\n        this._handleClickOffToClose\n      );\n      this.countryList.removeEventListener(\n        \"mouseover\",\n        this._handleMouseoverCountryList\n      );\n      this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n      if (this.options.dropdownContainer) {\n        if (!this.options.useFullscreenPopup) {\n          window.removeEventListener(\"scroll\", this._handleWindowScroll);\n        }\n        if (this.dropdown.parentNode) {\n          this.dropdown.parentNode.removeChild(this.dropdown);\n        }\n      }\n      if (this._handlePageLoad) {\n        window.removeEventListener(\"load\", this._handlePageLoad);\n      }\n      this._trigger(\"close:countrydropdown\");\n    }\n    //* Check if an element is visible within it's container, else scroll until it is.\n    _scrollTo(element) {\n      const container = this.countryList;\n      const scrollTop = document.documentElement.scrollTop;\n      const containerHeight = container.offsetHeight;\n      const containerTop = container.getBoundingClientRect().top + scrollTop;\n      const containerBottom = containerTop + containerHeight;\n      const elementHeight = element.offsetHeight;\n      const elementTop = element.getBoundingClientRect().top + scrollTop;\n      const elementBottom = elementTop + elementHeight;\n      const newScrollTop = elementTop - containerTop + container.scrollTop;\n      if (elementTop < containerTop) {\n        container.scrollTop = newScrollTop;\n      } else if (elementBottom > containerBottom) {\n        const heightDifference = containerHeight - elementHeight;\n        container.scrollTop = newScrollTop - heightDifference;\n      }\n    }\n    //* Replace any existing dial code with the new one\n    //* Note: called from _selectListItem and setCountry\n    _updateDialCode(newDialCodeBare) {\n      const inputVal = this.telInput.value;\n      const newDialCode = `+${newDialCodeBare}`;\n      let newNumber;\n      if (inputVal.charAt(0) === \"+\") {\n        const prevDialCode = this._getDialCode(inputVal);\n        if (prevDialCode) {\n          newNumber = inputVal.replace(prevDialCode, newDialCode);\n        } else {\n          newNumber = newDialCode;\n        }\n        this.telInput.value = newNumber;\n      }\n    }\n    //* Try and extract a valid international dial code from a full telephone number.\n    //* Note: returns the raw string inc plus character and any whitespace/dots etc.\n    _getDialCode(number, includeAreaCode) {\n      let dialCode = \"\";\n      if (number.charAt(0) === \"+\") {\n        let numericChars = \"\";\n        for (let i = 0; i < number.length; i++) {\n          const c = number.charAt(i);\n          if (!isNaN(parseInt(c, 10))) {\n            numericChars += c;\n            if (includeAreaCode) {\n              if (this.dialCodeToIso2Map[numericChars]) {\n                dialCode = number.substr(0, i + 1);\n              }\n            } else {\n              if (this.dialCodes[numericChars]) {\n                dialCode = number.substr(0, i + 1);\n                break;\n              }\n            }\n            if (numericChars.length === this.dialCodeMaxLen) {\n              break;\n            }\n          }\n        }\n      }\n      return dialCode;\n    }\n    //* Get the input val, adding the dial code if separateDialCode is enabled.\n    _getFullNumber(overrideVal) {\n      const val = overrideVal || this.telInput.value.trim();\n      const { dialCode } = this.selectedCountryData;\n      let prefix;\n      const numericVal = getNumeric(val);\n      if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n        prefix = `+${dialCode}`;\n      } else {\n        prefix = \"\";\n      }\n      return prefix + val;\n    }\n    //* Remove the dial code if separateDialCode is enabled also cap the length if the input has a maxlength attribute\n    _beforeSetNumber(fullNumber) {\n      let number = fullNumber;\n      if (this.options.separateDialCode) {\n        let dialCode = this._getDialCode(number);\n        if (dialCode) {\n          dialCode = `+${this.selectedCountryData.dialCode}`;\n          const start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n          number = number.substr(start);\n        }\n      }\n      return this._cap(number);\n    }\n    //* Trigger the 'countrychange' event.\n    _triggerCountryChange() {\n      this._trigger(\"countrychange\");\n    }\n    //* Format the number as the user types.\n    _formatNumberAsYouType() {\n      const val = this._getFullNumber();\n      const result = intlTelInput.utils ? intlTelInput.utils.formatNumberAsYouType(val, this.selectedCountryData.iso2) : val;\n      const { dialCode } = this.selectedCountryData;\n      if (this.options.separateDialCode && this.telInput.value.charAt(0) !== \"+\" && result.includes(`+${dialCode}`)) {\n        const afterDialCode = result.split(`+${dialCode}`)[1] || \"\";\n        return afterDialCode.trim();\n      }\n      return result;\n    }\n    //**************************\n    //*  SECRET PUBLIC METHODS\n    //**************************\n    //* This is called when the geoip call returns.\n    handleAutoCountry() {\n      if (this.options.initialCountry === \"auto\" && intlTelInput.autoCountry) {\n        this.defaultCountry = intlTelInput.autoCountry;\n        const hasSelectedCountryOrGlobe = this.selectedCountryData.iso2 || this.selectedCountryInner.classList.contains(\"iti__globe\");\n        if (!hasSelectedCountryOrGlobe) {\n          this.setCountry(this.defaultCountry);\n        }\n        this.resolveAutoCountryPromise();\n      }\n    }\n    //* This is called when the utils request completes.\n    handleUtils() {\n      if (intlTelInput.utils) {\n        if (this.telInput.value) {\n          this._updateValFromNumber(this.telInput.value);\n        }\n        if (this.selectedCountryData.iso2) {\n          this._updatePlaceholder();\n          this._updateMaxLength();\n        }\n      }\n      this.resolveUtilsScriptPromise();\n    }\n    //********************\n    //*  PUBLIC METHODS\n    //********************\n    //* Remove plugin.\n    destroy() {\n      const { allowDropdown, separateDialCode } = this.options;\n      if (allowDropdown) {\n        this._closeDropdown();\n        this.selectedCountry.removeEventListener(\n          \"click\",\n          this._handleClickSelectedCountry\n        );\n        this.countryContainer.removeEventListener(\n          \"keydown\",\n          this._handleCountryContainerKeydown\n        );\n        const label = this.telInput.closest(\"label\");\n        if (label) {\n          label.removeEventListener(\"click\", this._handleLabelClick);\n        }\n      }\n      const { form } = this.telInput;\n      if (this._handleHiddenInputSubmit && form) {\n        form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n      }\n      this.telInput.removeEventListener(\"input\", this._handleInputEvent);\n      if (this._handleKeydownEvent) {\n        this.telInput.removeEventListener(\"keydown\", this._handleKeydownEvent);\n      }\n      this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n      if (separateDialCode) {\n        if (this.isRTL) {\n          this.telInput.style.paddingRight = this.originalPaddingRight;\n        } else {\n          this.telInput.style.paddingLeft = this.originalPaddingLeft;\n        }\n      }\n      const wrapper = this.telInput.parentNode;\n      wrapper?.parentNode?.insertBefore(this.telInput, wrapper);\n      wrapper?.parentNode?.removeChild(wrapper);\n      delete intlTelInput.instances[this.id];\n    }\n    //* Get the extension from the current number.\n    getExtension() {\n      if (intlTelInput.utils) {\n        return intlTelInput.utils.getExtension(\n          this._getFullNumber(),\n          this.selectedCountryData.iso2\n        );\n      }\n      return \"\";\n    }\n    //* Format the number to the given format.\n    getNumber(format) {\n      if (intlTelInput.utils) {\n        const { iso2 } = this.selectedCountryData;\n        return intlTelInput.utils.formatNumber(\n          this._getFullNumber(),\n          iso2,\n          format\n        );\n      }\n      return \"\";\n    }\n    //* Get the type of the entered number e.g. landline/mobile.\n    getNumberType() {\n      if (intlTelInput.utils) {\n        return intlTelInput.utils.getNumberType(\n          this._getFullNumber(),\n          this.selectedCountryData.iso2\n        );\n      }\n      return -99;\n    }\n    //* Get the country data for the currently selected country.\n    getSelectedCountryData() {\n      return this.selectedCountryData;\n    }\n    //* Get the validation error.\n    getValidationError() {\n      if (intlTelInput.utils) {\n        const { iso2 } = this.selectedCountryData;\n        return intlTelInput.utils.getValidationError(this._getFullNumber(), iso2);\n      }\n      return -99;\n    }\n    //* Validate the input val\n    isValidNumber() {\n      if (!this.selectedCountryData.iso2) {\n        return false;\n      }\n      const val = this._getFullNumber();\n      const alphaCharPosition = val.search(/\\p{L}/u);\n      if (alphaCharPosition > -1) {\n        const beforeAlphaChar = val.substring(0, alphaCharPosition);\n        const beforeAlphaIsValid = this._utilsIsPossibleNumber(beforeAlphaChar);\n        const isValid = this._utilsIsPossibleNumber(val);\n        return beforeAlphaIsValid && isValid;\n      }\n      return this._utilsIsPossibleNumber(val);\n    }\n    _utilsIsPossibleNumber(val) {\n      return intlTelInput.utils ? intlTelInput.utils.isPossibleNumber(val, this.selectedCountryData.iso2, this.options.validationNumberType) : null;\n    }\n    //* Validate the input val (precise)\n    isValidNumberPrecise() {\n      if (!this.selectedCountryData.iso2) {\n        return false;\n      }\n      const val = this._getFullNumber();\n      const alphaCharPosition = val.search(/\\p{L}/u);\n      if (alphaCharPosition > -1) {\n        const beforeAlphaChar = val.substring(0, alphaCharPosition);\n        const beforeAlphaIsValid = this._utilsIsValidNumber(beforeAlphaChar);\n        const isValid = this._utilsIsValidNumber(val);\n        return beforeAlphaIsValid && isValid;\n      }\n      return this._utilsIsValidNumber(val);\n    }\n    _utilsIsValidNumber(val) {\n      return intlTelInput.utils ? intlTelInput.utils.isValidNumber(val, this.selectedCountryData.iso2) : null;\n    }\n    //* Update the selected country, and update the input val accordingly.\n    setCountry(iso2) {\n      const iso2Lower = iso2?.toLowerCase();\n      const currentCountry = this.selectedCountryData.iso2;\n      const isCountryChange = iso2 && iso2Lower !== currentCountry || !iso2 && currentCountry;\n      if (isCountryChange) {\n        this._setCountry(iso2Lower);\n        this._updateDialCode(this.selectedCountryData.dialCode);\n        this._triggerCountryChange();\n      }\n    }\n    //* Set the input value and update the country.\n    setNumber(number) {\n      const countryChanged = this._updateCountryFromNumber(number);\n      this._updateValFromNumber(number);\n      if (countryChanged) {\n        this._triggerCountryChange();\n      }\n      this._trigger(\"input\", { isSetNumber: true });\n    }\n    //* Set the placeholder number typ\n    setPlaceholderNumberType(type) {\n      this.options.placeholderNumberType = type;\n      this._updatePlaceholder();\n    }\n    setDisabled(disabled) {\n      this.telInput.disabled = disabled;\n      if (disabled) {\n        this.selectedCountry.setAttribute(\"disabled\", \"true\");\n      } else {\n        this.selectedCountry.removeAttribute(\"disabled\");\n      }\n    }\n  };\n  var loadUtils = (source) => {\n    if (!intlTelInput.utils && !intlTelInput.startedLoadingUtilsScript) {\n      let loadCall;\n      if (typeof source === \"string\") {\n        loadCall = import(\n          /* webpackIgnore: true */\n          /* @vite-ignore */\n          source\n        );\n      } else if (typeof source === \"function\") {\n        try {\n          loadCall = Promise.resolve(source());\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      } else {\n        return Promise.reject(new TypeError(`The argument passed to loadUtils must be a URL string or a function that returns a promise for the utilities module, not ${typeof source}`));\n      }\n      intlTelInput.startedLoadingUtilsScript = true;\n      return loadCall.then((module) => {\n        const utils = module?.default;\n        if (!utils || typeof utils !== \"object\") {\n          if (typeof source === \"string\") {\n            throw new TypeError(`The module loaded from ${source} did not set utils as its default export.`);\n          } else {\n            throw new TypeError(\"The loader function passed to loadUtils did not resolve to a module object with utils as its default export.\");\n          }\n        }\n        intlTelInput.utils = utils;\n        forEachInstance(\"handleUtils\");\n        return true;\n      }).catch((error) => {\n        forEachInstance(\"rejectUtilsScriptPromise\", error);\n        throw error;\n      });\n    }\n    return null;\n  };\n  var intlTelInput = Object.assign(\n    (input, options) => {\n      const iti = new Iti(input, options);\n      iti._init();\n      input.setAttribute(\"data-intl-tel-input-id\", iti.id.toString());\n      intlTelInput.instances[iti.id] = iti;\n      return iti;\n    },\n    {\n      defaults,\n      //* Using a static var like this allows us to mock it in the tests.\n      documentReady: () => document.readyState === \"complete\",\n      //* Get the country data object.\n      getCountryData: () => data_default,\n      //* A getter for the plugin instance.\n      getInstance: (input) => {\n        const id2 = input.getAttribute(\"data-intl-tel-input-id\");\n        return id2 ? intlTelInput.instances[id2] : null;\n      },\n      //* A map from instance ID to instance object.\n      instances: {},\n      loadUtils,\n      startedLoadingUtilsScript: false,\n      startedLoadingAutoCountry: false,\n      version: \"24.8.2\"\n    }\n  );\n  var intl_tel_input_default = intlTelInput;\n  return __toCommonJS(intl_tel_input_exports);\n})();\n\n// UMD\n  return factoryOutput.default;\n}));\n"]}